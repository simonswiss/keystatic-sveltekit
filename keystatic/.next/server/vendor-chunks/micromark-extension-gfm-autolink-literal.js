/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/micromark-extension-gfm-autolink-literal";
exports.ids = ["vendor-chunks/micromark-extension-gfm-autolink-literal"];
exports.modules = {

/***/ "(ssr)/./node_modules/micromark-extension-gfm-autolink-literal/index.js":
/*!************************************************************************!*\
  !*** ./node_modules/micromark-extension-gfm-autolink-literal/index.js ***!
  \************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("module.exports = __webpack_require__(/*! ./syntax */ \"(ssr)/./node_modules/micromark-extension-gfm-autolink-literal/syntax.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWljcm9tYXJrLWV4dGVuc2lvbi1nZm0tYXV0b2xpbmstbGl0ZXJhbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQUEsK0hBQXlCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGtleXN0YXRpYy90ZW1wbGF0ZXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL21pY3JvbWFyay1leHRlbnNpb24tZ2ZtLWF1dG9saW5rLWxpdGVyYWwvaW5kZXguanM/MDU2YiJdLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vc3ludGF4JylcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicmVxdWlyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-gfm-autolink-literal/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/micromark-extension-gfm-autolink-literal/syntax.js":
/*!*************************************************************************!*\
  !*** ./node_modules/micromark-extension-gfm-autolink-literal/syntax.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var asciiAlpha = __webpack_require__(/*! micromark/dist/character/ascii-alpha */ \"(ssr)/./node_modules/micromark/dist/character/ascii-alpha.js\");\nvar asciiAlphanumeric = __webpack_require__(/*! micromark/dist/character/ascii-alphanumeric */ \"(ssr)/./node_modules/micromark/dist/character/ascii-alphanumeric.js\");\nvar asciiControl = __webpack_require__(/*! micromark/dist/character/ascii-control */ \"(ssr)/./node_modules/micromark/dist/character/ascii-control.js\");\nvar markdownLineEnding = __webpack_require__(/*! micromark/dist/character/markdown-line-ending */ \"(ssr)/./node_modules/micromark/dist/character/markdown-line-ending.js\");\nvar unicodePunctuation = __webpack_require__(/*! micromark/dist/character/unicode-punctuation */ \"(ssr)/./node_modules/micromark/dist/character/unicode-punctuation.js\");\nvar unicodeWhitespace = __webpack_require__(/*! micromark/dist/character/unicode-whitespace */ \"(ssr)/./node_modules/micromark/dist/character/unicode-whitespace.js\");\nvar www = {\n    tokenize: tokenizeWww,\n    partial: true\n};\nvar domain = {\n    tokenize: tokenizeDomain,\n    partial: true\n};\nvar path = {\n    tokenize: tokenizePath,\n    partial: true\n};\nvar punctuation = {\n    tokenize: tokenizePunctuation,\n    partial: true\n};\nvar namedCharacterReference = {\n    tokenize: tokenizeNamedCharacterReference,\n    partial: true\n};\nvar wwwAutolink = {\n    tokenize: tokenizeWwwAutolink,\n    previous: previousWww\n};\nvar httpAutolink = {\n    tokenize: tokenizeHttpAutolink,\n    previous: previousHttp\n};\nvar emailAutolink = {\n    tokenize: tokenizeEmailAutolink,\n    previous: previousEmail\n};\nvar text = {};\n// Export hooked constructs.\nexports.text = text;\n// `0`\nvar code = 48;\n// While the code is smaller than `{`.\nwhile(code < 123){\n    text[code] = emailAutolink;\n    code++;\n    // Jump from `:` -> `A`\n    if (code === 58) code = 65;\n    else if (code === 91) code = 97;\n}\n// `+`\ntext[43] = emailAutolink;\n// `-`\ntext[45] = emailAutolink;\n// `.`\ntext[46] = emailAutolink;\n// `_`\ntext[95] = emailAutolink;\n// `h`.\ntext[72] = [\n    emailAutolink,\n    httpAutolink\n];\ntext[104] = [\n    emailAutolink,\n    httpAutolink\n];\n// `w`.\ntext[87] = [\n    emailAutolink,\n    wwwAutolink\n];\ntext[119] = [\n    emailAutolink,\n    wwwAutolink\n];\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n    var self = this;\n    var hasDot;\n    return start;\n    function start(code) {\n        /* istanbul ignore next - hooks. */ if (!gfmAtext(code) || !previousEmail(self.previous) || previous(self.events)) {\n            return nok(code);\n        }\n        effects.enter(\"literalAutolink\");\n        effects.enter(\"literalAutolinkEmail\");\n        return atext(code);\n    }\n    function atext(code) {\n        if (gfmAtext(code)) {\n            effects.consume(code);\n            return atext;\n        }\n        // `@`\n        if (code === 64) {\n            effects.consume(code);\n            return label;\n        }\n        return nok(code);\n    }\n    function label(code) {\n        // `.`\n        if (code === 46) {\n            return effects.check(punctuation, done, dotContinuation)(code);\n        }\n        if (// `-`\n        code === 45 || // `_`\n        code === 95) {\n            return effects.check(punctuation, nok, dashOrUnderscoreContinuation)(code);\n        }\n        if (asciiAlphanumeric(code)) {\n            effects.consume(code);\n            return label;\n        }\n        return done(code);\n    }\n    function dotContinuation(code) {\n        effects.consume(code);\n        hasDot = true;\n        return label;\n    }\n    function dashOrUnderscoreContinuation(code) {\n        effects.consume(code);\n        return afterDashOrUnderscore;\n    }\n    function afterDashOrUnderscore(code) {\n        // `.`\n        if (code === 46) {\n            return effects.check(punctuation, nok, dotContinuation)(code);\n        }\n        return label(code);\n    }\n    function done(code) {\n        if (hasDot) {\n            effects.exit(\"literalAutolinkEmail\");\n            effects.exit(\"literalAutolink\");\n            return ok(code);\n        }\n        return nok(code);\n    }\n}\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n    var self = this;\n    return start;\n    function start(code) {\n        /* istanbul ignore next - hooks. */ if (code !== 87 && code - 32 !== 87 || !previousWww(self.previous) || previous(self.events)) {\n            return nok(code);\n        }\n        effects.enter(\"literalAutolink\");\n        effects.enter(\"literalAutolinkWww\");\n        // For `www.` we check instead of attempt, because when it matches, GH\n        // treats it as part of a domain (yes, it says a valid domain must come\n        // after `www.`, but that’s not how it’s implemented by them).\n        return effects.check(www, effects.attempt(domain, effects.attempt(path, done), nok), nok)(code);\n    }\n    function done(code) {\n        effects.exit(\"literalAutolinkWww\");\n        effects.exit(\"literalAutolink\");\n        return ok(code);\n    }\n}\nfunction tokenizeHttpAutolink(effects, ok, nok) {\n    var self = this;\n    return start;\n    function start(code) {\n        /* istanbul ignore next - hooks. */ if (code !== 72 && code - 32 !== 72 || !previousHttp(self.previous) || previous(self.events)) {\n            return nok(code);\n        }\n        effects.enter(\"literalAutolink\");\n        effects.enter(\"literalAutolinkHttp\");\n        effects.consume(code);\n        return t1;\n    }\n    function t1(code) {\n        // `t`\n        if (code === 84 || code - 32 === 84) {\n            effects.consume(code);\n            return t2;\n        }\n        return nok(code);\n    }\n    function t2(code) {\n        // `t`\n        if (code === 84 || code - 32 === 84) {\n            effects.consume(code);\n            return p;\n        }\n        return nok(code);\n    }\n    function p(code) {\n        // `p`\n        if (code === 80 || code - 32 === 80) {\n            effects.consume(code);\n            return s;\n        }\n        return nok(code);\n    }\n    function s(code) {\n        // `s`\n        if (code === 83 || code - 32 === 83) {\n            effects.consume(code);\n            return colon;\n        }\n        return colon(code);\n    }\n    function colon(code) {\n        // `:`\n        if (code === 58) {\n            effects.consume(code);\n            return slash1;\n        }\n        return nok(code);\n    }\n    function slash1(code) {\n        // `/`\n        if (code === 47) {\n            effects.consume(code);\n            return slash2;\n        }\n        return nok(code);\n    }\n    function slash2(code) {\n        // `/`\n        if (code === 47) {\n            effects.consume(code);\n            return after;\n        }\n        return nok(code);\n    }\n    function after(code) {\n        return asciiControl(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, done), nok)(code);\n    }\n    function done(code) {\n        effects.exit(\"literalAutolinkHttp\");\n        effects.exit(\"literalAutolink\");\n        return ok(code);\n    }\n}\nfunction tokenizeWww(effects, ok, nok) {\n    return start;\n    function start(code) {\n        // Assume a `w`.\n        effects.consume(code);\n        return w2;\n    }\n    function w2(code) {\n        // `w`\n        if (code === 87 || code - 32 === 87) {\n            effects.consume(code);\n            return w3;\n        }\n        return nok(code);\n    }\n    function w3(code) {\n        // `w`\n        if (code === 87 || code - 32 === 87) {\n            effects.consume(code);\n            return dot;\n        }\n        return nok(code);\n    }\n    function dot(code) {\n        // `.`\n        if (code === 46) {\n            effects.consume(code);\n            return after;\n        }\n        return nok(code);\n    }\n    function after(code) {\n        return code === null || markdownLineEnding(code) ? nok(code) : ok(code);\n    }\n}\nfunction tokenizeDomain(effects, ok, nok) {\n    var hasUnderscoreInLastSegment;\n    var hasUnderscoreInLastLastSegment;\n    return domain;\n    function domain(code) {\n        // `&`\n        if (code === 38) {\n            return effects.check(namedCharacterReference, done, punctuationContinuation)(code);\n        }\n        if (code === 46 /* `.` */  || code === 95 /* `_` */ ) {\n            return effects.check(punctuation, done, punctuationContinuation)(code);\n        }\n        // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n        // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n        // so that’s Unicode.\n        // Instead of some new production for Unicode alphanumerics, markdown\n        // already has that for Unicode punctuation and whitespace, so use those.\n        if (asciiControl(code) || unicodeWhitespace(code) || code !== 45 /* `-` */  && unicodePunctuation(code)) {\n            return done(code);\n        }\n        effects.consume(code);\n        return domain;\n    }\n    function punctuationContinuation(code) {\n        // `.`\n        if (code === 46) {\n            hasUnderscoreInLastLastSegment = hasUnderscoreInLastSegment;\n            hasUnderscoreInLastSegment = undefined;\n            effects.consume(code);\n            return domain;\n        }\n        // `_`\n        if (code === 95) hasUnderscoreInLastSegment = true;\n        effects.consume(code);\n        return domain;\n    }\n    function done(code) {\n        if (!hasUnderscoreInLastLastSegment && !hasUnderscoreInLastSegment) {\n            return ok(code);\n        }\n        return nok(code);\n    }\n}\nfunction tokenizePath(effects, ok) {\n    var balance = 0;\n    return inPath;\n    function inPath(code) {\n        // `&`\n        if (code === 38) {\n            return effects.check(namedCharacterReference, ok, continuedPunctuation)(code);\n        }\n        // `(`\n        if (code === 40) {\n            balance++;\n        }\n        // `)`\n        if (code === 41) {\n            return effects.check(punctuation, parenAtPathEnd, continuedPunctuation)(code);\n        }\n        if (pathEnd(code)) {\n            return ok(code);\n        }\n        if (trailingPunctuation(code)) {\n            return effects.check(punctuation, ok, continuedPunctuation)(code);\n        }\n        effects.consume(code);\n        return inPath;\n    }\n    function continuedPunctuation(code) {\n        effects.consume(code);\n        return inPath;\n    }\n    function parenAtPathEnd(code) {\n        balance--;\n        return balance < 0 ? ok(code) : continuedPunctuation(code);\n    }\n}\nfunction tokenizeNamedCharacterReference(effects, ok, nok) {\n    return start;\n    function start(code) {\n        // Assume an ampersand.\n        effects.consume(code);\n        return inside;\n    }\n    function inside(code) {\n        if (asciiAlpha(code)) {\n            effects.consume(code);\n            return inside;\n        }\n        // `;`\n        if (code === 59) {\n            effects.consume(code);\n            return after;\n        }\n        return nok(code);\n    }\n    function after(code) {\n        // If the named character reference is followed by the end of the path, it’s\n        // not continued punctuation.\n        return pathEnd(code) ? ok(code) : nok(code);\n    }\n}\nfunction tokenizePunctuation(effects, ok, nok) {\n    return start;\n    function start(code) {\n        // Always a valid trailing punctuation marker.\n        effects.consume(code);\n        return after;\n    }\n    function after(code) {\n        // Check the next.\n        if (trailingPunctuation(code)) {\n            effects.consume(code);\n            return after;\n        }\n        // If the punctuation marker is followed by the end of the path, it’s not\n        // continued punctuation.\n        return pathEnd(code) ? ok(code) : nok(code);\n    }\n}\nfunction trailingPunctuation(code) {\n    return(// `!`\n    code === 33 || // `\"`\n    code === 34 || // `'`\n    code === 39 || // `)`\n    code === 41 || // `*`\n    code === 42 || // `,`\n    code === 44 || // `.`\n    code === 46 || // `:`\n    code === 58 || // `;`\n    code === 59 || // `<`\n    code === 60 || // `?`\n    code === 63 || // `_`.\n    code === 95 || // `~`\n    code === 126);\n}\nfunction pathEnd(code) {\n    return(// EOF.\n    code === null || // CR, LF, CRLF, HT, VS.\n    code < 0 || // Space.\n    code === 32 || // `<`\n    code === 60);\n}\nfunction gfmAtext(code) {\n    return code === 43 /* `+` */  || code === 45 /* `-` */  || code === 46 /* `.` */  || code === 95 /* `_` */  || asciiAlphanumeric(code);\n}\nfunction previousWww(code) {\n    return code === null || code < 0 || code === 32 /* ` ` */  || code === 40 /* `(` */  || code === 42 /* `*` */  || code === 95 /* `_` */  || code === 126 /* `~` */ ;\n}\nfunction previousHttp(code) {\n    return code === null || !asciiAlpha(code);\n}\nfunction previousEmail(code) {\n    return code !== 47 /* `/` */  && previousHttp(code);\n}\nfunction previous(events) {\n    var index = events.length;\n    while(index--){\n        if ((events[index][1].type === \"labelLink\" || events[index][1].type === \"labelImage\") && !events[index][1]._balanced) {\n            return true;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/micromark-extension-gfm-autolink-literal/syntax.js\n");

/***/ })

};
;