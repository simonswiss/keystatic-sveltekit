"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/graphql";
exports.ids = ["vendor-chunks/graphql"];
exports.modules = {

/***/ "(ssr)/./node_modules/graphql/error/GraphQLError.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/graphql/error/GraphQLError.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GraphQLError: () => (/* binding */ GraphQLError),\n/* harmony export */   formatError: () => (/* binding */ formatError),\n/* harmony export */   printError: () => (/* binding */ printError)\n/* harmony export */ });\n/* harmony import */ var _jsutils_isObjectLike_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../jsutils/isObjectLike.mjs */ \"(ssr)/./node_modules/graphql/jsutils/isObjectLike.mjs\");\n/* harmony import */ var _language_location_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../language/location.mjs */ \"(ssr)/./node_modules/graphql/language/location.mjs\");\n/* harmony import */ var _language_printLocation_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../language/printLocation.mjs */ \"(ssr)/./node_modules/graphql/language/printLocation.mjs\");\n\n\n\nfunction toNormalizedOptions(args) {\n    const firstArg = args[0];\n    if (firstArg == null || \"kind\" in firstArg || \"length\" in firstArg) {\n        return {\n            nodes: firstArg,\n            source: args[1],\n            positions: args[2],\n            path: args[3],\n            originalError: args[4],\n            extensions: args[5]\n        };\n    }\n    return firstArg;\n}\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */ class GraphQLError extends Error {\n    /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */ /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */ /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */ /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */ /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */ /**\n   * The original error thrown from a field resolver during execution.\n   */ /**\n   * Extension fields to add to the formatted error.\n   */ /**\n   * @deprecated Please use the `GraphQLErrorOptions` constructor overload instead.\n   */ constructor(message, ...rawArgs){\n        var _this$nodes, _nodeLocations$, _ref;\n        const { nodes, source, positions, path, originalError, extensions } = toNormalizedOptions(rawArgs);\n        super(message);\n        this.name = \"GraphQLError\";\n        this.path = path !== null && path !== void 0 ? path : undefined;\n        this.originalError = originalError !== null && originalError !== void 0 ? originalError : undefined; // Compute list of blame nodes.\n        this.nodes = undefinedIfEmpty(Array.isArray(nodes) ? nodes : nodes ? [\n            nodes\n        ] : undefined);\n        const nodeLocations = undefinedIfEmpty((_this$nodes = this.nodes) === null || _this$nodes === void 0 ? void 0 : _this$nodes.map((node)=>node.loc).filter((loc)=>loc != null)); // Compute locations in the source for the given nodes/positions.\n        this.source = source !== null && source !== void 0 ? source : nodeLocations === null || nodeLocations === void 0 ? void 0 : (_nodeLocations$ = nodeLocations[0]) === null || _nodeLocations$ === void 0 ? void 0 : _nodeLocations$.source;\n        this.positions = positions !== null && positions !== void 0 ? positions : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc)=>loc.start);\n        this.locations = positions && source ? positions.map((pos)=>(0,_language_location_mjs__WEBPACK_IMPORTED_MODULE_0__.getLocation)(source, pos)) : nodeLocations === null || nodeLocations === void 0 ? void 0 : nodeLocations.map((loc)=>(0,_language_location_mjs__WEBPACK_IMPORTED_MODULE_0__.getLocation)(loc.source, loc.start));\n        const originalExtensions = (0,_jsutils_isObjectLike_mjs__WEBPACK_IMPORTED_MODULE_1__.isObjectLike)(originalError === null || originalError === void 0 ? void 0 : originalError.extensions) ? originalError === null || originalError === void 0 ? void 0 : originalError.extensions : undefined;\n        this.extensions = (_ref = extensions !== null && extensions !== void 0 ? extensions : originalExtensions) !== null && _ref !== void 0 ? _ref : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n        // Keep the rest as non-enumerable.\n        Object.defineProperties(this, {\n            message: {\n                writable: true,\n                enumerable: true\n            },\n            name: {\n                enumerable: false\n            },\n            nodes: {\n                enumerable: false\n            },\n            source: {\n                enumerable: false\n            },\n            positions: {\n                enumerable: false\n            },\n            originalError: {\n                enumerable: false\n            }\n        }); // Include (non-enumerable) stack trace.\n        /* c8 ignore start */ // FIXME: https://github.com/graphql/graphql-js/issues/2317\n        if (originalError !== null && originalError !== void 0 && originalError.stack) {\n            Object.defineProperty(this, \"stack\", {\n                value: originalError.stack,\n                writable: true,\n                configurable: true\n            });\n        } else if (Error.captureStackTrace) {\n            Error.captureStackTrace(this, GraphQLError);\n        } else {\n            Object.defineProperty(this, \"stack\", {\n                value: Error().stack,\n                writable: true,\n                configurable: true\n            });\n        }\n    /* c8 ignore stop */ }\n    get [Symbol.toStringTag]() {\n        return \"GraphQLError\";\n    }\n    toString() {\n        let output = this.message;\n        if (this.nodes) {\n            for (const node of this.nodes){\n                if (node.loc) {\n                    output += \"\\n\\n\" + (0,_language_printLocation_mjs__WEBPACK_IMPORTED_MODULE_2__.printLocation)(node.loc);\n                }\n            }\n        } else if (this.source && this.locations) {\n            for (const location of this.locations){\n                output += \"\\n\\n\" + (0,_language_printLocation_mjs__WEBPACK_IMPORTED_MODULE_2__.printSourceLocation)(this.source, location);\n            }\n        }\n        return output;\n    }\n    toJSON() {\n        const formattedError = {\n            message: this.message\n        };\n        if (this.locations != null) {\n            formattedError.locations = this.locations;\n        }\n        if (this.path != null) {\n            formattedError.path = this.path;\n        }\n        if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n            formattedError.extensions = this.extensions;\n        }\n        return formattedError;\n    }\n}\nfunction undefinedIfEmpty(array) {\n    return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */ /**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */ function printError(error) {\n    return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toJSON` instead. Will be removed in v17\n */ function formatError(error) {\n    return error.toJSON();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/error/GraphQLError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/error/syntaxError.mjs":
/*!****************************************************!*\
  !*** ./node_modules/graphql/error/syntaxError.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   syntaxError: () => (/* binding */ syntaxError)\n/* harmony export */ });\n/* harmony import */ var _GraphQLError_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./GraphQLError.mjs */ \"(ssr)/./node_modules/graphql/error/GraphQLError.mjs\");\n\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */ function syntaxError(source, position, description) {\n    return new _GraphQLError_mjs__WEBPACK_IMPORTED_MODULE_0__.GraphQLError(`Syntax Error: ${description}`, {\n        source,\n        positions: [\n            position\n        ]\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9lcnJvci9zeW50YXhFcnJvci5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBa0Q7QUFDbEQ7OztDQUdDLEdBRU0sU0FBU0MsWUFBWUMsTUFBTSxFQUFFQyxRQUFRLEVBQUVDLFdBQVc7SUFDdkQsT0FBTyxJQUFJSiwyREFBWUEsQ0FBQyxDQUFDLGNBQWMsRUFBRUksWUFBWSxDQUFDLEVBQUU7UUFDdERGO1FBQ0FHLFdBQVc7WUFBQ0Y7U0FBUztJQUN2QjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGtleXN0YXRpYy90ZW1wbGF0ZXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvZXJyb3Ivc3ludGF4RXJyb3IubWpzPzZiOGMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgR3JhcGhRTEVycm9yIH0gZnJvbSAnLi9HcmFwaFFMRXJyb3IubWpzJztcbi8qKlxuICogUHJvZHVjZXMgYSBHcmFwaFFMRXJyb3IgcmVwcmVzZW50aW5nIGEgc3ludGF4IGVycm9yLCBjb250YWluaW5nIHVzZWZ1bFxuICogZGVzY3JpcHRpdmUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHN5bnRheCBlcnJvcidzIHBvc2l0aW9uIGluIHRoZSBzb3VyY2UuXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHN5bnRheEVycm9yKHNvdXJjZSwgcG9zaXRpb24sIGRlc2NyaXB0aW9uKSB7XG4gIHJldHVybiBuZXcgR3JhcGhRTEVycm9yKGBTeW50YXggRXJyb3I6ICR7ZGVzY3JpcHRpb259YCwge1xuICAgIHNvdXJjZSxcbiAgICBwb3NpdGlvbnM6IFtwb3NpdGlvbl0sXG4gIH0pO1xufVxuIl0sIm5hbWVzIjpbIkdyYXBoUUxFcnJvciIsInN5bnRheEVycm9yIiwic291cmNlIiwicG9zaXRpb24iLCJkZXNjcmlwdGlvbiIsInBvc2l0aW9ucyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/error/syntaxError.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/devAssert.mjs":
/*!****************************************************!*\
  !*** ./node_modules/graphql/jsutils/devAssert.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   devAssert: () => (/* binding */ devAssert)\n/* harmony export */ });\nfunction devAssert(condition, message) {\n    const booleanCondition = Boolean(condition);\n    if (!booleanCondition) {\n        throw new Error(message);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2RldkFzc2VydC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLFVBQVVDLFNBQVMsRUFBRUMsT0FBTztJQUMxQyxNQUFNQyxtQkFBbUJDLFFBQVFIO0lBRWpDLElBQUksQ0FBQ0Usa0JBQWtCO1FBQ3JCLE1BQU0sSUFBSUUsTUFBTUg7SUFDbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL0BrZXlzdGF0aWMvdGVtcGxhdGVzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvZGV2QXNzZXJ0Lm1qcz82NDUwIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBmdW5jdGlvbiBkZXZBc3NlcnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gIGNvbnN0IGJvb2xlYW5Db25kaXRpb24gPSBCb29sZWFuKGNvbmRpdGlvbik7XG5cbiAgaWYgKCFib29sZWFuQ29uZGl0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG4iXSwibmFtZXMiOlsiZGV2QXNzZXJ0IiwiY29uZGl0aW9uIiwibWVzc2FnZSIsImJvb2xlYW5Db25kaXRpb24iLCJCb29sZWFuIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/devAssert.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/inspect.mjs":
/*!**************************************************!*\
  !*** ./node_modules/graphql/jsutils/inspect.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   inspect: () => (/* binding */ inspect)\n/* harmony export */ });\nconst MAX_ARRAY_LENGTH = 10;\nconst MAX_RECURSIVE_DEPTH = 2;\n/**\n * Used to print values in error messages.\n */ function inspect(value) {\n    return formatValue(value, []);\n}\nfunction formatValue(value, seenValues) {\n    switch(typeof value){\n        case \"string\":\n            return JSON.stringify(value);\n        case \"function\":\n            return value.name ? `[function ${value.name}]` : \"[function]\";\n        case \"object\":\n            return formatObjectValue(value, seenValues);\n        default:\n            return String(value);\n    }\n}\nfunction formatObjectValue(value, previouslySeenValues) {\n    if (value === null) {\n        return \"null\";\n    }\n    if (previouslySeenValues.includes(value)) {\n        return \"[Circular]\";\n    }\n    const seenValues = [\n        ...previouslySeenValues,\n        value\n    ];\n    if (isJSONable(value)) {\n        const jsonValue = value.toJSON(); // check for infinite recursion\n        if (jsonValue !== value) {\n            return typeof jsonValue === \"string\" ? jsonValue : formatValue(jsonValue, seenValues);\n        }\n    } else if (Array.isArray(value)) {\n        return formatArray(value, seenValues);\n    }\n    return formatObject(value, seenValues);\n}\nfunction isJSONable(value) {\n    return typeof value.toJSON === \"function\";\n}\nfunction formatObject(object, seenValues) {\n    const entries = Object.entries(object);\n    if (entries.length === 0) {\n        return \"{}\";\n    }\n    if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n        return \"[\" + getObjectTag(object) + \"]\";\n    }\n    const properties = entries.map(([key, value])=>key + \": \" + formatValue(value, seenValues));\n    return \"{ \" + properties.join(\", \") + \" }\";\n}\nfunction formatArray(array, seenValues) {\n    if (array.length === 0) {\n        return \"[]\";\n    }\n    if (seenValues.length > MAX_RECURSIVE_DEPTH) {\n        return \"[Array]\";\n    }\n    const len = Math.min(MAX_ARRAY_LENGTH, array.length);\n    const remaining = array.length - len;\n    const items = [];\n    for(let i = 0; i < len; ++i){\n        items.push(formatValue(array[i], seenValues));\n    }\n    if (remaining === 1) {\n        items.push(\"... 1 more item\");\n    } else if (remaining > 1) {\n        items.push(`... ${remaining} more items`);\n    }\n    return \"[\" + items.join(\", \") + \"]\";\n}\nfunction getObjectTag(object) {\n    const tag = Object.prototype.toString.call(object).replace(/^\\[object /, \"\").replace(/]$/, \"\");\n    if (tag === \"Object\" && typeof object.constructor === \"function\") {\n        const name = object.constructor.name;\n        if (typeof name === \"string\" && name !== \"\") {\n            return name;\n        }\n    }\n    return tag;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2luc3BlY3QubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxNQUFNQSxtQkFBbUI7QUFDekIsTUFBTUMsc0JBQXNCO0FBQzVCOztDQUVDLEdBRU0sU0FBU0MsUUFBUUMsS0FBSztJQUMzQixPQUFPQyxZQUFZRCxPQUFPLEVBQUU7QUFDOUI7QUFFQSxTQUFTQyxZQUFZRCxLQUFLLEVBQUVFLFVBQVU7SUFDcEMsT0FBUSxPQUFPRjtRQUNiLEtBQUs7WUFDSCxPQUFPRyxLQUFLQyxTQUFTLENBQUNKO1FBRXhCLEtBQUs7WUFDSCxPQUFPQSxNQUFNSyxJQUFJLEdBQUcsQ0FBQyxVQUFVLEVBQUVMLE1BQU1LLElBQUksQ0FBQyxDQUFDLENBQUMsR0FBRztRQUVuRCxLQUFLO1lBQ0gsT0FBT0Msa0JBQWtCTixPQUFPRTtRQUVsQztZQUNFLE9BQU9LLE9BQU9QO0lBQ2xCO0FBQ0Y7QUFFQSxTQUFTTSxrQkFBa0JOLEtBQUssRUFBRVEsb0JBQW9CO0lBQ3BELElBQUlSLFVBQVUsTUFBTTtRQUNsQixPQUFPO0lBQ1Q7SUFFQSxJQUFJUSxxQkFBcUJDLFFBQVEsQ0FBQ1QsUUFBUTtRQUN4QyxPQUFPO0lBQ1Q7SUFFQSxNQUFNRSxhQUFhO1dBQUlNO1FBQXNCUjtLQUFNO0lBRW5ELElBQUlVLFdBQVdWLFFBQVE7UUFDckIsTUFBTVcsWUFBWVgsTUFBTVksTUFBTSxJQUFJLCtCQUErQjtRQUVqRSxJQUFJRCxjQUFjWCxPQUFPO1lBQ3ZCLE9BQU8sT0FBT1csY0FBYyxXQUN4QkEsWUFDQVYsWUFBWVUsV0FBV1Q7UUFDN0I7SUFDRixPQUFPLElBQUlXLE1BQU1DLE9BQU8sQ0FBQ2QsUUFBUTtRQUMvQixPQUFPZSxZQUFZZixPQUFPRTtJQUM1QjtJQUVBLE9BQU9jLGFBQWFoQixPQUFPRTtBQUM3QjtBQUVBLFNBQVNRLFdBQVdWLEtBQUs7SUFDdkIsT0FBTyxPQUFPQSxNQUFNWSxNQUFNLEtBQUs7QUFDakM7QUFFQSxTQUFTSSxhQUFhQyxNQUFNLEVBQUVmLFVBQVU7SUFDdEMsTUFBTWdCLFVBQVVDLE9BQU9ELE9BQU8sQ0FBQ0Q7SUFFL0IsSUFBSUMsUUFBUUUsTUFBTSxLQUFLLEdBQUc7UUFDeEIsT0FBTztJQUNUO0lBRUEsSUFBSWxCLFdBQVdrQixNQUFNLEdBQUd0QixxQkFBcUI7UUFDM0MsT0FBTyxNQUFNdUIsYUFBYUosVUFBVTtJQUN0QztJQUVBLE1BQU1LLGFBQWFKLFFBQVFLLEdBQUcsQ0FDNUIsQ0FBQyxDQUFDQyxLQUFLeEIsTUFBTSxHQUFLd0IsTUFBTSxPQUFPdkIsWUFBWUQsT0FBT0U7SUFFcEQsT0FBTyxPQUFPb0IsV0FBV0csSUFBSSxDQUFDLFFBQVE7QUFDeEM7QUFFQSxTQUFTVixZQUFZVyxLQUFLLEVBQUV4QixVQUFVO0lBQ3BDLElBQUl3QixNQUFNTixNQUFNLEtBQUssR0FBRztRQUN0QixPQUFPO0lBQ1Q7SUFFQSxJQUFJbEIsV0FBV2tCLE1BQU0sR0FBR3RCLHFCQUFxQjtRQUMzQyxPQUFPO0lBQ1Q7SUFFQSxNQUFNNkIsTUFBTUMsS0FBS0MsR0FBRyxDQUFDaEMsa0JBQWtCNkIsTUFBTU4sTUFBTTtJQUNuRCxNQUFNVSxZQUFZSixNQUFNTixNQUFNLEdBQUdPO0lBQ2pDLE1BQU1JLFFBQVEsRUFBRTtJQUVoQixJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUwsS0FBSyxFQUFFSyxFQUFHO1FBQzVCRCxNQUFNRSxJQUFJLENBQUNoQyxZQUFZeUIsS0FBSyxDQUFDTSxFQUFFLEVBQUU5QjtJQUNuQztJQUVBLElBQUk0QixjQUFjLEdBQUc7UUFDbkJDLE1BQU1FLElBQUksQ0FBQztJQUNiLE9BQU8sSUFBSUgsWUFBWSxHQUFHO1FBQ3hCQyxNQUFNRSxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUVILFVBQVUsV0FBVyxDQUFDO0lBQzFDO0lBRUEsT0FBTyxNQUFNQyxNQUFNTixJQUFJLENBQUMsUUFBUTtBQUNsQztBQUVBLFNBQVNKLGFBQWFKLE1BQU07SUFDMUIsTUFBTWlCLE1BQU1mLE9BQU9nQixTQUFTLENBQUNDLFFBQVEsQ0FDbENDLElBQUksQ0FBQ3BCLFFBQ0xxQixPQUFPLENBQUMsY0FBYyxJQUN0QkEsT0FBTyxDQUFDLE1BQU07SUFFakIsSUFBSUosUUFBUSxZQUFZLE9BQU9qQixPQUFPc0IsV0FBVyxLQUFLLFlBQVk7UUFDaEUsTUFBTWxDLE9BQU9ZLE9BQU9zQixXQUFXLENBQUNsQyxJQUFJO1FBRXBDLElBQUksT0FBT0EsU0FBUyxZQUFZQSxTQUFTLElBQUk7WUFDM0MsT0FBT0E7UUFDVDtJQUNGO0lBRUEsT0FBTzZCO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Aa2V5c3RhdGljL3RlbXBsYXRlcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2luc3BlY3QubWpzP2ZmY2IiXSwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgTUFYX0FSUkFZX0xFTkdUSCA9IDEwO1xuY29uc3QgTUFYX1JFQ1VSU0lWRV9ERVBUSCA9IDI7XG4vKipcbiAqIFVzZWQgdG8gcHJpbnQgdmFsdWVzIGluIGVycm9yIG1lc3NhZ2VzLlxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpbnNwZWN0KHZhbHVlKSB7XG4gIHJldHVybiBmb3JtYXRWYWx1ZSh2YWx1ZSwgW10pO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRWYWx1ZSh2YWx1ZSwgc2VlblZhbHVlcykge1xuICBzd2l0Y2ggKHR5cGVvZiB2YWx1ZSkge1xuICAgIGNhc2UgJ3N0cmluZyc6XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuXG4gICAgY2FzZSAnZnVuY3Rpb24nOlxuICAgICAgcmV0dXJuIHZhbHVlLm5hbWUgPyBgW2Z1bmN0aW9uICR7dmFsdWUubmFtZX1dYCA6ICdbZnVuY3Rpb25dJztcblxuICAgIGNhc2UgJ29iamVjdCc6XG4gICAgICByZXR1cm4gZm9ybWF0T2JqZWN0VmFsdWUodmFsdWUsIHNlZW5WYWx1ZXMpO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvcm1hdE9iamVjdFZhbHVlKHZhbHVlLCBwcmV2aW91c2x5U2VlblZhbHVlcykge1xuICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gJ251bGwnO1xuICB9XG5cbiAgaWYgKHByZXZpb3VzbHlTZWVuVmFsdWVzLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gIH1cblxuICBjb25zdCBzZWVuVmFsdWVzID0gWy4uLnByZXZpb3VzbHlTZWVuVmFsdWVzLCB2YWx1ZV07XG5cbiAgaWYgKGlzSlNPTmFibGUodmFsdWUpKSB7XG4gICAgY29uc3QganNvblZhbHVlID0gdmFsdWUudG9KU09OKCk7IC8vIGNoZWNrIGZvciBpbmZpbml0ZSByZWN1cnNpb25cblxuICAgIGlmIChqc29uVmFsdWUgIT09IHZhbHVlKSB7XG4gICAgICByZXR1cm4gdHlwZW9mIGpzb25WYWx1ZSA9PT0gJ3N0cmluZydcbiAgICAgICAgPyBqc29uVmFsdWVcbiAgICAgICAgOiBmb3JtYXRWYWx1ZShqc29uVmFsdWUsIHNlZW5WYWx1ZXMpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmb3JtYXRBcnJheSh2YWx1ZSwgc2VlblZhbHVlcyk7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0T2JqZWN0KHZhbHVlLCBzZWVuVmFsdWVzKTtcbn1cblxuZnVuY3Rpb24gaXNKU09OYWJsZSh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlLnRvSlNPTiA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZnVuY3Rpb24gZm9ybWF0T2JqZWN0KG9iamVjdCwgc2VlblZhbHVlcykge1xuICBjb25zdCBlbnRyaWVzID0gT2JqZWN0LmVudHJpZXMob2JqZWN0KTtcblxuICBpZiAoZW50cmllcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gJ3t9JztcbiAgfVxuXG4gIGlmIChzZWVuVmFsdWVzLmxlbmd0aCA+IE1BWF9SRUNVUlNJVkVfREVQVEgpIHtcbiAgICByZXR1cm4gJ1snICsgZ2V0T2JqZWN0VGFnKG9iamVjdCkgKyAnXSc7XG4gIH1cblxuICBjb25zdCBwcm9wZXJ0aWVzID0gZW50cmllcy5tYXAoXG4gICAgKFtrZXksIHZhbHVlXSkgPT4ga2V5ICsgJzogJyArIGZvcm1hdFZhbHVlKHZhbHVlLCBzZWVuVmFsdWVzKSxcbiAgKTtcbiAgcmV0dXJuICd7ICcgKyBwcm9wZXJ0aWVzLmpvaW4oJywgJykgKyAnIH0nO1xufVxuXG5mdW5jdGlvbiBmb3JtYXRBcnJheShhcnJheSwgc2VlblZhbHVlcykge1xuICBpZiAoYXJyYXkubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdbXSc7XG4gIH1cblxuICBpZiAoc2VlblZhbHVlcy5sZW5ndGggPiBNQVhfUkVDVVJTSVZFX0RFUFRIKSB7XG4gICAgcmV0dXJuICdbQXJyYXldJztcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IE1hdGgubWluKE1BWF9BUlJBWV9MRU5HVEgsIGFycmF5Lmxlbmd0aCk7XG4gIGNvbnN0IHJlbWFpbmluZyA9IGFycmF5Lmxlbmd0aCAtIGxlbjtcbiAgY29uc3QgaXRlbXMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaXRlbXMucHVzaChmb3JtYXRWYWx1ZShhcnJheVtpXSwgc2VlblZhbHVlcykpO1xuICB9XG5cbiAgaWYgKHJlbWFpbmluZyA9PT0gMSkge1xuICAgIGl0ZW1zLnB1c2goJy4uLiAxIG1vcmUgaXRlbScpO1xuICB9IGVsc2UgaWYgKHJlbWFpbmluZyA+IDEpIHtcbiAgICBpdGVtcy5wdXNoKGAuLi4gJHtyZW1haW5pbmd9IG1vcmUgaXRlbXNgKTtcbiAgfVxuXG4gIHJldHVybiAnWycgKyBpdGVtcy5qb2luKCcsICcpICsgJ10nO1xufVxuXG5mdW5jdGlvbiBnZXRPYmplY3RUYWcob2JqZWN0KSB7XG4gIGNvbnN0IHRhZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmdcbiAgICAuY2FsbChvYmplY3QpXG4gICAgLnJlcGxhY2UoL15cXFtvYmplY3QgLywgJycpXG4gICAgLnJlcGxhY2UoL10kLywgJycpO1xuXG4gIGlmICh0YWcgPT09ICdPYmplY3QnICYmIHR5cGVvZiBvYmplY3QuY29uc3RydWN0b3IgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjb25zdCBuYW1lID0gb2JqZWN0LmNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgICBpZiAodHlwZW9mIG5hbWUgPT09ICdzdHJpbmcnICYmIG5hbWUgIT09ICcnKSB7XG4gICAgICByZXR1cm4gbmFtZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFnO1xufVxuIl0sIm5hbWVzIjpbIk1BWF9BUlJBWV9MRU5HVEgiLCJNQVhfUkVDVVJTSVZFX0RFUFRIIiwiaW5zcGVjdCIsInZhbHVlIiwiZm9ybWF0VmFsdWUiLCJzZWVuVmFsdWVzIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5hbWUiLCJmb3JtYXRPYmplY3RWYWx1ZSIsIlN0cmluZyIsInByZXZpb3VzbHlTZWVuVmFsdWVzIiwiaW5jbHVkZXMiLCJpc0pTT05hYmxlIiwianNvblZhbHVlIiwidG9KU09OIiwiQXJyYXkiLCJpc0FycmF5IiwiZm9ybWF0QXJyYXkiLCJmb3JtYXRPYmplY3QiLCJvYmplY3QiLCJlbnRyaWVzIiwiT2JqZWN0IiwibGVuZ3RoIiwiZ2V0T2JqZWN0VGFnIiwicHJvcGVydGllcyIsIm1hcCIsImtleSIsImpvaW4iLCJhcnJheSIsImxlbiIsIk1hdGgiLCJtaW4iLCJyZW1haW5pbmciLCJpdGVtcyIsImkiLCJwdXNoIiwidGFnIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwicmVwbGFjZSIsImNvbnN0cnVjdG9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/inspect.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/instanceOf.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/graphql/jsutils/instanceOf.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   instanceOf: () => (/* binding */ instanceOf)\n/* harmony export */ });\n/* harmony import */ var _inspect_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./inspect.mjs */ \"(ssr)/./node_modules/graphql/jsutils/inspect.mjs\");\n\n/**\n * A replacement for instanceof which includes an error warning when multi-realm\n * constructors are detected.\n * See: https://expressjs.com/en/advanced/best-practice-performance.html#set-node_env-to-production\n * See: https://webpack.js.org/guides/production/\n */ const instanceOf = /* c8 ignore next 6 */ // FIXME: https://github.com/graphql/graphql-js/issues/2317\nglobalThis.process && globalThis.process.env.NODE_ENV === \"production\" ? function instanceOf(value, constructor) {\n    return value instanceof constructor;\n} : function instanceOf(value, constructor) {\n    if (value instanceof constructor) {\n        return true;\n    }\n    if (typeof value === \"object\" && value !== null) {\n        var _value$constructor;\n        // Prefer Symbol.toStringTag since it is immune to minification.\n        const className = constructor.prototype[Symbol.toStringTag];\n        const valueClassName = Symbol.toStringTag in value // @ts-expect-error TS bug see, https://github.com/microsoft/TypeScript/issues/38009\n         ? value[Symbol.toStringTag] : (_value$constructor = value.constructor) === null || _value$constructor === void 0 ? void 0 : _value$constructor.name;\n        if (className === valueClassName) {\n            const stringifiedValue = (0,_inspect_mjs__WEBPACK_IMPORTED_MODULE_0__.inspect)(value);\n            throw new Error(`Cannot use ${className} \"${stringifiedValue}\" from another module or realm.\n\nEnsure that there is only one instance of \"graphql\" in the node_modules\ndirectory. If different versions of \"graphql\" are the dependencies of other\nrelied on modules, use \"resolutions\" to ensure only one version is installed.\n\nhttps://yarnpkg.com/en/docs/selective-version-resolutions\n\nDuplicate \"graphql\" modules cannot be used at the same time since different\nversions may have different capabilities and behavior. The data from one\nversion used in the function from another could produce confusing and\nspurious results.`);\n        }\n    }\n    return false;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2luc3RhbmNlT2YubWpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXdDO0FBQ3hDOzs7OztDQUtDLEdBRU0sTUFBTUMsYUFDWCxvQkFBb0IsR0FDcEIsMkRBQTJEO0FBQzNEQyxXQUFXQyxPQUFPLElBQUlELFdBQVdDLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyxRQUFRLEtBQUssZUFDdEQsU0FBU0osV0FBV0ssS0FBSyxFQUFFQyxXQUFXO0lBQ3BDLE9BQU9ELGlCQUFpQkM7QUFDMUIsSUFDQSxTQUFTTixXQUFXSyxLQUFLLEVBQUVDLFdBQVc7SUFDcEMsSUFBSUQsaUJBQWlCQyxhQUFhO1FBQ2hDLE9BQU87SUFDVDtJQUVBLElBQUksT0FBT0QsVUFBVSxZQUFZQSxVQUFVLE1BQU07UUFDL0MsSUFBSUU7UUFFSixnRUFBZ0U7UUFDaEUsTUFBTUMsWUFBWUYsWUFBWUcsU0FBUyxDQUFDQyxPQUFPQyxXQUFXLENBQUM7UUFDM0QsTUFBTUMsaUJBQ0pGLE9BQU9DLFdBQVcsSUFBSU4sTUFBTSxvRkFBb0Y7V0FDNUdBLEtBQUssQ0FBQ0ssT0FBT0MsV0FBVyxDQUFDLEdBQ3pCLENBQUNKLHFCQUFxQkYsTUFBTUMsV0FBVyxNQUFNLFFBQzdDQyx1QkFBdUIsS0FBSyxJQUM1QixLQUFLLElBQ0xBLG1CQUFtQk0sSUFBSTtRQUU3QixJQUFJTCxjQUFjSSxnQkFBZ0I7WUFDaEMsTUFBTUUsbUJBQW1CZixxREFBT0EsQ0FBQ007WUFDakMsTUFBTSxJQUFJVSxNQUFNLENBQUMsV0FBVyxFQUFFUCxVQUFVLEVBQUUsRUFBRU0saUJBQWlCOzs7Ozs7Ozs7OztpQkFXeEQsQ0FBQztRQUNSO0lBQ0Y7SUFFQSxPQUFPO0FBQ1QsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovL0BrZXlzdGF0aWMvdGVtcGxhdGVzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2pzdXRpbHMvaW5zdGFuY2VPZi5tanM/MzlmNiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBpbnNwZWN0IH0gZnJvbSAnLi9pbnNwZWN0Lm1qcyc7XG4vKipcbiAqIEEgcmVwbGFjZW1lbnQgZm9yIGluc3RhbmNlb2Ygd2hpY2ggaW5jbHVkZXMgYW4gZXJyb3Igd2FybmluZyB3aGVuIG11bHRpLXJlYWxtXG4gKiBjb25zdHJ1Y3RvcnMgYXJlIGRldGVjdGVkLlxuICogU2VlOiBodHRwczovL2V4cHJlc3Nqcy5jb20vZW4vYWR2YW5jZWQvYmVzdC1wcmFjdGljZS1wZXJmb3JtYW5jZS5odG1sI3NldC1ub2RlX2Vudi10by1wcm9kdWN0aW9uXG4gKiBTZWU6IGh0dHBzOi8vd2VicGFjay5qcy5vcmcvZ3VpZGVzL3Byb2R1Y3Rpb24vXG4gKi9cblxuZXhwb3J0IGNvbnN0IGluc3RhbmNlT2YgPVxuICAvKiBjOCBpZ25vcmUgbmV4dCA2ICovXG4gIC8vIEZJWE1FOiBodHRwczovL2dpdGh1Yi5jb20vZ3JhcGhxbC9ncmFwaHFsLWpzL2lzc3Vlcy8yMzE3XG4gIGdsb2JhbFRoaXMucHJvY2VzcyAmJiBnbG9iYWxUaGlzLnByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbidcbiAgICA/IGZ1bmN0aW9uIGluc3RhbmNlT2YodmFsdWUsIGNvbnN0cnVjdG9yKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIGNvbnN0cnVjdG9yO1xuICAgICAgfVxuICAgIDogZnVuY3Rpb24gaW5zdGFuY2VPZih2YWx1ZSwgY29uc3RydWN0b3IpIHtcbiAgICAgICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgY29uc3RydWN0b3IpIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICE9PSBudWxsKSB7XG4gICAgICAgICAgdmFyIF92YWx1ZSRjb25zdHJ1Y3RvcjtcblxuICAgICAgICAgIC8vIFByZWZlciBTeW1ib2wudG9TdHJpbmdUYWcgc2luY2UgaXQgaXMgaW1tdW5lIHRvIG1pbmlmaWNhdGlvbi5cbiAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBjb25zdHJ1Y3Rvci5wcm90b3R5cGVbU3ltYm9sLnRvU3RyaW5nVGFnXTtcbiAgICAgICAgICBjb25zdCB2YWx1ZUNsYXNzTmFtZSA9IC8vIFdlIHN0aWxsIG5lZWQgdG8gc3VwcG9ydCBjb25zdHJ1Y3RvcidzIG5hbWUgdG8gZGV0ZWN0IGNvbmZsaWN0cyB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIHRoaXMgbGlicmFyeS5cbiAgICAgICAgICAgIFN5bWJvbC50b1N0cmluZ1RhZyBpbiB2YWx1ZSAvLyBAdHMtZXhwZWN0LWVycm9yIFRTIGJ1ZyBzZWUsIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzgwMDlcbiAgICAgICAgICAgICAgPyB2YWx1ZVtTeW1ib2wudG9TdHJpbmdUYWddXG4gICAgICAgICAgICAgIDogKF92YWx1ZSRjb25zdHJ1Y3RvciA9IHZhbHVlLmNvbnN0cnVjdG9yKSA9PT0gbnVsbCB8fFxuICAgICAgICAgICAgICAgIF92YWx1ZSRjb25zdHJ1Y3RvciA9PT0gdm9pZCAwXG4gICAgICAgICAgICAgID8gdm9pZCAwXG4gICAgICAgICAgICAgIDogX3ZhbHVlJGNvbnN0cnVjdG9yLm5hbWU7XG5cbiAgICAgICAgICBpZiAoY2xhc3NOYW1lID09PSB2YWx1ZUNsYXNzTmFtZSkge1xuICAgICAgICAgICAgY29uc3Qgc3RyaW5naWZpZWRWYWx1ZSA9IGluc3BlY3QodmFsdWUpO1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgdXNlICR7Y2xhc3NOYW1lfSBcIiR7c3RyaW5naWZpZWRWYWx1ZX1cIiBmcm9tIGFub3RoZXIgbW9kdWxlIG9yIHJlYWxtLlxuXG5FbnN1cmUgdGhhdCB0aGVyZSBpcyBvbmx5IG9uZSBpbnN0YW5jZSBvZiBcImdyYXBocWxcIiBpbiB0aGUgbm9kZV9tb2R1bGVzXG5kaXJlY3RvcnkuIElmIGRpZmZlcmVudCB2ZXJzaW9ucyBvZiBcImdyYXBocWxcIiBhcmUgdGhlIGRlcGVuZGVuY2llcyBvZiBvdGhlclxucmVsaWVkIG9uIG1vZHVsZXMsIHVzZSBcInJlc29sdXRpb25zXCIgdG8gZW5zdXJlIG9ubHkgb25lIHZlcnNpb24gaXMgaW5zdGFsbGVkLlxuXG5odHRwczovL3lhcm5wa2cuY29tL2VuL2RvY3Mvc2VsZWN0aXZlLXZlcnNpb24tcmVzb2x1dGlvbnNcblxuRHVwbGljYXRlIFwiZ3JhcGhxbFwiIG1vZHVsZXMgY2Fubm90IGJlIHVzZWQgYXQgdGhlIHNhbWUgdGltZSBzaW5jZSBkaWZmZXJlbnRcbnZlcnNpb25zIG1heSBoYXZlIGRpZmZlcmVudCBjYXBhYmlsaXRpZXMgYW5kIGJlaGF2aW9yLiBUaGUgZGF0YSBmcm9tIG9uZVxudmVyc2lvbiB1c2VkIGluIHRoZSBmdW5jdGlvbiBmcm9tIGFub3RoZXIgY291bGQgcHJvZHVjZSBjb25mdXNpbmcgYW5kXG5zcHVyaW91cyByZXN1bHRzLmApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH07XG4iXSwibmFtZXMiOlsiaW5zcGVjdCIsImluc3RhbmNlT2YiLCJnbG9iYWxUaGlzIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwidmFsdWUiLCJjb25zdHJ1Y3RvciIsIl92YWx1ZSRjb25zdHJ1Y3RvciIsImNsYXNzTmFtZSIsInByb3RvdHlwZSIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWVDbGFzc05hbWUiLCJuYW1lIiwic3RyaW5naWZpZWRWYWx1ZSIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/instanceOf.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/invariant.mjs":
/*!****************************************************!*\
  !*** ./node_modules/graphql/jsutils/invariant.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   invariant: () => (/* binding */ invariant)\n/* harmony export */ });\nfunction invariant(condition, message) {\n    const booleanCondition = Boolean(condition);\n    if (!booleanCondition) {\n        throw new Error(message != null ? message : \"Unexpected invariant triggered.\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2ludmFyaWFudC5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFPLFNBQVNBLFVBQVVDLFNBQVMsRUFBRUMsT0FBTztJQUMxQyxNQUFNQyxtQkFBbUJDLFFBQVFIO0lBRWpDLElBQUksQ0FBQ0Usa0JBQWtCO1FBQ3JCLE1BQU0sSUFBSUUsTUFDUkgsV0FBVyxPQUFPQSxVQUFVO0lBRWhDO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Aa2V5c3RhdGljL3RlbXBsYXRlcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2ludmFyaWFudC5tanM/ZTA2MiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgZnVuY3Rpb24gaW52YXJpYW50KGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBjb25zdCBib29sZWFuQ29uZGl0aW9uID0gQm9vbGVhbihjb25kaXRpb24pO1xuXG4gIGlmICghYm9vbGVhbkNvbmRpdGlvbikge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIG1lc3NhZ2UgIT0gbnVsbCA/IG1lc3NhZ2UgOiAnVW5leHBlY3RlZCBpbnZhcmlhbnQgdHJpZ2dlcmVkLicsXG4gICAgKTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImludmFyaWFudCIsImNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJib29sZWFuQ29uZGl0aW9uIiwiQm9vbGVhbiIsIkVycm9yIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/invariant.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/jsutils/isObjectLike.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/graphql/jsutils/isObjectLike.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObjectLike: () => (/* binding */ isObjectLike)\n/* harmony export */ });\n/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */ function isObjectLike(value) {\n    return typeof value == \"object\" && value !== null;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOzs7Q0FHQyxHQUNNLFNBQVNBLGFBQWFDLEtBQUs7SUFDaEMsT0FBTyxPQUFPQSxTQUFTLFlBQVlBLFVBQVU7QUFDL0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Aa2V5c3RhdGljL3RlbXBsYXRlcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9qc3V0aWxzL2lzT2JqZWN0TGlrZS5tanM/OWQ4YSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFJldHVybiB0cnVlIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3RcbiAqIGBudWxsYCBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0JyAmJiB2YWx1ZSAhPT0gbnVsbDtcbn1cbiJdLCJuYW1lcyI6WyJpc09iamVjdExpa2UiLCJ2YWx1ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/jsutils/isObjectLike.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/ast.mjs":
/*!***********************************************!*\
  !*** ./node_modules/graphql/language/ast.mjs ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Location: () => (/* binding */ Location),\n/* harmony export */   OperationTypeNode: () => (/* binding */ OperationTypeNode),\n/* harmony export */   QueryDocumentKeys: () => (/* binding */ QueryDocumentKeys),\n/* harmony export */   Token: () => (/* binding */ Token),\n/* harmony export */   isNode: () => (/* binding */ isNode)\n/* harmony export */ });\n/**\n * Contains a range of UTF-8 character offsets and token references that\n * identify the region of the source from which the AST derived.\n */ class Location {\n    /**\n   * The character offset at which this Node begins.\n   */ /**\n   * The character offset at which this Node ends.\n   */ /**\n   * The Token at which this Node begins.\n   */ /**\n   * The Token at which this Node ends.\n   */ /**\n   * The Source document the AST represents.\n   */ constructor(startToken, endToken, source){\n        this.start = startToken.start;\n        this.end = endToken.end;\n        this.startToken = startToken;\n        this.endToken = endToken;\n        this.source = source;\n    }\n    get [Symbol.toStringTag]() {\n        return \"Location\";\n    }\n    toJSON() {\n        return {\n            start: this.start,\n            end: this.end\n        };\n    }\n}\n/**\n * Represents a range of characters represented by a lexical token\n * within a Source.\n */ class Token {\n    /**\n   * The kind of Token.\n   */ /**\n   * The character offset at which this Node begins.\n   */ /**\n   * The character offset at which this Node ends.\n   */ /**\n   * The 1-indexed line number on which this Token appears.\n   */ /**\n   * The 1-indexed column number at which this Token begins.\n   */ /**\n   * For non-punctuation tokens, represents the interpreted value of the token.\n   *\n   * Note: is undefined for punctuation tokens, but typed as string for\n   * convenience in the parser.\n   */ /**\n   * Tokens exist as nodes in a double-linked-list amongst all tokens\n   * including ignored tokens. <SOF> is always the first node and <EOF>\n   * the last.\n   */ constructor(kind, start, end, line, column, value){\n        this.kind = kind;\n        this.start = start;\n        this.end = end;\n        this.line = line;\n        this.column = column; // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        this.value = value;\n        this.prev = null;\n        this.next = null;\n    }\n    get [Symbol.toStringTag]() {\n        return \"Token\";\n    }\n    toJSON() {\n        return {\n            kind: this.kind,\n            value: this.value,\n            line: this.line,\n            column: this.column\n        };\n    }\n}\n/**\n * The list of all possible AST node types.\n */ /**\n * @internal\n */ const QueryDocumentKeys = {\n    Name: [],\n    Document: [\n        \"definitions\"\n    ],\n    OperationDefinition: [\n        \"name\",\n        \"variableDefinitions\",\n        \"directives\",\n        \"selectionSet\"\n    ],\n    VariableDefinition: [\n        \"variable\",\n        \"type\",\n        \"defaultValue\",\n        \"directives\"\n    ],\n    Variable: [\n        \"name\"\n    ],\n    SelectionSet: [\n        \"selections\"\n    ],\n    Field: [\n        \"alias\",\n        \"name\",\n        \"arguments\",\n        \"directives\",\n        \"selectionSet\"\n    ],\n    Argument: [\n        \"name\",\n        \"value\"\n    ],\n    FragmentSpread: [\n        \"name\",\n        \"directives\"\n    ],\n    InlineFragment: [\n        \"typeCondition\",\n        \"directives\",\n        \"selectionSet\"\n    ],\n    FragmentDefinition: [\n        \"name\",\n        \"variableDefinitions\",\n        \"typeCondition\",\n        \"directives\",\n        \"selectionSet\"\n    ],\n    IntValue: [],\n    FloatValue: [],\n    StringValue: [],\n    BooleanValue: [],\n    NullValue: [],\n    EnumValue: [],\n    ListValue: [\n        \"values\"\n    ],\n    ObjectValue: [\n        \"fields\"\n    ],\n    ObjectField: [\n        \"name\",\n        \"value\"\n    ],\n    Directive: [\n        \"name\",\n        \"arguments\"\n    ],\n    NamedType: [\n        \"name\"\n    ],\n    ListType: [\n        \"type\"\n    ],\n    NonNullType: [\n        \"type\"\n    ],\n    SchemaDefinition: [\n        \"description\",\n        \"directives\",\n        \"operationTypes\"\n    ],\n    OperationTypeDefinition: [\n        \"type\"\n    ],\n    ScalarTypeDefinition: [\n        \"description\",\n        \"name\",\n        \"directives\"\n    ],\n    ObjectTypeDefinition: [\n        \"description\",\n        \"name\",\n        \"interfaces\",\n        \"directives\",\n        \"fields\"\n    ],\n    FieldDefinition: [\n        \"description\",\n        \"name\",\n        \"arguments\",\n        \"type\",\n        \"directives\"\n    ],\n    InputValueDefinition: [\n        \"description\",\n        \"name\",\n        \"type\",\n        \"defaultValue\",\n        \"directives\"\n    ],\n    InterfaceTypeDefinition: [\n        \"description\",\n        \"name\",\n        \"interfaces\",\n        \"directives\",\n        \"fields\"\n    ],\n    UnionTypeDefinition: [\n        \"description\",\n        \"name\",\n        \"directives\",\n        \"types\"\n    ],\n    EnumTypeDefinition: [\n        \"description\",\n        \"name\",\n        \"directives\",\n        \"values\"\n    ],\n    EnumValueDefinition: [\n        \"description\",\n        \"name\",\n        \"directives\"\n    ],\n    InputObjectTypeDefinition: [\n        \"description\",\n        \"name\",\n        \"directives\",\n        \"fields\"\n    ],\n    DirectiveDefinition: [\n        \"description\",\n        \"name\",\n        \"arguments\",\n        \"locations\"\n    ],\n    SchemaExtension: [\n        \"directives\",\n        \"operationTypes\"\n    ],\n    ScalarTypeExtension: [\n        \"name\",\n        \"directives\"\n    ],\n    ObjectTypeExtension: [\n        \"name\",\n        \"interfaces\",\n        \"directives\",\n        \"fields\"\n    ],\n    InterfaceTypeExtension: [\n        \"name\",\n        \"interfaces\",\n        \"directives\",\n        \"fields\"\n    ],\n    UnionTypeExtension: [\n        \"name\",\n        \"directives\",\n        \"types\"\n    ],\n    EnumTypeExtension: [\n        \"name\",\n        \"directives\",\n        \"values\"\n    ],\n    InputObjectTypeExtension: [\n        \"name\",\n        \"directives\",\n        \"fields\"\n    ]\n};\nconst kindValues = new Set(Object.keys(QueryDocumentKeys));\n/**\n * @internal\n */ function isNode(maybeNode) {\n    const maybeKind = maybeNode === null || maybeNode === void 0 ? void 0 : maybeNode.kind;\n    return typeof maybeKind === \"string\" && kindValues.has(maybeKind);\n}\n/** Name */ var OperationTypeNode;\n(function(OperationTypeNode) {\n    OperationTypeNode[\"QUERY\"] = \"query\";\n    OperationTypeNode[\"MUTATION\"] = \"mutation\";\n    OperationTypeNode[\"SUBSCRIPTION\"] = \"subscription\";\n})(OperationTypeNode || (OperationTypeNode = {}));\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/ast.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/blockString.mjs":
/*!*******************************************************!*\
  !*** ./node_modules/graphql/language/blockString.mjs ***!
  \*******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   dedentBlockStringLines: () => (/* binding */ dedentBlockStringLines),\n/* harmony export */   isPrintableAsBlockString: () => (/* binding */ isPrintableAsBlockString),\n/* harmony export */   printBlockString: () => (/* binding */ printBlockString)\n/* harmony export */ });\n/* harmony import */ var _characterClasses_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./characterClasses.mjs */ \"(ssr)/./node_modules/graphql/language/characterClasses.mjs\");\n\n/**\n * Produces the value of a block string from its parsed raw value, similar to\n * CoffeeScript's block string, Python's docstring trim or Ruby's strip_heredoc.\n *\n * This implements the GraphQL spec's BlockStringValue() static algorithm.\n *\n * @internal\n */ function dedentBlockStringLines(lines) {\n    var _firstNonEmptyLine2;\n    let commonIndent = Number.MAX_SAFE_INTEGER;\n    let firstNonEmptyLine = null;\n    let lastNonEmptyLine = -1;\n    for(let i = 0; i < lines.length; ++i){\n        var _firstNonEmptyLine;\n        const line = lines[i];\n        const indent = leadingWhitespace(line);\n        if (indent === line.length) {\n            continue; // skip empty lines\n        }\n        firstNonEmptyLine = (_firstNonEmptyLine = firstNonEmptyLine) !== null && _firstNonEmptyLine !== void 0 ? _firstNonEmptyLine : i;\n        lastNonEmptyLine = i;\n        if (i !== 0 && indent < commonIndent) {\n            commonIndent = indent;\n        }\n    }\n    return lines // Remove common indentation from all lines but first.\n    .map((line, i)=>i === 0 ? line : line.slice(commonIndent)) // Remove leading and trailing blank lines.\n    .slice((_firstNonEmptyLine2 = firstNonEmptyLine) !== null && _firstNonEmptyLine2 !== void 0 ? _firstNonEmptyLine2 : 0, lastNonEmptyLine + 1);\n}\nfunction leadingWhitespace(str) {\n    let i = 0;\n    while(i < str.length && (0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_0__.isWhiteSpace)(str.charCodeAt(i))){\n        ++i;\n    }\n    return i;\n}\n/**\n * @internal\n */ function isPrintableAsBlockString(value) {\n    if (value === \"\") {\n        return true; // empty string is printable\n    }\n    let isEmptyLine = true;\n    let hasIndent = false;\n    let hasCommonIndent = true;\n    let seenNonEmptyLine = false;\n    for(let i = 0; i < value.length; ++i){\n        switch(value.codePointAt(i)){\n            case 0x0000:\n            case 0x0001:\n            case 0x0002:\n            case 0x0003:\n            case 0x0004:\n            case 0x0005:\n            case 0x0006:\n            case 0x0007:\n            case 0x0008:\n            case 0x000b:\n            case 0x000c:\n            case 0x000e:\n            case 0x000f:\n                return false;\n            // Has non-printable characters\n            case 0x000d:\n                //  \\r\n                return false;\n            // Has \\r or \\r\\n which will be replaced as \\n\n            case 10:\n                //  \\n\n                if (isEmptyLine && !seenNonEmptyLine) {\n                    return false; // Has leading new line\n                }\n                seenNonEmptyLine = true;\n                isEmptyLine = true;\n                hasIndent = false;\n                break;\n            case 9:\n            case 32:\n                //  <space>\n                hasIndent || (hasIndent = isEmptyLine);\n                break;\n            default:\n                hasCommonIndent && (hasCommonIndent = hasIndent);\n                isEmptyLine = false;\n        }\n    }\n    if (isEmptyLine) {\n        return false; // Has trailing empty lines\n    }\n    if (hasCommonIndent && seenNonEmptyLine) {\n        return false; // Has internal indent\n    }\n    return true;\n}\n/**\n * Print a block string in the indented block form by adding a leading and\n * trailing blank line. However, if a block string starts with whitespace and is\n * a single-line, adding a leading blank line would strip that whitespace.\n *\n * @internal\n */ function printBlockString(value, options) {\n    const escapedValue = value.replace(/\"\"\"/g, '\\\\\"\"\"'); // Expand a block string's raw value into independent lines.\n    const lines = escapedValue.split(/\\r\\n|[\\n\\r]/g);\n    const isSingleLine = lines.length === 1; // If common indentation is found we can fix some of those cases by adding leading new line\n    const forceLeadingNewLine = lines.length > 1 && lines.slice(1).every((line)=>line.length === 0 || (0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_0__.isWhiteSpace)(line.charCodeAt(0))); // Trailing triple quotes just looks confusing but doesn't force trailing new line\n    const hasTrailingTripleQuotes = escapedValue.endsWith('\\\\\"\"\"'); // Trailing quote (single or double) or slash forces trailing new line\n    const hasTrailingQuote = value.endsWith('\"') && !hasTrailingTripleQuotes;\n    const hasTrailingSlash = value.endsWith(\"\\\\\");\n    const forceTrailingNewline = hasTrailingQuote || hasTrailingSlash;\n    const printAsMultipleLines = !(options !== null && options !== void 0 && options.minimize) && // add leading and trailing new lines only if it improves readability\n    (!isSingleLine || value.length > 70 || forceTrailingNewline || forceLeadingNewLine || hasTrailingTripleQuotes);\n    let result = \"\"; // Format a multi-line block quote to account for leading space.\n    const skipLeadingNewLine = isSingleLine && (0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_0__.isWhiteSpace)(value.charCodeAt(0));\n    if (printAsMultipleLines && !skipLeadingNewLine || forceLeadingNewLine) {\n        result += \"\\n\";\n    }\n    result += escapedValue;\n    if (printAsMultipleLines || forceTrailingNewline) {\n        result += \"\\n\";\n    }\n    return '\"\"\"' + result + '\"\"\"';\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/blockString.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/characterClasses.mjs":
/*!************************************************************!*\
  !*** ./node_modules/graphql/language/characterClasses.mjs ***!
  \************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isDigit: () => (/* binding */ isDigit),\n/* harmony export */   isLetter: () => (/* binding */ isLetter),\n/* harmony export */   isNameContinue: () => (/* binding */ isNameContinue),\n/* harmony export */   isNameStart: () => (/* binding */ isNameStart),\n/* harmony export */   isWhiteSpace: () => (/* binding */ isWhiteSpace)\n/* harmony export */ });\n/**\n * ```\n * WhiteSpace ::\n *   - \"Horizontal Tab (U+0009)\"\n *   - \"Space (U+0020)\"\n * ```\n * @internal\n */ function isWhiteSpace(code) {\n    return code === 0x0009 || code === 0x0020;\n}\n/**\n * ```\n * Digit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n * ```\n * @internal\n */ function isDigit(code) {\n    return code >= 0x0030 && code <= 0x0039;\n}\n/**\n * ```\n * Letter :: one of\n *   - `A` `B` `C` `D` `E` `F` `G` `H` `I` `J` `K` `L` `M`\n *   - `N` `O` `P` `Q` `R` `S` `T` `U` `V` `W` `X` `Y` `Z`\n *   - `a` `b` `c` `d` `e` `f` `g` `h` `i` `j` `k` `l` `m`\n *   - `n` `o` `p` `q` `r` `s` `t` `u` `v` `w` `x` `y` `z`\n * ```\n * @internal\n */ function isLetter(code) {\n    return code >= 0x0061 && code <= 0x007a || // A-Z\n    code >= 0x0041 && code <= 0x005a // a-z\n    ;\n}\n/**\n * ```\n * NameStart ::\n *   - Letter\n *   - `_`\n * ```\n * @internal\n */ function isNameStart(code) {\n    return isLetter(code) || code === 0x005f;\n}\n/**\n * ```\n * NameContinue ::\n *   - Letter\n *   - Digit\n *   - `_`\n * ```\n * @internal\n */ function isNameContinue(code) {\n    return isLetter(code) || isDigit(code) || code === 0x005f;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9jaGFyYWN0ZXJDbGFzc2VzLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7OztBQUFBOzs7Ozs7O0NBT0MsR0FDTSxTQUFTQSxhQUFhQyxJQUFJO0lBQy9CLE9BQU9BLFNBQVMsVUFBVUEsU0FBUztBQUNyQztBQUNBOzs7Ozs7Q0FNQyxHQUVNLFNBQVNDLFFBQVFELElBQUk7SUFDMUIsT0FBT0EsUUFBUSxVQUFVQSxRQUFRO0FBQ25DO0FBQ0E7Ozs7Ozs7OztDQVNDLEdBRU0sU0FBU0UsU0FBU0YsSUFBSTtJQUMzQixPQUNFLFFBQVMsVUFBVUEsUUFBUSxVQUFXLE1BQU07SUFDM0NBLFFBQVEsVUFBVUEsUUFBUSxPQUFRLE1BQU07O0FBRTdDO0FBQ0E7Ozs7Ozs7Q0FPQyxHQUVNLFNBQVNHLFlBQVlILElBQUk7SUFDOUIsT0FBT0UsU0FBU0YsU0FBU0EsU0FBUztBQUNwQztBQUNBOzs7Ozs7OztDQVFDLEdBRU0sU0FBU0ksZUFBZUosSUFBSTtJQUNqQyxPQUFPRSxTQUFTRixTQUFTQyxRQUFRRCxTQUFTQSxTQUFTO0FBQ3JEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGtleXN0YXRpYy90ZW1wbGF0ZXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2UvY2hhcmFjdGVyQ2xhc3Nlcy5tanM/YTUzMSJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIGBgYFxuICogV2hpdGVTcGFjZSA6OlxuICogICAtIFwiSG9yaXpvbnRhbCBUYWIgKFUrMDAwOSlcIlxuICogICAtIFwiU3BhY2UgKFUrMDAyMClcIlxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzV2hpdGVTcGFjZShjb2RlKSB7XG4gIHJldHVybiBjb2RlID09PSAweDAwMDkgfHwgY29kZSA9PT0gMHgwMDIwO1xufVxuLyoqXG4gKiBgYGBcbiAqIERpZ2l0IDo6IG9uZSBvZlxuICogICAtIGAwYCBgMWAgYDJgIGAzYCBgNGAgYDVgIGA2YCBgN2AgYDhgIGA5YFxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNEaWdpdChjb2RlKSB7XG4gIHJldHVybiBjb2RlID49IDB4MDAzMCAmJiBjb2RlIDw9IDB4MDAzOTtcbn1cbi8qKlxuICogYGBgXG4gKiBMZXR0ZXIgOjogb25lIG9mXG4gKiAgIC0gYEFgIGBCYCBgQ2AgYERgIGBFYCBgRmAgYEdgIGBIYCBgSWAgYEpgIGBLYCBgTGAgYE1gXG4gKiAgIC0gYE5gIGBPYCBgUGAgYFFgIGBSYCBgU2AgYFRgIGBVYCBgVmAgYFdgIGBYYCBgWWAgYFpgXG4gKiAgIC0gYGFgIGBiYCBgY2AgYGRgIGBlYCBgZmAgYGdgIGBoYCBgaWAgYGpgIGBrYCBgbGAgYG1gXG4gKiAgIC0gYG5gIGBvYCBgcGAgYHFgIGByYCBgc2AgYHRgIGB1YCBgdmAgYHdgIGB4YCBgeWAgYHpgXG4gKiBgYGBcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc0xldHRlcihjb2RlKSB7XG4gIHJldHVybiAoXG4gICAgKGNvZGUgPj0gMHgwMDYxICYmIGNvZGUgPD0gMHgwMDdhKSB8fCAvLyBBLVpcbiAgICAoY29kZSA+PSAweDAwNDEgJiYgY29kZSA8PSAweDAwNWEpIC8vIGEtelxuICApO1xufVxuLyoqXG4gKiBgYGBcbiAqIE5hbWVTdGFydCA6OlxuICogICAtIExldHRlclxuICogICAtIGBfYFxuICogYGBgXG4gKiBAaW50ZXJuYWxcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gaXNOYW1lU3RhcnQoY29kZSkge1xuICByZXR1cm4gaXNMZXR0ZXIoY29kZSkgfHwgY29kZSA9PT0gMHgwMDVmO1xufVxuLyoqXG4gKiBgYGBcbiAqIE5hbWVDb250aW51ZSA6OlxuICogICAtIExldHRlclxuICogICAtIERpZ2l0XG4gKiAgIC0gYF9gXG4gKiBgYGBcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc05hbWVDb250aW51ZShjb2RlKSB7XG4gIHJldHVybiBpc0xldHRlcihjb2RlKSB8fCBpc0RpZ2l0KGNvZGUpIHx8IGNvZGUgPT09IDB4MDA1Zjtcbn1cbiJdLCJuYW1lcyI6WyJpc1doaXRlU3BhY2UiLCJjb2RlIiwiaXNEaWdpdCIsImlzTGV0dGVyIiwiaXNOYW1lU3RhcnQiLCJpc05hbWVDb250aW51ZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/characterClasses.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/directiveLocation.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/graphql/language/directiveLocation.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DirectiveLocation: () => (/* binding */ DirectiveLocation)\n/* harmony export */ });\n/**\n * The set of allowed directive location values.\n */ var DirectiveLocation;\n(function(DirectiveLocation) {\n    DirectiveLocation[\"QUERY\"] = \"QUERY\";\n    DirectiveLocation[\"MUTATION\"] = \"MUTATION\";\n    DirectiveLocation[\"SUBSCRIPTION\"] = \"SUBSCRIPTION\";\n    DirectiveLocation[\"FIELD\"] = \"FIELD\";\n    DirectiveLocation[\"FRAGMENT_DEFINITION\"] = \"FRAGMENT_DEFINITION\";\n    DirectiveLocation[\"FRAGMENT_SPREAD\"] = \"FRAGMENT_SPREAD\";\n    DirectiveLocation[\"INLINE_FRAGMENT\"] = \"INLINE_FRAGMENT\";\n    DirectiveLocation[\"VARIABLE_DEFINITION\"] = \"VARIABLE_DEFINITION\";\n    DirectiveLocation[\"SCHEMA\"] = \"SCHEMA\";\n    DirectiveLocation[\"SCALAR\"] = \"SCALAR\";\n    DirectiveLocation[\"OBJECT\"] = \"OBJECT\";\n    DirectiveLocation[\"FIELD_DEFINITION\"] = \"FIELD_DEFINITION\";\n    DirectiveLocation[\"ARGUMENT_DEFINITION\"] = \"ARGUMENT_DEFINITION\";\n    DirectiveLocation[\"INTERFACE\"] = \"INTERFACE\";\n    DirectiveLocation[\"UNION\"] = \"UNION\";\n    DirectiveLocation[\"ENUM\"] = \"ENUM\";\n    DirectiveLocation[\"ENUM_VALUE\"] = \"ENUM_VALUE\";\n    DirectiveLocation[\"INPUT_OBJECT\"] = \"INPUT_OBJECT\";\n    DirectiveLocation[\"INPUT_FIELD_DEFINITION\"] = \"INPUT_FIELD_DEFINITION\";\n})(DirectiveLocation || (DirectiveLocation = {}));\n /**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9kaXJlY3RpdmVMb2NhdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ0QsSUFBSUE7QUFFSCxVQUFVQSxpQkFBaUI7SUFDMUJBLGlCQUFpQixDQUFDLFFBQVEsR0FBRztJQUM3QkEsaUJBQWlCLENBQUMsV0FBVyxHQUFHO0lBQ2hDQSxpQkFBaUIsQ0FBQyxlQUFlLEdBQUc7SUFDcENBLGlCQUFpQixDQUFDLFFBQVEsR0FBRztJQUM3QkEsaUJBQWlCLENBQUMsc0JBQXNCLEdBQUc7SUFDM0NBLGlCQUFpQixDQUFDLGtCQUFrQixHQUFHO0lBQ3ZDQSxpQkFBaUIsQ0FBQyxrQkFBa0IsR0FBRztJQUN2Q0EsaUJBQWlCLENBQUMsc0JBQXNCLEdBQUc7SUFDM0NBLGlCQUFpQixDQUFDLFNBQVMsR0FBRztJQUM5QkEsaUJBQWlCLENBQUMsU0FBUyxHQUFHO0lBQzlCQSxpQkFBaUIsQ0FBQyxTQUFTLEdBQUc7SUFDOUJBLGlCQUFpQixDQUFDLG1CQUFtQixHQUFHO0lBQ3hDQSxpQkFBaUIsQ0FBQyxzQkFBc0IsR0FBRztJQUMzQ0EsaUJBQWlCLENBQUMsWUFBWSxHQUFHO0lBQ2pDQSxpQkFBaUIsQ0FBQyxRQUFRLEdBQUc7SUFDN0JBLGlCQUFpQixDQUFDLE9BQU8sR0FBRztJQUM1QkEsaUJBQWlCLENBQUMsYUFBYSxHQUFHO0lBQ2xDQSxpQkFBaUIsQ0FBQyxlQUFlLEdBQUc7SUFDcENBLGlCQUFpQixDQUFDLHlCQUF5QixHQUFHO0FBQ2hELEdBQUdBLHFCQUFzQkEsQ0FBQUEsb0JBQW9CLENBQUM7QUFFakIsQ0FDN0I7Ozs7Q0FJQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BrZXlzdGF0aWMvdGVtcGxhdGVzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2RpcmVjdGl2ZUxvY2F0aW9uLm1qcz84MjNiIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogVGhlIHNldCBvZiBhbGxvd2VkIGRpcmVjdGl2ZSBsb2NhdGlvbiB2YWx1ZXMuXG4gKi9cbnZhciBEaXJlY3RpdmVMb2NhdGlvbjtcblxuKGZ1bmN0aW9uIChEaXJlY3RpdmVMb2NhdGlvbikge1xuICBEaXJlY3RpdmVMb2NhdGlvblsnUVVFUlknXSA9ICdRVUVSWSc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydNVVRBVElPTiddID0gJ01VVEFUSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ1NVQlNDUklQVElPTiddID0gJ1NVQlNDUklQVElPTic7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydGSUVMRCddID0gJ0ZJRUxEJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0ZSQUdNRU5UX0RFRklOSVRJT04nXSA9ICdGUkFHTUVOVF9ERUZJTklUSU9OJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0ZSQUdNRU5UX1NQUkVBRCddID0gJ0ZSQUdNRU5UX1NQUkVBRCc7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydJTkxJTkVfRlJBR01FTlQnXSA9ICdJTkxJTkVfRlJBR01FTlQnO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnVkFSSUFCTEVfREVGSU5JVElPTiddID0gJ1ZBUklBQkxFX0RFRklOSVRJT04nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnU0NIRU1BJ10gPSAnU0NIRU1BJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ1NDQUxBUiddID0gJ1NDQUxBUic7XG4gIERpcmVjdGl2ZUxvY2F0aW9uWydPQkpFQ1QnXSA9ICdPQkpFQ1QnO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnRklFTERfREVGSU5JVElPTiddID0gJ0ZJRUxEX0RFRklOSVRJT04nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnQVJHVU1FTlRfREVGSU5JVElPTiddID0gJ0FSR1VNRU5UX0RFRklOSVRJT04nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnSU5URVJGQUNFJ10gPSAnSU5URVJGQUNFJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ1VOSU9OJ10gPSAnVU5JT04nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnRU5VTSddID0gJ0VOVU0nO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnRU5VTV9WQUxVRSddID0gJ0VOVU1fVkFMVUUnO1xuICBEaXJlY3RpdmVMb2NhdGlvblsnSU5QVVRfT0JKRUNUJ10gPSAnSU5QVVRfT0JKRUNUJztcbiAgRGlyZWN0aXZlTG9jYXRpb25bJ0lOUFVUX0ZJRUxEX0RFRklOSVRJT04nXSA9ICdJTlBVVF9GSUVMRF9ERUZJTklUSU9OJztcbn0pKERpcmVjdGl2ZUxvY2F0aW9uIHx8IChEaXJlY3RpdmVMb2NhdGlvbiA9IHt9KSk7XG5cbmV4cG9ydCB7IERpcmVjdGl2ZUxvY2F0aW9uIH07XG4vKipcbiAqIFRoZSBlbnVtIHR5cGUgcmVwcmVzZW50aW5nIHRoZSBkaXJlY3RpdmUgbG9jYXRpb24gdmFsdWVzLlxuICpcbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYERpcmVjdGl2ZUxvY2F0aW9uYC4gV2lsbCBiZSByZW1vdmUgaW4gdjE3LlxuICovXG4iXSwibmFtZXMiOlsiRGlyZWN0aXZlTG9jYXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/directiveLocation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/kinds.mjs":
/*!*************************************************!*\
  !*** ./node_modules/graphql/language/kinds.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Kind: () => (/* binding */ Kind)\n/* harmony export */ });\n/**\n * The set of allowed kind values for AST nodes.\n */ var Kind;\n(function(Kind) {\n    Kind[\"NAME\"] = \"Name\";\n    Kind[\"DOCUMENT\"] = \"Document\";\n    Kind[\"OPERATION_DEFINITION\"] = \"OperationDefinition\";\n    Kind[\"VARIABLE_DEFINITION\"] = \"VariableDefinition\";\n    Kind[\"SELECTION_SET\"] = \"SelectionSet\";\n    Kind[\"FIELD\"] = \"Field\";\n    Kind[\"ARGUMENT\"] = \"Argument\";\n    Kind[\"FRAGMENT_SPREAD\"] = \"FragmentSpread\";\n    Kind[\"INLINE_FRAGMENT\"] = \"InlineFragment\";\n    Kind[\"FRAGMENT_DEFINITION\"] = \"FragmentDefinition\";\n    Kind[\"VARIABLE\"] = \"Variable\";\n    Kind[\"INT\"] = \"IntValue\";\n    Kind[\"FLOAT\"] = \"FloatValue\";\n    Kind[\"STRING\"] = \"StringValue\";\n    Kind[\"BOOLEAN\"] = \"BooleanValue\";\n    Kind[\"NULL\"] = \"NullValue\";\n    Kind[\"ENUM\"] = \"EnumValue\";\n    Kind[\"LIST\"] = \"ListValue\";\n    Kind[\"OBJECT\"] = \"ObjectValue\";\n    Kind[\"OBJECT_FIELD\"] = \"ObjectField\";\n    Kind[\"DIRECTIVE\"] = \"Directive\";\n    Kind[\"NAMED_TYPE\"] = \"NamedType\";\n    Kind[\"LIST_TYPE\"] = \"ListType\";\n    Kind[\"NON_NULL_TYPE\"] = \"NonNullType\";\n    Kind[\"SCHEMA_DEFINITION\"] = \"SchemaDefinition\";\n    Kind[\"OPERATION_TYPE_DEFINITION\"] = \"OperationTypeDefinition\";\n    Kind[\"SCALAR_TYPE_DEFINITION\"] = \"ScalarTypeDefinition\";\n    Kind[\"OBJECT_TYPE_DEFINITION\"] = \"ObjectTypeDefinition\";\n    Kind[\"FIELD_DEFINITION\"] = \"FieldDefinition\";\n    Kind[\"INPUT_VALUE_DEFINITION\"] = \"InputValueDefinition\";\n    Kind[\"INTERFACE_TYPE_DEFINITION\"] = \"InterfaceTypeDefinition\";\n    Kind[\"UNION_TYPE_DEFINITION\"] = \"UnionTypeDefinition\";\n    Kind[\"ENUM_TYPE_DEFINITION\"] = \"EnumTypeDefinition\";\n    Kind[\"ENUM_VALUE_DEFINITION\"] = \"EnumValueDefinition\";\n    Kind[\"INPUT_OBJECT_TYPE_DEFINITION\"] = \"InputObjectTypeDefinition\";\n    Kind[\"DIRECTIVE_DEFINITION\"] = \"DirectiveDefinition\";\n    Kind[\"SCHEMA_EXTENSION\"] = \"SchemaExtension\";\n    Kind[\"SCALAR_TYPE_EXTENSION\"] = \"ScalarTypeExtension\";\n    Kind[\"OBJECT_TYPE_EXTENSION\"] = \"ObjectTypeExtension\";\n    Kind[\"INTERFACE_TYPE_EXTENSION\"] = \"InterfaceTypeExtension\";\n    Kind[\"UNION_TYPE_EXTENSION\"] = \"UnionTypeExtension\";\n    Kind[\"ENUM_TYPE_EXTENSION\"] = \"EnumTypeExtension\";\n    Kind[\"INPUT_OBJECT_TYPE_EXTENSION\"] = \"InputObjectTypeExtension\";\n})(Kind || (Kind = {}));\n /**\n * The enum type representing the possible kind values of AST nodes.\n *\n * @deprecated Please use `Kind`. Will be remove in v17.\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9raW5kcy5tanMiLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztDQUVDLEdBQ0QsSUFBSUE7QUFFSCxVQUFVQSxJQUFJO0lBQ2JBLElBQUksQ0FBQyxPQUFPLEdBQUc7SUFDZkEsSUFBSSxDQUFDLFdBQVcsR0FBRztJQUNuQkEsSUFBSSxDQUFDLHVCQUF1QixHQUFHO0lBQy9CQSxJQUFJLENBQUMsc0JBQXNCLEdBQUc7SUFDOUJBLElBQUksQ0FBQyxnQkFBZ0IsR0FBRztJQUN4QkEsSUFBSSxDQUFDLFFBQVEsR0FBRztJQUNoQkEsSUFBSSxDQUFDLFdBQVcsR0FBRztJQUNuQkEsSUFBSSxDQUFDLGtCQUFrQixHQUFHO0lBQzFCQSxJQUFJLENBQUMsa0JBQWtCLEdBQUc7SUFDMUJBLElBQUksQ0FBQyxzQkFBc0IsR0FBRztJQUM5QkEsSUFBSSxDQUFDLFdBQVcsR0FBRztJQUNuQkEsSUFBSSxDQUFDLE1BQU0sR0FBRztJQUNkQSxJQUFJLENBQUMsUUFBUSxHQUFHO0lBQ2hCQSxJQUFJLENBQUMsU0FBUyxHQUFHO0lBQ2pCQSxJQUFJLENBQUMsVUFBVSxHQUFHO0lBQ2xCQSxJQUFJLENBQUMsT0FBTyxHQUFHO0lBQ2ZBLElBQUksQ0FBQyxPQUFPLEdBQUc7SUFDZkEsSUFBSSxDQUFDLE9BQU8sR0FBRztJQUNmQSxJQUFJLENBQUMsU0FBUyxHQUFHO0lBQ2pCQSxJQUFJLENBQUMsZUFBZSxHQUFHO0lBQ3ZCQSxJQUFJLENBQUMsWUFBWSxHQUFHO0lBQ3BCQSxJQUFJLENBQUMsYUFBYSxHQUFHO0lBQ3JCQSxJQUFJLENBQUMsWUFBWSxHQUFHO0lBQ3BCQSxJQUFJLENBQUMsZ0JBQWdCLEdBQUc7SUFDeEJBLElBQUksQ0FBQyxvQkFBb0IsR0FBRztJQUM1QkEsSUFBSSxDQUFDLDRCQUE0QixHQUFHO0lBQ3BDQSxJQUFJLENBQUMseUJBQXlCLEdBQUc7SUFDakNBLElBQUksQ0FBQyx5QkFBeUIsR0FBRztJQUNqQ0EsSUFBSSxDQUFDLG1CQUFtQixHQUFHO0lBQzNCQSxJQUFJLENBQUMseUJBQXlCLEdBQUc7SUFDakNBLElBQUksQ0FBQyw0QkFBNEIsR0FBRztJQUNwQ0EsSUFBSSxDQUFDLHdCQUF3QixHQUFHO0lBQ2hDQSxJQUFJLENBQUMsdUJBQXVCLEdBQUc7SUFDL0JBLElBQUksQ0FBQyx3QkFBd0IsR0FBRztJQUNoQ0EsSUFBSSxDQUFDLCtCQUErQixHQUFHO0lBQ3ZDQSxJQUFJLENBQUMsdUJBQXVCLEdBQUc7SUFDL0JBLElBQUksQ0FBQyxtQkFBbUIsR0FBRztJQUMzQkEsSUFBSSxDQUFDLHdCQUF3QixHQUFHO0lBQ2hDQSxJQUFJLENBQUMsd0JBQXdCLEdBQUc7SUFDaENBLElBQUksQ0FBQywyQkFBMkIsR0FBRztJQUNuQ0EsSUFBSSxDQUFDLHVCQUF1QixHQUFHO0lBQy9CQSxJQUFJLENBQUMsc0JBQXNCLEdBQUc7SUFDOUJBLElBQUksQ0FBQyw4QkFBOEIsR0FBRztBQUN4QyxHQUFHQSxRQUFTQSxDQUFBQSxPQUFPLENBQUM7QUFFSixDQUNoQjs7OztDQUlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vQGtleXN0YXRpYy90ZW1wbGF0ZXMtbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2dyYXBocWwvbGFuZ3VhZ2Uva2luZHMubWpzP2E3YzkiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBUaGUgc2V0IG9mIGFsbG93ZWQga2luZCB2YWx1ZXMgZm9yIEFTVCBub2Rlcy5cbiAqL1xudmFyIEtpbmQ7XG5cbihmdW5jdGlvbiAoS2luZCkge1xuICBLaW5kWydOQU1FJ10gPSAnTmFtZSc7XG4gIEtpbmRbJ0RPQ1VNRU5UJ10gPSAnRG9jdW1lbnQnO1xuICBLaW5kWydPUEVSQVRJT05fREVGSU5JVElPTiddID0gJ09wZXJhdGlvbkRlZmluaXRpb24nO1xuICBLaW5kWydWQVJJQUJMRV9ERUZJTklUSU9OJ10gPSAnVmFyaWFibGVEZWZpbml0aW9uJztcbiAgS2luZFsnU0VMRUNUSU9OX1NFVCddID0gJ1NlbGVjdGlvblNldCc7XG4gIEtpbmRbJ0ZJRUxEJ10gPSAnRmllbGQnO1xuICBLaW5kWydBUkdVTUVOVCddID0gJ0FyZ3VtZW50JztcbiAgS2luZFsnRlJBR01FTlRfU1BSRUFEJ10gPSAnRnJhZ21lbnRTcHJlYWQnO1xuICBLaW5kWydJTkxJTkVfRlJBR01FTlQnXSA9ICdJbmxpbmVGcmFnbWVudCc7XG4gIEtpbmRbJ0ZSQUdNRU5UX0RFRklOSVRJT04nXSA9ICdGcmFnbWVudERlZmluaXRpb24nO1xuICBLaW5kWydWQVJJQUJMRSddID0gJ1ZhcmlhYmxlJztcbiAgS2luZFsnSU5UJ10gPSAnSW50VmFsdWUnO1xuICBLaW5kWydGTE9BVCddID0gJ0Zsb2F0VmFsdWUnO1xuICBLaW5kWydTVFJJTkcnXSA9ICdTdHJpbmdWYWx1ZSc7XG4gIEtpbmRbJ0JPT0xFQU4nXSA9ICdCb29sZWFuVmFsdWUnO1xuICBLaW5kWydOVUxMJ10gPSAnTnVsbFZhbHVlJztcbiAgS2luZFsnRU5VTSddID0gJ0VudW1WYWx1ZSc7XG4gIEtpbmRbJ0xJU1QnXSA9ICdMaXN0VmFsdWUnO1xuICBLaW5kWydPQkpFQ1QnXSA9ICdPYmplY3RWYWx1ZSc7XG4gIEtpbmRbJ09CSkVDVF9GSUVMRCddID0gJ09iamVjdEZpZWxkJztcbiAgS2luZFsnRElSRUNUSVZFJ10gPSAnRGlyZWN0aXZlJztcbiAgS2luZFsnTkFNRURfVFlQRSddID0gJ05hbWVkVHlwZSc7XG4gIEtpbmRbJ0xJU1RfVFlQRSddID0gJ0xpc3RUeXBlJztcbiAgS2luZFsnTk9OX05VTExfVFlQRSddID0gJ05vbk51bGxUeXBlJztcbiAgS2luZFsnU0NIRU1BX0RFRklOSVRJT04nXSA9ICdTY2hlbWFEZWZpbml0aW9uJztcbiAgS2luZFsnT1BFUkFUSU9OX1RZUEVfREVGSU5JVElPTiddID0gJ09wZXJhdGlvblR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnU0NBTEFSX1RZUEVfREVGSU5JVElPTiddID0gJ1NjYWxhclR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnT0JKRUNUX1RZUEVfREVGSU5JVElPTiddID0gJ09iamVjdFR5cGVEZWZpbml0aW9uJztcbiAgS2luZFsnRklFTERfREVGSU5JVElPTiddID0gJ0ZpZWxkRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0lOUFVUX1ZBTFVFX0RFRklOSVRJT04nXSA9ICdJbnB1dFZhbHVlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0lOVEVSRkFDRV9UWVBFX0RFRklOSVRJT04nXSA9ICdJbnRlcmZhY2VUeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ1VOSU9OX1RZUEVfREVGSU5JVElPTiddID0gJ1VuaW9uVHlwZURlZmluaXRpb24nO1xuICBLaW5kWydFTlVNX1RZUEVfREVGSU5JVElPTiddID0gJ0VudW1UeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0VOVU1fVkFMVUVfREVGSU5JVElPTiddID0gJ0VudW1WYWx1ZURlZmluaXRpb24nO1xuICBLaW5kWydJTlBVVF9PQkpFQ1RfVFlQRV9ERUZJTklUSU9OJ10gPSAnSW5wdXRPYmplY3RUeXBlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ0RJUkVDVElWRV9ERUZJTklUSU9OJ10gPSAnRGlyZWN0aXZlRGVmaW5pdGlvbic7XG4gIEtpbmRbJ1NDSEVNQV9FWFRFTlNJT04nXSA9ICdTY2hlbWFFeHRlbnNpb24nO1xuICBLaW5kWydTQ0FMQVJfVFlQRV9FWFRFTlNJT04nXSA9ICdTY2FsYXJUeXBlRXh0ZW5zaW9uJztcbiAgS2luZFsnT0JKRUNUX1RZUEVfRVhURU5TSU9OJ10gPSAnT2JqZWN0VHlwZUV4dGVuc2lvbic7XG4gIEtpbmRbJ0lOVEVSRkFDRV9UWVBFX0VYVEVOU0lPTiddID0gJ0ludGVyZmFjZVR5cGVFeHRlbnNpb24nO1xuICBLaW5kWydVTklPTl9UWVBFX0VYVEVOU0lPTiddID0gJ1VuaW9uVHlwZUV4dGVuc2lvbic7XG4gIEtpbmRbJ0VOVU1fVFlQRV9FWFRFTlNJT04nXSA9ICdFbnVtVHlwZUV4dGVuc2lvbic7XG4gIEtpbmRbJ0lOUFVUX09CSkVDVF9UWVBFX0VYVEVOU0lPTiddID0gJ0lucHV0T2JqZWN0VHlwZUV4dGVuc2lvbic7XG59KShLaW5kIHx8IChLaW5kID0ge30pKTtcblxuZXhwb3J0IHsgS2luZCB9O1xuLyoqXG4gKiBUaGUgZW51bSB0eXBlIHJlcHJlc2VudGluZyB0aGUgcG9zc2libGUga2luZCB2YWx1ZXMgb2YgQVNUIG5vZGVzLlxuICpcbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYEtpbmRgLiBXaWxsIGJlIHJlbW92ZSBpbiB2MTcuXG4gKi9cbiJdLCJuYW1lcyI6WyJLaW5kIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/kinds.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/lexer.mjs":
/*!*************************************************!*\
  !*** ./node_modules/graphql/language/lexer.mjs ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Lexer: () => (/* binding */ Lexer),\n/* harmony export */   isPunctuatorTokenKind: () => (/* binding */ isPunctuatorTokenKind)\n/* harmony export */ });\n/* harmony import */ var _error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../error/syntaxError.mjs */ \"(ssr)/./node_modules/graphql/error/syntaxError.mjs\");\n/* harmony import */ var _ast_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ast.mjs */ \"(ssr)/./node_modules/graphql/language/ast.mjs\");\n/* harmony import */ var _blockString_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./blockString.mjs */ \"(ssr)/./node_modules/graphql/language/blockString.mjs\");\n/* harmony import */ var _characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./characterClasses.mjs */ \"(ssr)/./node_modules/graphql/language/characterClasses.mjs\");\n/* harmony import */ var _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tokenKind.mjs */ \"(ssr)/./node_modules/graphql/language/tokenKind.mjs\");\n\n\n\n\n\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */ class Lexer {\n    /**\n   * The previously focused non-ignored token.\n   */ /**\n   * The currently focused non-ignored token.\n   */ /**\n   * The (1-indexed) line containing the current token.\n   */ /**\n   * The character offset at which the current line begins.\n   */ constructor(source){\n        const startOfFileToken = new _ast_mjs__WEBPACK_IMPORTED_MODULE_0__.Token(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.SOF, 0, 0, 0, 0);\n        this.source = source;\n        this.lastToken = startOfFileToken;\n        this.token = startOfFileToken;\n        this.line = 1;\n        this.lineStart = 0;\n    }\n    get [Symbol.toStringTag]() {\n        return \"Lexer\";\n    }\n    /**\n   * Advances the token stream to the next non-ignored token.\n   */ advance() {\n        this.lastToken = this.token;\n        const token = this.token = this.lookahead();\n        return token;\n    }\n    /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */ lookahead() {\n        let token = this.token;\n        if (token.kind !== _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EOF) {\n            do {\n                if (token.next) {\n                    token = token.next;\n                } else {\n                    // Read the next token and form a link in the token linked-list.\n                    const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n                    token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n                    nextToken.prev = token;\n                    token = nextToken;\n                }\n            }while (token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.COMMENT);\n        }\n        return token;\n    }\n}\n/**\n * @internal\n */ function isPunctuatorTokenKind(kind) {\n    return kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BANG || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.DOLLAR || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.AMP || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PAREN_L || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PAREN_R || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.SPREAD || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.COLON || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EQUALS || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.AT || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACKET_L || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACKET_R || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACE_L || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PIPE || kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACE_R;\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */ function isUnicodeScalarValue(code) {\n    return code >= 0x0000 && code <= 0xd7ff || code >= 0xe000 && code <= 0x10ffff;\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */ function isSupplementaryCodePoint(body, location) {\n    return isLeadingSurrogate(body.charCodeAt(location)) && isTrailingSurrogate(body.charCodeAt(location + 1));\n}\nfunction isLeadingSurrogate(code) {\n    return code >= 0xd800 && code <= 0xdbff;\n}\nfunction isTrailingSurrogate(code) {\n    return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */ function printCodePointAt(lexer, location) {\n    const code = lexer.source.body.codePointAt(location);\n    if (code === undefined) {\n        return _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EOF;\n    } else if (code >= 0x0020 && code <= 0x007e) {\n        // Printable ASCII\n        const char = String.fromCodePoint(code);\n        return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n    } // Unicode code point\n    return \"U+\" + code.toString(16).toUpperCase().padStart(4, \"0\");\n}\n/**\n * Create a token with line and column location information.\n */ function createToken(lexer, kind, start, end, value) {\n    const line = lexer.line;\n    const col = 1 + start - lexer.lineStart;\n    return new _ast_mjs__WEBPACK_IMPORTED_MODULE_0__.Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */ function readNextToken(lexer, start) {\n    const body = lexer.source.body;\n    const bodyLength = body.length;\n    let position = start;\n    while(position < bodyLength){\n        const code = body.charCodeAt(position); // SourceCharacter\n        switch(code){\n            // Ignored ::\n            //   - UnicodeBOM\n            //   - WhiteSpace\n            //   - LineTerminator\n            //   - Comment\n            //   - Comma\n            //\n            // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n            //\n            // WhiteSpace ::\n            //   - \"Horizontal Tab (U+0009)\"\n            //   - \"Space (U+0020)\"\n            //\n            // Comma :: ,\n            case 0xfeff:\n            case 0x0009:\n            case 0x0020:\n            case 0x002c:\n                // ,\n                ++position;\n                continue;\n            // LineTerminator ::\n            //   - \"New Line (U+000A)\"\n            //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n            //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n            case 0x000a:\n                // \\n\n                ++position;\n                ++lexer.line;\n                lexer.lineStart = position;\n                continue;\n            case 0x000d:\n                // \\r\n                if (body.charCodeAt(position + 1) === 0x000a) {\n                    position += 2;\n                } else {\n                    ++position;\n                }\n                ++lexer.line;\n                lexer.lineStart = position;\n                continue;\n            // Comment\n            case 0x0023:\n                // #\n                return readComment(lexer, position);\n            // Token ::\n            //   - Punctuator\n            //   - Name\n            //   - IntValue\n            //   - FloatValue\n            //   - StringValue\n            //\n            // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n            case 0x0021:\n                // !\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BANG, position, position + 1);\n            case 0x0024:\n                // $\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.DOLLAR, position, position + 1);\n            case 0x0026:\n                // &\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.AMP, position, position + 1);\n            case 0x0028:\n                // (\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PAREN_L, position, position + 1);\n            case 0x0029:\n                // )\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PAREN_R, position, position + 1);\n            case 0x002e:\n                // .\n                if (body.charCodeAt(position + 1) === 0x002e && body.charCodeAt(position + 2) === 0x002e) {\n                    return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.SPREAD, position, position + 3);\n                }\n                break;\n            case 0x003a:\n                // :\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.COLON, position, position + 1);\n            case 0x003d:\n                // =\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EQUALS, position, position + 1);\n            case 0x0040:\n                // @\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.AT, position, position + 1);\n            case 0x005b:\n                // [\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACKET_L, position, position + 1);\n            case 0x005d:\n                // ]\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACKET_R, position, position + 1);\n            case 0x007b:\n                // {\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACE_L, position, position + 1);\n            case 0x007c:\n                // |\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.PIPE, position, position + 1);\n            case 0x007d:\n                // }\n                return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BRACE_R, position, position + 1);\n            // StringValue\n            case 0x0022:\n                // \"\n                if (body.charCodeAt(position + 1) === 0x0022 && body.charCodeAt(position + 2) === 0x0022) {\n                    return readBlockString(lexer, position);\n                }\n                return readString(lexer, position);\n        } // IntValue | FloatValue (Digit | -)\n        if ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isDigit)(code) || code === 0x002d) {\n            return readNumber(lexer, position, code);\n        } // Name\n        if ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isNameStart)(code)) {\n            return readName(lexer, position);\n        }\n        throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, code === 0x0027 ? \"Unexpected single quote character ('), did you mean to use a double quote (\\\")?\" : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position) ? `Unexpected character: ${printCodePointAt(lexer, position)}.` : `Invalid character: ${printCodePointAt(lexer, position)}.`);\n    }\n    return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */ function readComment(lexer, start) {\n    const body = lexer.source.body;\n    const bodyLength = body.length;\n    let position = start + 1;\n    while(position < bodyLength){\n        const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n        if (code === 0x000a || code === 0x000d) {\n            break;\n        } // SourceCharacter\n        if (isUnicodeScalarValue(code)) {\n            ++position;\n        } else if (isSupplementaryCodePoint(body, position)) {\n            position += 2;\n        } else {\n            break;\n        }\n    }\n    return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.COMMENT, start, position, body.slice(start + 1, position));\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */ function readNumber(lexer, start, firstCode) {\n    const body = lexer.source.body;\n    let position = start;\n    let code = firstCode;\n    let isFloat = false; // NegativeSign (-)\n    if (code === 0x002d) {\n        code = body.charCodeAt(++position);\n    } // Zero (0)\n    if (code === 0x0030) {\n        code = body.charCodeAt(++position);\n        if ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isDigit)(code)) {\n            throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, `Invalid number, unexpected digit after 0: ${printCodePointAt(lexer, position)}.`);\n        }\n    } else {\n        position = readDigits(lexer, position, code);\n        code = body.charCodeAt(position);\n    } // Full stop (.)\n    if (code === 0x002e) {\n        isFloat = true;\n        code = body.charCodeAt(++position);\n        position = readDigits(lexer, position, code);\n        code = body.charCodeAt(position);\n    } // E e\n    if (code === 0x0045 || code === 0x0065) {\n        isFloat = true;\n        code = body.charCodeAt(++position); // + -\n        if (code === 0x002b || code === 0x002d) {\n            code = body.charCodeAt(++position);\n        }\n        position = readDigits(lexer, position, code);\n        code = body.charCodeAt(position);\n    } // Numbers cannot be followed by . or NameStart\n    if (code === 0x002e || (0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isNameStart)(code)) {\n        throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, `Invalid number, expected digit but got: ${printCodePointAt(lexer, position)}.`);\n    }\n    return createToken(lexer, isFloat ? _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.FLOAT : _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.INT, start, position, body.slice(start, position));\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */ function readDigits(lexer, start, firstCode) {\n    if (!(0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isDigit)(firstCode)) {\n        throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, start, `Invalid number, expected digit but got: ${printCodePointAt(lexer, start)}.`);\n    }\n    const body = lexer.source.body;\n    let position = start + 1; // +1 to skip first firstCode\n    while((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isDigit)(body.charCodeAt(position))){\n        ++position;\n    }\n    return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */ function readString(lexer, start) {\n    const body = lexer.source.body;\n    const bodyLength = body.length;\n    let position = start + 1;\n    let chunkStart = position;\n    let value = \"\";\n    while(position < bodyLength){\n        const code = body.charCodeAt(position); // Closing Quote (\")\n        if (code === 0x0022) {\n            value += body.slice(chunkStart, position);\n            return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.STRING, start, position + 1, value);\n        } // Escape Sequence (\\)\n        if (code === 0x005c) {\n            value += body.slice(chunkStart, position);\n            const escape = body.charCodeAt(position + 1) === 0x0075 // u\n             ? body.charCodeAt(position + 2) === 0x007b // {\n             ? readEscapedUnicodeVariableWidth(lexer, position) : readEscapedUnicodeFixedWidth(lexer, position) : readEscapedCharacter(lexer, position);\n            value += escape.value;\n            position += escape.size;\n            chunkStart = position;\n            continue;\n        } // LineTerminator (\\n | \\r)\n        if (code === 0x000a || code === 0x000d) {\n            break;\n        } // SourceCharacter\n        if (isUnicodeScalarValue(code)) {\n            ++position;\n        } else if (isSupplementaryCodePoint(body, position)) {\n            position += 2;\n        } else {\n            throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, `Invalid character within String: ${printCodePointAt(lexer, position)}.`);\n        }\n    }\n    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, \"Unterminated string.\");\n} // The string value and lexed size of an escape sequence.\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n    const body = lexer.source.body;\n    let point = 0;\n    let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n    while(size < 12){\n        const code = body.charCodeAt(position + size++); // Closing Brace (})\n        if (code === 0x007d) {\n            // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n            if (size < 5 || !isUnicodeScalarValue(point)) {\n                break;\n            }\n            return {\n                value: String.fromCodePoint(point),\n                size\n            };\n        } // Append this hex digit to the code point.\n        point = point << 4 | readHexDigit(code);\n        if (point < 0) {\n            break;\n        }\n    }\n    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, `Invalid Unicode escape sequence: \"${body.slice(position, position + size)}\".`);\n}\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n    const body = lexer.source.body;\n    const code = read16BitHexCode(body, position + 2);\n    if (isUnicodeScalarValue(code)) {\n        return {\n            value: String.fromCodePoint(code),\n            size: 6\n        };\n    } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n    // a valid pair is formed.\n    if (isLeadingSurrogate(code)) {\n        // \\u\n        if (body.charCodeAt(position + 6) === 0x005c && body.charCodeAt(position + 7) === 0x0075) {\n            const trailingCode = read16BitHexCode(body, position + 8);\n            if (isTrailingSurrogate(trailingCode)) {\n                // JavaScript defines strings as a sequence of UTF-16 code units and\n                // encodes Unicode code points above U+FFFF using a surrogate pair of\n                // code units. Since this is a surrogate pair escape sequence, just\n                // include both codes into the JavaScript string value. Had JavaScript\n                // not been internally based on UTF-16, then this surrogate pair would\n                // be decoded to retrieve the supplementary code point.\n                return {\n                    value: String.fromCodePoint(code, trailingCode),\n                    size: 12\n                };\n            }\n        }\n    }\n    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`);\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */ function read16BitHexCode(body, position) {\n    // readHexDigit() returns -1 on error. ORing a negative value with any other\n    // value always produces a negative value.\n    return readHexDigit(body.charCodeAt(position)) << 12 | readHexDigit(body.charCodeAt(position + 1)) << 8 | readHexDigit(body.charCodeAt(position + 2)) << 4 | readHexDigit(body.charCodeAt(position + 3));\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */ function readHexDigit(code) {\n    return code >= 0x0030 && code <= 0x0039 // 0-9\n     ? code - 0x0030 : code >= 0x0041 && code <= 0x0046 // A-F\n     ? code - 0x0037 : code >= 0x0061 && code <= 0x0066 // a-f\n     ? code - 0x0057 : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */ function readEscapedCharacter(lexer, position) {\n    const body = lexer.source.body;\n    const code = body.charCodeAt(position + 1);\n    switch(code){\n        case 0x0022:\n            // \"\n            return {\n                value: '\"',\n                size: 2\n            };\n        case 0x005c:\n            // \\\n            return {\n                value: \"\\\\\",\n                size: 2\n            };\n        case 0x002f:\n            // /\n            return {\n                value: \"/\",\n                size: 2\n            };\n        case 0x0062:\n            // b\n            return {\n                value: \"\\b\",\n                size: 2\n            };\n        case 0x0066:\n            // f\n            return {\n                value: \"\\f\",\n                size: 2\n            };\n        case 0x006e:\n            // n\n            return {\n                value: \"\\n\",\n                size: 2\n            };\n        case 0x0072:\n            // r\n            return {\n                value: \"\\r\",\n                size: 2\n            };\n        case 0x0074:\n            // t\n            return {\n                value: \"\t\",\n                size: 2\n            };\n    }\n    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, `Invalid character escape sequence: \"${body.slice(position, position + 2)}\".`);\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */ function readBlockString(lexer, start) {\n    const body = lexer.source.body;\n    const bodyLength = body.length;\n    let lineStart = lexer.lineStart;\n    let position = start + 3;\n    let chunkStart = position;\n    let currentLine = \"\";\n    const blockLines = [];\n    while(position < bodyLength){\n        const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n        if (code === 0x0022 && body.charCodeAt(position + 1) === 0x0022 && body.charCodeAt(position + 2) === 0x0022) {\n            currentLine += body.slice(chunkStart, position);\n            blockLines.push(currentLine);\n            const token = createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.BLOCK_STRING, start, position + 3, (0,_blockString_mjs__WEBPACK_IMPORTED_MODULE_4__.dedentBlockStringLines)(blockLines).join(\"\\n\"));\n            lexer.line += blockLines.length - 1;\n            lexer.lineStart = lineStart;\n            return token;\n        } // Escaped Triple-Quote (\\\"\"\")\n        if (code === 0x005c && body.charCodeAt(position + 1) === 0x0022 && body.charCodeAt(position + 2) === 0x0022 && body.charCodeAt(position + 3) === 0x0022) {\n            currentLine += body.slice(chunkStart, position);\n            chunkStart = position + 1; // skip only slash\n            position += 4;\n            continue;\n        } // LineTerminator\n        if (code === 0x000a || code === 0x000d) {\n            currentLine += body.slice(chunkStart, position);\n            blockLines.push(currentLine);\n            if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n                position += 2;\n            } else {\n                ++position;\n            }\n            currentLine = \"\";\n            chunkStart = position;\n            lineStart = position;\n            continue;\n        } // SourceCharacter\n        if (isUnicodeScalarValue(code)) {\n            ++position;\n        } else if (isSupplementaryCodePoint(body, position)) {\n            position += 2;\n        } else {\n            throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, `Invalid character within String: ${printCodePointAt(lexer, position)}.`);\n        }\n    }\n    throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_3__.syntaxError)(lexer.source, position, \"Unterminated string.\");\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */ function readName(lexer, start) {\n    const body = lexer.source.body;\n    const bodyLength = body.length;\n    let position = start + 1;\n    while(position < bodyLength){\n        const code = body.charCodeAt(position);\n        if ((0,_characterClasses_mjs__WEBPACK_IMPORTED_MODULE_2__.isNameContinue)(code)) {\n            ++position;\n        } else {\n            break;\n        }\n    }\n    return createToken(lexer, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_1__.TokenKind.NAME, start, position, body.slice(start, position));\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/lexer.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/location.mjs":
/*!****************************************************!*\
  !*** ./node_modules/graphql/language/location.mjs ***!
  \****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getLocation: () => (/* binding */ getLocation)\n/* harmony export */ });\n/* harmony import */ var _jsutils_invariant_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsutils/invariant.mjs */ \"(ssr)/./node_modules/graphql/jsutils/invariant.mjs\");\n\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */ /**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */ function getLocation(source, position) {\n    let lastLineStart = 0;\n    let line = 1;\n    for (const match of source.body.matchAll(LineRegExp)){\n        typeof match.index === \"number\" || (0,_jsutils_invariant_mjs__WEBPACK_IMPORTED_MODULE_0__.invariant)(false);\n        if (match.index >= position) {\n            break;\n        }\n        lastLineStart = match.index + match[0].length;\n        line += 1;\n    }\n    return {\n        line,\n        column: position + 1 - lastLineStart\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9sb2NhdGlvbi5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBcUQ7QUFDckQsTUFBTUMsYUFBYTtBQUNuQjs7Q0FFQyxHQUVEOzs7Q0FHQyxHQUNNLFNBQVNDLFlBQVlDLE1BQU0sRUFBRUMsUUFBUTtJQUMxQyxJQUFJQyxnQkFBZ0I7SUFDcEIsSUFBSUMsT0FBTztJQUVYLEtBQUssTUFBTUMsU0FBU0osT0FBT0ssSUFBSSxDQUFDQyxRQUFRLENBQUNSLFlBQWE7UUFDcEQsT0FBT00sTUFBTUcsS0FBSyxLQUFLLFlBQVlWLGlFQUFTQSxDQUFDO1FBRTdDLElBQUlPLE1BQU1HLEtBQUssSUFBSU4sVUFBVTtZQUMzQjtRQUNGO1FBRUFDLGdCQUFnQkUsTUFBTUcsS0FBSyxHQUFHSCxLQUFLLENBQUMsRUFBRSxDQUFDSSxNQUFNO1FBQzdDTCxRQUFRO0lBQ1Y7SUFFQSxPQUFPO1FBQ0xBO1FBQ0FNLFFBQVFSLFdBQVcsSUFBSUM7SUFDekI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL0BrZXlzdGF0aWMvdGVtcGxhdGVzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL2xvY2F0aW9uLm1qcz9jYzNkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGludmFyaWFudCB9IGZyb20gJy4uL2pzdXRpbHMvaW52YXJpYW50Lm1qcyc7XG5jb25zdCBMaW5lUmVnRXhwID0gL1xcclxcbnxbXFxuXFxyXS9nO1xuLyoqXG4gKiBSZXByZXNlbnRzIGEgbG9jYXRpb24gaW4gYSBTb3VyY2UuXG4gKi9cblxuLyoqXG4gKiBUYWtlcyBhIFNvdXJjZSBhbmQgYSBVVEYtOCBjaGFyYWN0ZXIgb2Zmc2V0LCBhbmQgcmV0dXJucyB0aGUgY29ycmVzcG9uZGluZ1xuICogbGluZSBhbmQgY29sdW1uIGFzIGEgU291cmNlTG9jYXRpb24uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRMb2NhdGlvbihzb3VyY2UsIHBvc2l0aW9uKSB7XG4gIGxldCBsYXN0TGluZVN0YXJ0ID0gMDtcbiAgbGV0IGxpbmUgPSAxO1xuXG4gIGZvciAoY29uc3QgbWF0Y2ggb2Ygc291cmNlLmJvZHkubWF0Y2hBbGwoTGluZVJlZ0V4cCkpIHtcbiAgICB0eXBlb2YgbWF0Y2guaW5kZXggPT09ICdudW1iZXInIHx8IGludmFyaWFudChmYWxzZSk7XG5cbiAgICBpZiAobWF0Y2guaW5kZXggPj0gcG9zaXRpb24pIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIGxhc3RMaW5lU3RhcnQgPSBtYXRjaC5pbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgICBsaW5lICs9IDE7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxpbmUsXG4gICAgY29sdW1uOiBwb3NpdGlvbiArIDEgLSBsYXN0TGluZVN0YXJ0LFxuICB9O1xufVxuIl0sIm5hbWVzIjpbImludmFyaWFudCIsIkxpbmVSZWdFeHAiLCJnZXRMb2NhdGlvbiIsInNvdXJjZSIsInBvc2l0aW9uIiwibGFzdExpbmVTdGFydCIsImxpbmUiLCJtYXRjaCIsImJvZHkiLCJtYXRjaEFsbCIsImluZGV4IiwibGVuZ3RoIiwiY29sdW1uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/location.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/parser.mjs":
/*!**************************************************!*\
  !*** ./node_modules/graphql/language/parser.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Parser: () => (/* binding */ Parser),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseConstValue: () => (/* binding */ parseConstValue),\n/* harmony export */   parseType: () => (/* binding */ parseType),\n/* harmony export */   parseValue: () => (/* binding */ parseValue)\n/* harmony export */ });\n/* harmony import */ var _error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../error/syntaxError.mjs */ \"(ssr)/./node_modules/graphql/error/syntaxError.mjs\");\n/* harmony import */ var _ast_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./ast.mjs */ \"(ssr)/./node_modules/graphql/language/ast.mjs\");\n/* harmony import */ var _directiveLocation_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./directiveLocation.mjs */ \"(ssr)/./node_modules/graphql/language/directiveLocation.mjs\");\n/* harmony import */ var _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./kinds.mjs */ \"(ssr)/./node_modules/graphql/language/kinds.mjs\");\n/* harmony import */ var _lexer_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lexer.mjs */ \"(ssr)/./node_modules/graphql/language/lexer.mjs\");\n/* harmony import */ var _source_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./source.mjs */ \"(ssr)/./node_modules/graphql/language/source.mjs\");\n/* harmony import */ var _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./tokenKind.mjs */ \"(ssr)/./node_modules/graphql/language/tokenKind.mjs\");\n\n\n\n\n\n\n\n/**\n * Configuration options to control parser behavior\n */ /**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */ function parse(source, options) {\n    const parser = new Parser(source, options);\n    return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */ function parseValue(source, options) {\n    const parser = new Parser(source, options);\n    parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SOF);\n    const value = parser.parseValueLiteral(false);\n    parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF);\n    return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */ function parseConstValue(source, options) {\n    const parser = new Parser(source, options);\n    parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SOF);\n    const value = parser.parseConstValueLiteral();\n    parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF);\n    return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */ function parseType(source, options) {\n    const parser = new Parser(source, options);\n    parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SOF);\n    const type = parser.parseTypeReference();\n    parser.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF);\n    return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */ class Parser {\n    constructor(source, options = {}){\n        const sourceObj = (0,_source_mjs__WEBPACK_IMPORTED_MODULE_1__.isSource)(source) ? source : new _source_mjs__WEBPACK_IMPORTED_MODULE_1__.Source(source);\n        this._lexer = new _lexer_mjs__WEBPACK_IMPORTED_MODULE_2__.Lexer(sourceObj);\n        this._options = options;\n        this._tokenCounter = 0;\n    }\n    /**\n   * Converts a name lex token into a name parse node.\n   */ parseName() {\n        const token = this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME);\n        return this.node(token, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.NAME,\n            value: token.value\n        });\n    }\n    /**\n   * Document : Definition+\n   */ parseDocument() {\n        return this.node(this._lexer.token, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.DOCUMENT,\n            definitions: this.many(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SOF, this.parseDefinition, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF)\n        });\n    }\n    /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */ parseDefinition() {\n        if (this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L)) {\n            return this.parseOperationDefinition();\n        } // Many definitions begin with a description and require a lookahead.\n        const hasDescription = this.peekDescription();\n        const keywordToken = hasDescription ? this._lexer.lookahead() : this._lexer.token;\n        if (keywordToken.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME) {\n            switch(keywordToken.value){\n                case \"schema\":\n                    return this.parseSchemaDefinition();\n                case \"scalar\":\n                    return this.parseScalarTypeDefinition();\n                case \"type\":\n                    return this.parseObjectTypeDefinition();\n                case \"interface\":\n                    return this.parseInterfaceTypeDefinition();\n                case \"union\":\n                    return this.parseUnionTypeDefinition();\n                case \"enum\":\n                    return this.parseEnumTypeDefinition();\n                case \"input\":\n                    return this.parseInputObjectTypeDefinition();\n                case \"directive\":\n                    return this.parseDirectiveDefinition();\n            }\n            if (hasDescription) {\n                throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(this._lexer.source, this._lexer.token.start, \"Unexpected description, descriptions are supported only on type definitions.\");\n            }\n            switch(keywordToken.value){\n                case \"query\":\n                case \"mutation\":\n                case \"subscription\":\n                    return this.parseOperationDefinition();\n                case \"fragment\":\n                    return this.parseFragmentDefinition();\n                case \"extend\":\n                    return this.parseTypeSystemExtension();\n            }\n        }\n        throw this.unexpected(keywordToken);\n    }\n    /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */ parseOperationDefinition() {\n        const start = this._lexer.token;\n        if (this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L)) {\n            return this.node(start, {\n                kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OPERATION_DEFINITION,\n                operation: _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.QUERY,\n                name: undefined,\n                variableDefinitions: [],\n                directives: [],\n                selectionSet: this.parseSelectionSet()\n            });\n        }\n        const operation = this.parseOperationType();\n        let name;\n        if (this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME)) {\n            name = this.parseName();\n        }\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OPERATION_DEFINITION,\n            operation,\n            name,\n            variableDefinitions: this.parseVariableDefinitions(),\n            directives: this.parseDirectives(false),\n            selectionSet: this.parseSelectionSet()\n        });\n    }\n    /**\n   * OperationType : one of query mutation subscription\n   */ parseOperationType() {\n        const operationToken = this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME);\n        switch(operationToken.value){\n            case \"query\":\n                return _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.QUERY;\n            case \"mutation\":\n                return _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.MUTATION;\n            case \"subscription\":\n                return _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.OperationTypeNode.SUBSCRIPTION;\n        }\n        throw this.unexpected(operationToken);\n    }\n    /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */ parseVariableDefinitions() {\n        return this.optionalMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_L, this.parseVariableDefinition, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_R);\n    }\n    /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */ parseVariableDefinition() {\n        return this.node(this._lexer.token, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.VARIABLE_DEFINITION,\n            variable: this.parseVariable(),\n            type: (this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON), this.parseTypeReference()),\n            defaultValue: this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EQUALS) ? this.parseConstValueLiteral() : undefined,\n            directives: this.parseConstDirectives()\n        });\n    }\n    /**\n   * Variable : $ Name\n   */ parseVariable() {\n        const start = this._lexer.token;\n        this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.DOLLAR);\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.VARIABLE,\n            name: this.parseName()\n        });\n    }\n    /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */ parseSelectionSet() {\n        return this.node(this._lexer.token, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SELECTION_SET,\n            selections: this.many(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L, this.parseSelection, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R)\n        });\n    }\n    /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */ parseSelection() {\n        return this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SPREAD) ? this.parseFragment() : this.parseField();\n    }\n    /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */ parseField() {\n        const start = this._lexer.token;\n        const nameOrAlias = this.parseName();\n        let alias;\n        let name;\n        if (this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON)) {\n            alias = nameOrAlias;\n            name = this.parseName();\n        } else {\n            name = nameOrAlias;\n        }\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FIELD,\n            alias,\n            name,\n            arguments: this.parseArguments(false),\n            directives: this.parseDirectives(false),\n            selectionSet: this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L) ? this.parseSelectionSet() : undefined\n        });\n    }\n    /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */ parseArguments(isConst) {\n        const item = isConst ? this.parseConstArgument : this.parseArgument;\n        return this.optionalMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_L, item, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_R);\n    }\n    /**\n   * Argument[Const] : Name : Value[?Const]\n   */ parseArgument(isConst = false) {\n        const start = this._lexer.token;\n        const name = this.parseName();\n        this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ARGUMENT,\n            name,\n            value: this.parseValueLiteral(isConst)\n        });\n    }\n    parseConstArgument() {\n        return this.parseArgument(true);\n    }\n    /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */ parseFragment() {\n        const start = this._lexer.token;\n        this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.SPREAD);\n        const hasTypeCondition = this.expectOptionalKeyword(\"on\");\n        if (!hasTypeCondition && this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME)) {\n            return this.node(start, {\n                kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_SPREAD,\n                name: this.parseFragmentName(),\n                directives: this.parseDirectives(false)\n            });\n        }\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INLINE_FRAGMENT,\n            typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n            directives: this.parseDirectives(false),\n            selectionSet: this.parseSelectionSet()\n        });\n    }\n    /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */ parseFragmentDefinition() {\n        const start = this._lexer.token;\n        this.expectKeyword(\"fragment\"); // Legacy support for defining variables within fragments changes\n        // the grammar of FragmentDefinition:\n        //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n        if (this._options.allowLegacyFragmentVariables === true) {\n            return this.node(start, {\n                kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_DEFINITION,\n                name: this.parseFragmentName(),\n                variableDefinitions: this.parseVariableDefinitions(),\n                typeCondition: (this.expectKeyword(\"on\"), this.parseNamedType()),\n                directives: this.parseDirectives(false),\n                selectionSet: this.parseSelectionSet()\n            });\n        }\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FRAGMENT_DEFINITION,\n            name: this.parseFragmentName(),\n            typeCondition: (this.expectKeyword(\"on\"), this.parseNamedType()),\n            directives: this.parseDirectives(false),\n            selectionSet: this.parseSelectionSet()\n        });\n    }\n    /**\n   * FragmentName : Name but not `on`\n   */ parseFragmentName() {\n        if (this._lexer.token.value === \"on\") {\n            throw this.unexpected();\n        }\n        return this.parseName();\n    }\n    /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */ parseValueLiteral(isConst) {\n        const token = this._lexer.token;\n        switch(token.kind){\n            case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_L:\n                return this.parseList(isConst);\n            case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L:\n                return this.parseObject(isConst);\n            case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.INT:\n                this.advanceLexer();\n                return this.node(token, {\n                    kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INT,\n                    value: token.value\n                });\n            case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.FLOAT:\n                this.advanceLexer();\n                return this.node(token, {\n                    kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FLOAT,\n                    value: token.value\n                });\n            case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.STRING:\n            case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BLOCK_STRING:\n                return this.parseStringLiteral();\n            case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME:\n                this.advanceLexer();\n                switch(token.value){\n                    case \"true\":\n                        return this.node(token, {\n                            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.BOOLEAN,\n                            value: true\n                        });\n                    case \"false\":\n                        return this.node(token, {\n                            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.BOOLEAN,\n                            value: false\n                        });\n                    case \"null\":\n                        return this.node(token, {\n                            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.NULL\n                        });\n                    default:\n                        return this.node(token, {\n                            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM,\n                            value: token.value\n                        });\n                }\n            case _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.DOLLAR:\n                if (isConst) {\n                    this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.DOLLAR);\n                    if (this._lexer.token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME) {\n                        const varName = this._lexer.token.value;\n                        throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(this._lexer.source, token.start, `Unexpected variable \"$${varName}\" in constant value.`);\n                    } else {\n                        throw this.unexpected(token);\n                    }\n                }\n                return this.parseVariable();\n            default:\n                throw this.unexpected();\n        }\n    }\n    parseConstValueLiteral() {\n        return this.parseValueLiteral(true);\n    }\n    parseStringLiteral() {\n        const token = this._lexer.token;\n        this.advanceLexer();\n        return this.node(token, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.STRING,\n            value: token.value,\n            block: token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BLOCK_STRING\n        });\n    }\n    /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */ parseList(isConst) {\n        const item = ()=>this.parseValueLiteral(isConst);\n        return this.node(this._lexer.token, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.LIST,\n            values: this.any(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_L, item, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_R)\n        });\n    }\n    /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */ parseObject(isConst) {\n        const item = ()=>this.parseObjectField(isConst);\n        return this.node(this._lexer.token, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT,\n            fields: this.any(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L, item, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R)\n        });\n    }\n    /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */ parseObjectField(isConst) {\n        const start = this._lexer.token;\n        const name = this.parseName();\n        this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT_FIELD,\n            name,\n            value: this.parseValueLiteral(isConst)\n        });\n    }\n    /**\n   * Directives[Const] : Directive[?Const]+\n   */ parseDirectives(isConst) {\n        const directives = [];\n        while(this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.AT)){\n            directives.push(this.parseDirective(isConst));\n        }\n        return directives;\n    }\n    parseConstDirectives() {\n        return this.parseDirectives(true);\n    }\n    /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */ parseDirective(isConst) {\n        const start = this._lexer.token;\n        this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.AT);\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.DIRECTIVE,\n            name: this.parseName(),\n            arguments: this.parseArguments(isConst)\n        });\n    }\n    /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */ parseTypeReference() {\n        const start = this._lexer.token;\n        let type;\n        if (this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_L)) {\n            const innerType = this.parseTypeReference();\n            this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACKET_R);\n            type = this.node(start, {\n                kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.LIST_TYPE,\n                type: innerType\n            });\n        } else {\n            type = this.parseNamedType();\n        }\n        if (this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BANG)) {\n            return this.node(start, {\n                kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.NON_NULL_TYPE,\n                type\n            });\n        }\n        return type;\n    }\n    /**\n   * NamedType : Name\n   */ parseNamedType() {\n        return this.node(this._lexer.token, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.NAMED_TYPE,\n            name: this.parseName()\n        });\n    }\n    peekDescription() {\n        return this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.STRING) || this.peek(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BLOCK_STRING);\n    }\n    /**\n   * Description : StringValue\n   */ parseDescription() {\n        if (this.peekDescription()) {\n            return this.parseStringLiteral();\n        }\n    }\n    /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */ parseSchemaDefinition() {\n        const start = this._lexer.token;\n        const description = this.parseDescription();\n        this.expectKeyword(\"schema\");\n        const directives = this.parseConstDirectives();\n        const operationTypes = this.many(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R);\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SCHEMA_DEFINITION,\n            description,\n            directives,\n            operationTypes\n        });\n    }\n    /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */ parseOperationTypeDefinition() {\n        const start = this._lexer.token;\n        const operation = this.parseOperationType();\n        this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);\n        const type = this.parseNamedType();\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OPERATION_TYPE_DEFINITION,\n            operation,\n            type\n        });\n    }\n    /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */ parseScalarTypeDefinition() {\n        const start = this._lexer.token;\n        const description = this.parseDescription();\n        this.expectKeyword(\"scalar\");\n        const name = this.parseName();\n        const directives = this.parseConstDirectives();\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SCALAR_TYPE_DEFINITION,\n            description,\n            name,\n            directives\n        });\n    }\n    /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */ parseObjectTypeDefinition() {\n        const start = this._lexer.token;\n        const description = this.parseDescription();\n        this.expectKeyword(\"type\");\n        const name = this.parseName();\n        const interfaces = this.parseImplementsInterfaces();\n        const directives = this.parseConstDirectives();\n        const fields = this.parseFieldsDefinition();\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT_TYPE_DEFINITION,\n            description,\n            name,\n            interfaces,\n            directives,\n            fields\n        });\n    }\n    /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */ parseImplementsInterfaces() {\n        return this.expectOptionalKeyword(\"implements\") ? this.delimitedMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.AMP, this.parseNamedType) : [];\n    }\n    /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */ parseFieldsDefinition() {\n        return this.optionalMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L, this.parseFieldDefinition, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R);\n    }\n    /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */ parseFieldDefinition() {\n        const start = this._lexer.token;\n        const description = this.parseDescription();\n        const name = this.parseName();\n        const args = this.parseArgumentDefs();\n        this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);\n        const type = this.parseTypeReference();\n        const directives = this.parseConstDirectives();\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.FIELD_DEFINITION,\n            description,\n            name,\n            arguments: args,\n            type,\n            directives\n        });\n    }\n    /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */ parseArgumentDefs() {\n        return this.optionalMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_L, this.parseInputValueDef, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PAREN_R);\n    }\n    /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */ parseInputValueDef() {\n        const start = this._lexer.token;\n        const description = this.parseDescription();\n        const name = this.parseName();\n        this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.COLON);\n        const type = this.parseTypeReference();\n        let defaultValue;\n        if (this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EQUALS)) {\n            defaultValue = this.parseConstValueLiteral();\n        }\n        const directives = this.parseConstDirectives();\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INPUT_VALUE_DEFINITION,\n            description,\n            name,\n            type,\n            defaultValue,\n            directives\n        });\n    }\n    /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */ parseInterfaceTypeDefinition() {\n        const start = this._lexer.token;\n        const description = this.parseDescription();\n        this.expectKeyword(\"interface\");\n        const name = this.parseName();\n        const interfaces = this.parseImplementsInterfaces();\n        const directives = this.parseConstDirectives();\n        const fields = this.parseFieldsDefinition();\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INTERFACE_TYPE_DEFINITION,\n            description,\n            name,\n            interfaces,\n            directives,\n            fields\n        });\n    }\n    /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */ parseUnionTypeDefinition() {\n        const start = this._lexer.token;\n        const description = this.parseDescription();\n        this.expectKeyword(\"union\");\n        const name = this.parseName();\n        const directives = this.parseConstDirectives();\n        const types = this.parseUnionMemberTypes();\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.UNION_TYPE_DEFINITION,\n            description,\n            name,\n            directives,\n            types\n        });\n    }\n    /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */ parseUnionMemberTypes() {\n        return this.expectOptionalToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EQUALS) ? this.delimitedMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PIPE, this.parseNamedType) : [];\n    }\n    /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */ parseEnumTypeDefinition() {\n        const start = this._lexer.token;\n        const description = this.parseDescription();\n        this.expectKeyword(\"enum\");\n        const name = this.parseName();\n        const directives = this.parseConstDirectives();\n        const values = this.parseEnumValuesDefinition();\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM_TYPE_DEFINITION,\n            description,\n            name,\n            directives,\n            values\n        });\n    }\n    /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */ parseEnumValuesDefinition() {\n        return this.optionalMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L, this.parseEnumValueDefinition, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R);\n    }\n    /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */ parseEnumValueDefinition() {\n        const start = this._lexer.token;\n        const description = this.parseDescription();\n        const name = this.parseEnumValueName();\n        const directives = this.parseConstDirectives();\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM_VALUE_DEFINITION,\n            description,\n            name,\n            directives\n        });\n    }\n    /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */ parseEnumValueName() {\n        if (this._lexer.token.value === \"true\" || this._lexer.token.value === \"false\" || this._lexer.token.value === \"null\") {\n            throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(this._lexer.source, this._lexer.token.start, `${getTokenDesc(this._lexer.token)} is reserved and cannot be used for an enum value.`);\n        }\n        return this.parseName();\n    }\n    /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */ parseInputObjectTypeDefinition() {\n        const start = this._lexer.token;\n        const description = this.parseDescription();\n        this.expectKeyword(\"input\");\n        const name = this.parseName();\n        const directives = this.parseConstDirectives();\n        const fields = this.parseInputFieldsDefinition();\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INPUT_OBJECT_TYPE_DEFINITION,\n            description,\n            name,\n            directives,\n            fields\n        });\n    }\n    /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */ parseInputFieldsDefinition() {\n        return this.optionalMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L, this.parseInputValueDef, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R);\n    }\n    /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */ parseTypeSystemExtension() {\n        const keywordToken = this._lexer.lookahead();\n        if (keywordToken.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME) {\n            switch(keywordToken.value){\n                case \"schema\":\n                    return this.parseSchemaExtension();\n                case \"scalar\":\n                    return this.parseScalarTypeExtension();\n                case \"type\":\n                    return this.parseObjectTypeExtension();\n                case \"interface\":\n                    return this.parseInterfaceTypeExtension();\n                case \"union\":\n                    return this.parseUnionTypeExtension();\n                case \"enum\":\n                    return this.parseEnumTypeExtension();\n                case \"input\":\n                    return this.parseInputObjectTypeExtension();\n            }\n        }\n        throw this.unexpected(keywordToken);\n    }\n    /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */ parseSchemaExtension() {\n        const start = this._lexer.token;\n        this.expectKeyword(\"extend\");\n        this.expectKeyword(\"schema\");\n        const directives = this.parseConstDirectives();\n        const operationTypes = this.optionalMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_L, this.parseOperationTypeDefinition, _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.BRACE_R);\n        if (directives.length === 0 && operationTypes.length === 0) {\n            throw this.unexpected();\n        }\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SCHEMA_EXTENSION,\n            directives,\n            operationTypes\n        });\n    }\n    /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */ parseScalarTypeExtension() {\n        const start = this._lexer.token;\n        this.expectKeyword(\"extend\");\n        this.expectKeyword(\"scalar\");\n        const name = this.parseName();\n        const directives = this.parseConstDirectives();\n        if (directives.length === 0) {\n            throw this.unexpected();\n        }\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.SCALAR_TYPE_EXTENSION,\n            name,\n            directives\n        });\n    }\n    /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */ parseObjectTypeExtension() {\n        const start = this._lexer.token;\n        this.expectKeyword(\"extend\");\n        this.expectKeyword(\"type\");\n        const name = this.parseName();\n        const interfaces = this.parseImplementsInterfaces();\n        const directives = this.parseConstDirectives();\n        const fields = this.parseFieldsDefinition();\n        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n            throw this.unexpected();\n        }\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.OBJECT_TYPE_EXTENSION,\n            name,\n            interfaces,\n            directives,\n            fields\n        });\n    }\n    /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */ parseInterfaceTypeExtension() {\n        const start = this._lexer.token;\n        this.expectKeyword(\"extend\");\n        this.expectKeyword(\"interface\");\n        const name = this.parseName();\n        const interfaces = this.parseImplementsInterfaces();\n        const directives = this.parseConstDirectives();\n        const fields = this.parseFieldsDefinition();\n        if (interfaces.length === 0 && directives.length === 0 && fields.length === 0) {\n            throw this.unexpected();\n        }\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INTERFACE_TYPE_EXTENSION,\n            name,\n            interfaces,\n            directives,\n            fields\n        });\n    }\n    /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */ parseUnionTypeExtension() {\n        const start = this._lexer.token;\n        this.expectKeyword(\"extend\");\n        this.expectKeyword(\"union\");\n        const name = this.parseName();\n        const directives = this.parseConstDirectives();\n        const types = this.parseUnionMemberTypes();\n        if (directives.length === 0 && types.length === 0) {\n            throw this.unexpected();\n        }\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.UNION_TYPE_EXTENSION,\n            name,\n            directives,\n            types\n        });\n    }\n    /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */ parseEnumTypeExtension() {\n        const start = this._lexer.token;\n        this.expectKeyword(\"extend\");\n        this.expectKeyword(\"enum\");\n        const name = this.parseName();\n        const directives = this.parseConstDirectives();\n        const values = this.parseEnumValuesDefinition();\n        if (directives.length === 0 && values.length === 0) {\n            throw this.unexpected();\n        }\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.ENUM_TYPE_EXTENSION,\n            name,\n            directives,\n            values\n        });\n    }\n    /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */ parseInputObjectTypeExtension() {\n        const start = this._lexer.token;\n        this.expectKeyword(\"extend\");\n        this.expectKeyword(\"input\");\n        const name = this.parseName();\n        const directives = this.parseConstDirectives();\n        const fields = this.parseInputFieldsDefinition();\n        if (directives.length === 0 && fields.length === 0) {\n            throw this.unexpected();\n        }\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.INPUT_OBJECT_TYPE_EXTENSION,\n            name,\n            directives,\n            fields\n        });\n    }\n    /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */ parseDirectiveDefinition() {\n        const start = this._lexer.token;\n        const description = this.parseDescription();\n        this.expectKeyword(\"directive\");\n        this.expectToken(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.AT);\n        const name = this.parseName();\n        const args = this.parseArgumentDefs();\n        const repeatable = this.expectOptionalKeyword(\"repeatable\");\n        this.expectKeyword(\"on\");\n        const locations = this.parseDirectiveLocations();\n        return this.node(start, {\n            kind: _kinds_mjs__WEBPACK_IMPORTED_MODULE_3__.Kind.DIRECTIVE_DEFINITION,\n            description,\n            name,\n            arguments: args,\n            repeatable,\n            locations\n        });\n    }\n    /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */ parseDirectiveLocations() {\n        return this.delimitedMany(_tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.PIPE, this.parseDirectiveLocation);\n    }\n    /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */ parseDirectiveLocation() {\n        const start = this._lexer.token;\n        const name = this.parseName();\n        if (Object.prototype.hasOwnProperty.call(_directiveLocation_mjs__WEBPACK_IMPORTED_MODULE_6__.DirectiveLocation, name.value)) {\n            return name;\n        }\n        throw this.unexpected(start);\n    }\n    /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */ node(startToken, node) {\n        if (this._options.noLocation !== true) {\n            node.loc = new _ast_mjs__WEBPACK_IMPORTED_MODULE_5__.Location(startToken, this._lexer.lastToken, this._lexer.source);\n        }\n        return node;\n    }\n    /**\n   * Determines if the next token is of a given kind\n   */ peek(kind) {\n        return this._lexer.token.kind === kind;\n    }\n    /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */ expectToken(kind) {\n        const token = this._lexer.token;\n        if (token.kind === kind) {\n            this.advanceLexer();\n            return token;\n        }\n        throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(this._lexer.source, token.start, `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`);\n    }\n    /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */ expectOptionalToken(kind) {\n        const token = this._lexer.token;\n        if (token.kind === kind) {\n            this.advanceLexer();\n            return true;\n        }\n        return false;\n    }\n    /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */ expectKeyword(value) {\n        const token = this._lexer.token;\n        if (token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME && token.value === value) {\n            this.advanceLexer();\n        } else {\n            throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(this._lexer.source, token.start, `Expected \"${value}\", found ${getTokenDesc(token)}.`);\n        }\n    }\n    /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */ expectOptionalKeyword(value) {\n        const token = this._lexer.token;\n        if (token.kind === _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.NAME && token.value === value) {\n            this.advanceLexer();\n            return true;\n        }\n        return false;\n    }\n    /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */ unexpected(atToken) {\n        const token = atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n        return (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(this._lexer.source, token.start, `Unexpected ${getTokenDesc(token)}.`);\n    }\n    /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */ any(openKind, parseFn, closeKind) {\n        this.expectToken(openKind);\n        const nodes = [];\n        while(!this.expectOptionalToken(closeKind)){\n            nodes.push(parseFn.call(this));\n        }\n        return nodes;\n    }\n    /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */ optionalMany(openKind, parseFn, closeKind) {\n        if (this.expectOptionalToken(openKind)) {\n            const nodes = [];\n            do {\n                nodes.push(parseFn.call(this));\n            }while (!this.expectOptionalToken(closeKind));\n            return nodes;\n        }\n        return [];\n    }\n    /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */ many(openKind, parseFn, closeKind) {\n        this.expectToken(openKind);\n        const nodes = [];\n        do {\n            nodes.push(parseFn.call(this));\n        }while (!this.expectOptionalToken(closeKind));\n        return nodes;\n    }\n    /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */ delimitedMany(delimiterKind, parseFn) {\n        this.expectOptionalToken(delimiterKind);\n        const nodes = [];\n        do {\n            nodes.push(parseFn.call(this));\n        }while (this.expectOptionalToken(delimiterKind));\n        return nodes;\n    }\n    advanceLexer() {\n        const { maxTokens } = this._options;\n        const token = this._lexer.advance();\n        if (maxTokens !== undefined && token.kind !== _tokenKind_mjs__WEBPACK_IMPORTED_MODULE_0__.TokenKind.EOF) {\n            ++this._tokenCounter;\n            if (this._tokenCounter > maxTokens) {\n                throw (0,_error_syntaxError_mjs__WEBPACK_IMPORTED_MODULE_4__.syntaxError)(this._lexer.source, token.start, `Document contains more that ${maxTokens} tokens. Parsing aborted.`);\n            }\n        }\n    }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */ function getTokenDesc(token) {\n    const value = token.value;\n    return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : \"\");\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */ function getTokenKindDesc(kind) {\n    return (0,_lexer_mjs__WEBPACK_IMPORTED_MODULE_2__.isPunctuatorTokenKind)(kind) ? `\"${kind}\"` : kind;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/parser.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/printLocation.mjs":
/*!*********************************************************!*\
  !*** ./node_modules/graphql/language/printLocation.mjs ***!
  \*********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   printLocation: () => (/* binding */ printLocation),\n/* harmony export */   printSourceLocation: () => (/* binding */ printSourceLocation)\n/* harmony export */ });\n/* harmony import */ var _location_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./location.mjs */ \"(ssr)/./node_modules/graphql/language/location.mjs\");\n\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */ function printLocation(location) {\n    return printSourceLocation(location.source, (0,_location_mjs__WEBPACK_IMPORTED_MODULE_0__.getLocation)(location.source, location.start));\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */ function printSourceLocation(source, sourceLocation) {\n    const firstLineColumnOffset = source.locationOffset.column - 1;\n    const body = \"\".padStart(firstLineColumnOffset) + source.body;\n    const lineIndex = sourceLocation.line - 1;\n    const lineOffset = source.locationOffset.line - 1;\n    const lineNum = sourceLocation.line + lineOffset;\n    const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n    const columnNum = sourceLocation.column + columnOffset;\n    const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n    const lines = body.split(/\\r\\n|[\\n\\r]/g);\n    const locationLine = lines[lineIndex]; // Special case for minified documents\n    if (locationLine.length > 120) {\n        const subLineIndex = Math.floor(columnNum / 80);\n        const subLineColumnNum = columnNum % 80;\n        const subLines = [];\n        for(let i = 0; i < locationLine.length; i += 80){\n            subLines.push(locationLine.slice(i, i + 80));\n        }\n        return locationStr + printPrefixedLines([\n            [\n                `${lineNum} |`,\n                subLines[0]\n            ],\n            ...subLines.slice(1, subLineIndex + 1).map((subLine)=>[\n                    \"|\",\n                    subLine\n                ]),\n            [\n                \"|\",\n                \"^\".padStart(subLineColumnNum)\n            ],\n            [\n                \"|\",\n                subLines[subLineIndex + 1]\n            ]\n        ]);\n    }\n    return locationStr + printPrefixedLines([\n        // Lines specified like this: [\"prefix\", \"string\"],\n        [\n            `${lineNum - 1} |`,\n            lines[lineIndex - 1]\n        ],\n        [\n            `${lineNum} |`,\n            locationLine\n        ],\n        [\n            \"|\",\n            \"^\".padStart(columnNum)\n        ],\n        [\n            `${lineNum + 1} |`,\n            lines[lineIndex + 1]\n        ]\n    ]);\n}\nfunction printPrefixedLines(lines) {\n    const existingLines = lines.filter(([_, line])=>line !== undefined);\n    const padLen = Math.max(...existingLines.map(([prefix])=>prefix.length));\n    return existingLines.map(([prefix, line])=>prefix.padStart(padLen) + (line ? \" \" + line : \"\")).join(\"\\n\");\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9wcmludExvY2F0aW9uLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBNkM7QUFFN0M7O0NBRUMsR0FDTSxTQUFTQyxjQUFjQyxRQUFRO0lBQ3BDLE9BQU9DLG9CQUNMRCxTQUFTRSxNQUFNLEVBQ2ZKLDBEQUFXQSxDQUFDRSxTQUFTRSxNQUFNLEVBQUVGLFNBQVNHLEtBQUs7QUFFL0M7QUFDQTs7Q0FFQyxHQUVNLFNBQVNGLG9CQUFvQkMsTUFBTSxFQUFFRSxjQUFjO0lBQ3hELE1BQU1DLHdCQUF3QkgsT0FBT0ksY0FBYyxDQUFDQyxNQUFNLEdBQUc7SUFDN0QsTUFBTUMsT0FBTyxHQUFHQyxRQUFRLENBQUNKLHlCQUF5QkgsT0FBT00sSUFBSTtJQUM3RCxNQUFNRSxZQUFZTixlQUFlTyxJQUFJLEdBQUc7SUFDeEMsTUFBTUMsYUFBYVYsT0FBT0ksY0FBYyxDQUFDSyxJQUFJLEdBQUc7SUFDaEQsTUFBTUUsVUFBVVQsZUFBZU8sSUFBSSxHQUFHQztJQUN0QyxNQUFNRSxlQUFlVixlQUFlTyxJQUFJLEtBQUssSUFBSU4sd0JBQXdCO0lBQ3pFLE1BQU1VLFlBQVlYLGVBQWVHLE1BQU0sR0FBR087SUFDMUMsTUFBTUUsY0FBYyxDQUFDLEVBQUVkLE9BQU9lLElBQUksQ0FBQyxDQUFDLEVBQUVKLFFBQVEsQ0FBQyxFQUFFRSxVQUFVLEVBQUUsQ0FBQztJQUM5RCxNQUFNRyxRQUFRVixLQUFLVyxLQUFLLENBQUM7SUFDekIsTUFBTUMsZUFBZUYsS0FBSyxDQUFDUixVQUFVLEVBQUUsc0NBQXNDO0lBRTdFLElBQUlVLGFBQWFDLE1BQU0sR0FBRyxLQUFLO1FBQzdCLE1BQU1DLGVBQWVDLEtBQUtDLEtBQUssQ0FBQ1QsWUFBWTtRQUM1QyxNQUFNVSxtQkFBbUJWLFlBQVk7UUFDckMsTUFBTVcsV0FBVyxFQUFFO1FBRW5CLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJUCxhQUFhQyxNQUFNLEVBQUVNLEtBQUssR0FBSTtZQUNoREQsU0FBU0UsSUFBSSxDQUFDUixhQUFhUyxLQUFLLENBQUNGLEdBQUdBLElBQUk7UUFDMUM7UUFFQSxPQUNFWCxjQUNBYyxtQkFBbUI7WUFDakI7Z0JBQUMsQ0FBQyxFQUFFakIsUUFBUSxFQUFFLENBQUM7Z0JBQUVhLFFBQVEsQ0FBQyxFQUFFO2FBQUM7ZUFDMUJBLFNBQVNHLEtBQUssQ0FBQyxHQUFHUCxlQUFlLEdBQUdTLEdBQUcsQ0FBQyxDQUFDQyxVQUFZO29CQUFDO29CQUFLQTtpQkFBUTtZQUN0RTtnQkFBQztnQkFBSyxJQUFJdkIsUUFBUSxDQUFDZ0I7YUFBa0I7WUFDckM7Z0JBQUM7Z0JBQUtDLFFBQVEsQ0FBQ0osZUFBZSxFQUFFO2FBQUM7U0FDbEM7SUFFTDtJQUVBLE9BQ0VOLGNBQ0FjLG1CQUFtQjtRQUNqQixtREFBbUQ7UUFDbkQ7WUFBQyxDQUFDLEVBQUVqQixVQUFVLEVBQUUsRUFBRSxDQUFDO1lBQUVLLEtBQUssQ0FBQ1IsWUFBWSxFQUFFO1NBQUM7UUFDMUM7WUFBQyxDQUFDLEVBQUVHLFFBQVEsRUFBRSxDQUFDO1lBQUVPO1NBQWE7UUFDOUI7WUFBQztZQUFLLElBQUlYLFFBQVEsQ0FBQ007U0FBVztRQUM5QjtZQUFDLENBQUMsRUFBRUYsVUFBVSxFQUFFLEVBQUUsQ0FBQztZQUFFSyxLQUFLLENBQUNSLFlBQVksRUFBRTtTQUFDO0tBQzNDO0FBRUw7QUFFQSxTQUFTb0IsbUJBQW1CWixLQUFLO0lBQy9CLE1BQU1lLGdCQUFnQmYsTUFBTWdCLE1BQU0sQ0FBQyxDQUFDLENBQUNDLEdBQUd4QixLQUFLLEdBQUtBLFNBQVN5QjtJQUMzRCxNQUFNQyxTQUFTZCxLQUFLZSxHQUFHLElBQUlMLGNBQWNGLEdBQUcsQ0FBQyxDQUFDLENBQUNRLE9BQU8sR0FBS0EsT0FBT2xCLE1BQU07SUFDeEUsT0FBT1ksY0FDSkYsR0FBRyxDQUFDLENBQUMsQ0FBQ1EsUUFBUTVCLEtBQUssR0FBSzRCLE9BQU85QixRQUFRLENBQUM0QixVQUFXMUIsQ0FBQUEsT0FBTyxNQUFNQSxPQUFPLEVBQUMsR0FDeEU2QixJQUFJLENBQUM7QUFDViIsInNvdXJjZXMiOlsid2VicGFjazovL0BrZXlzdGF0aWMvdGVtcGxhdGVzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3ByaW50TG9jYXRpb24ubWpzP2FkYjciXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0TG9jYXRpb24gfSBmcm9tICcuL2xvY2F0aW9uLm1qcyc7XG5cbi8qKlxuICogUmVuZGVyIGEgaGVscGZ1bCBkZXNjcmlwdGlvbiBvZiB0aGUgbG9jYXRpb24gaW4gdGhlIEdyYXBoUUwgU291cmNlIGRvY3VtZW50LlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRMb2NhdGlvbihsb2NhdGlvbikge1xuICByZXR1cm4gcHJpbnRTb3VyY2VMb2NhdGlvbihcbiAgICBsb2NhdGlvbi5zb3VyY2UsXG4gICAgZ2V0TG9jYXRpb24obG9jYXRpb24uc291cmNlLCBsb2NhdGlvbi5zdGFydCksXG4gICk7XG59XG4vKipcbiAqIFJlbmRlciBhIGhlbHBmdWwgZGVzY3JpcHRpb24gb2YgdGhlIGxvY2F0aW9uIGluIHRoZSBHcmFwaFFMIFNvdXJjZSBkb2N1bWVudC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcHJpbnRTb3VyY2VMb2NhdGlvbihzb3VyY2UsIHNvdXJjZUxvY2F0aW9uKSB7XG4gIGNvbnN0IGZpcnN0TGluZUNvbHVtbk9mZnNldCA9IHNvdXJjZS5sb2NhdGlvbk9mZnNldC5jb2x1bW4gLSAxO1xuICBjb25zdCBib2R5ID0gJycucGFkU3RhcnQoZmlyc3RMaW5lQ29sdW1uT2Zmc2V0KSArIHNvdXJjZS5ib2R5O1xuICBjb25zdCBsaW5lSW5kZXggPSBzb3VyY2VMb2NhdGlvbi5saW5lIC0gMTtcbiAgY29uc3QgbGluZU9mZnNldCA9IHNvdXJjZS5sb2NhdGlvbk9mZnNldC5saW5lIC0gMTtcbiAgY29uc3QgbGluZU51bSA9IHNvdXJjZUxvY2F0aW9uLmxpbmUgKyBsaW5lT2Zmc2V0O1xuICBjb25zdCBjb2x1bW5PZmZzZXQgPSBzb3VyY2VMb2NhdGlvbi5saW5lID09PSAxID8gZmlyc3RMaW5lQ29sdW1uT2Zmc2V0IDogMDtcbiAgY29uc3QgY29sdW1uTnVtID0gc291cmNlTG9jYXRpb24uY29sdW1uICsgY29sdW1uT2Zmc2V0O1xuICBjb25zdCBsb2NhdGlvblN0ciA9IGAke3NvdXJjZS5uYW1lfToke2xpbmVOdW19OiR7Y29sdW1uTnVtfVxcbmA7XG4gIGNvbnN0IGxpbmVzID0gYm9keS5zcGxpdCgvXFxyXFxufFtcXG5cXHJdL2cpO1xuICBjb25zdCBsb2NhdGlvbkxpbmUgPSBsaW5lc1tsaW5lSW5kZXhdOyAvLyBTcGVjaWFsIGNhc2UgZm9yIG1pbmlmaWVkIGRvY3VtZW50c1xuXG4gIGlmIChsb2NhdGlvbkxpbmUubGVuZ3RoID4gMTIwKSB7XG4gICAgY29uc3Qgc3ViTGluZUluZGV4ID0gTWF0aC5mbG9vcihjb2x1bW5OdW0gLyA4MCk7XG4gICAgY29uc3Qgc3ViTGluZUNvbHVtbk51bSA9IGNvbHVtbk51bSAlIDgwO1xuICAgIGNvbnN0IHN1YkxpbmVzID0gW107XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2F0aW9uTGluZS5sZW5ndGg7IGkgKz0gODApIHtcbiAgICAgIHN1YkxpbmVzLnB1c2gobG9jYXRpb25MaW5lLnNsaWNlKGksIGkgKyA4MCkpO1xuICAgIH1cblxuICAgIHJldHVybiAoXG4gICAgICBsb2NhdGlvblN0ciArXG4gICAgICBwcmludFByZWZpeGVkTGluZXMoW1xuICAgICAgICBbYCR7bGluZU51bX0gfGAsIHN1YkxpbmVzWzBdXSxcbiAgICAgICAgLi4uc3ViTGluZXMuc2xpY2UoMSwgc3ViTGluZUluZGV4ICsgMSkubWFwKChzdWJMaW5lKSA9PiBbJ3wnLCBzdWJMaW5lXSksXG4gICAgICAgIFsnfCcsICdeJy5wYWRTdGFydChzdWJMaW5lQ29sdW1uTnVtKV0sXG4gICAgICAgIFsnfCcsIHN1YkxpbmVzW3N1YkxpbmVJbmRleCArIDFdXSxcbiAgICAgIF0pXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgbG9jYXRpb25TdHIgK1xuICAgIHByaW50UHJlZml4ZWRMaW5lcyhbXG4gICAgICAvLyBMaW5lcyBzcGVjaWZpZWQgbGlrZSB0aGlzOiBbXCJwcmVmaXhcIiwgXCJzdHJpbmdcIl0sXG4gICAgICBbYCR7bGluZU51bSAtIDF9IHxgLCBsaW5lc1tsaW5lSW5kZXggLSAxXV0sXG4gICAgICBbYCR7bGluZU51bX0gfGAsIGxvY2F0aW9uTGluZV0sXG4gICAgICBbJ3wnLCAnXicucGFkU3RhcnQoY29sdW1uTnVtKV0sXG4gICAgICBbYCR7bGluZU51bSArIDF9IHxgLCBsaW5lc1tsaW5lSW5kZXggKyAxXV0sXG4gICAgXSlcbiAgKTtcbn1cblxuZnVuY3Rpb24gcHJpbnRQcmVmaXhlZExpbmVzKGxpbmVzKSB7XG4gIGNvbnN0IGV4aXN0aW5nTGluZXMgPSBsaW5lcy5maWx0ZXIoKFtfLCBsaW5lXSkgPT4gbGluZSAhPT0gdW5kZWZpbmVkKTtcbiAgY29uc3QgcGFkTGVuID0gTWF0aC5tYXgoLi4uZXhpc3RpbmdMaW5lcy5tYXAoKFtwcmVmaXhdKSA9PiBwcmVmaXgubGVuZ3RoKSk7XG4gIHJldHVybiBleGlzdGluZ0xpbmVzXG4gICAgLm1hcCgoW3ByZWZpeCwgbGluZV0pID0+IHByZWZpeC5wYWRTdGFydChwYWRMZW4pICsgKGxpbmUgPyAnICcgKyBsaW5lIDogJycpKVxuICAgIC5qb2luKCdcXG4nKTtcbn1cbiJdLCJuYW1lcyI6WyJnZXRMb2NhdGlvbiIsInByaW50TG9jYXRpb24iLCJsb2NhdGlvbiIsInByaW50U291cmNlTG9jYXRpb24iLCJzb3VyY2UiLCJzdGFydCIsInNvdXJjZUxvY2F0aW9uIiwiZmlyc3RMaW5lQ29sdW1uT2Zmc2V0IiwibG9jYXRpb25PZmZzZXQiLCJjb2x1bW4iLCJib2R5IiwicGFkU3RhcnQiLCJsaW5lSW5kZXgiLCJsaW5lIiwibGluZU9mZnNldCIsImxpbmVOdW0iLCJjb2x1bW5PZmZzZXQiLCJjb2x1bW5OdW0iLCJsb2NhdGlvblN0ciIsIm5hbWUiLCJsaW5lcyIsInNwbGl0IiwibG9jYXRpb25MaW5lIiwibGVuZ3RoIiwic3ViTGluZUluZGV4IiwiTWF0aCIsImZsb29yIiwic3ViTGluZUNvbHVtbk51bSIsInN1YkxpbmVzIiwiaSIsInB1c2giLCJzbGljZSIsInByaW50UHJlZml4ZWRMaW5lcyIsIm1hcCIsInN1YkxpbmUiLCJleGlzdGluZ0xpbmVzIiwiZmlsdGVyIiwiXyIsInVuZGVmaW5lZCIsInBhZExlbiIsIm1heCIsInByZWZpeCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/printLocation.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/source.mjs":
/*!**************************************************!*\
  !*** ./node_modules/graphql/language/source.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Source: () => (/* binding */ Source),\n/* harmony export */   isSource: () => (/* binding */ isSource)\n/* harmony export */ });\n/* harmony import */ var _jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../jsutils/devAssert.mjs */ \"(ssr)/./node_modules/graphql/jsutils/devAssert.mjs\");\n/* harmony import */ var _jsutils_inspect_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../jsutils/inspect.mjs */ \"(ssr)/./node_modules/graphql/jsutils/inspect.mjs\");\n/* harmony import */ var _jsutils_instanceOf_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../jsutils/instanceOf.mjs */ \"(ssr)/./node_modules/graphql/jsutils/instanceOf.mjs\");\n\n\n\n/**\n * A representation of source input to GraphQL. The `name` and `locationOffset` parameters are\n * optional, but they are useful for clients who store GraphQL documents in source files.\n * For example, if the GraphQL input starts at line 40 in a file named `Foo.graphql`, it might\n * be useful for `name` to be `\"Foo.graphql\"` and location to be `{ line: 40, column: 1 }`.\n * The `line` and `column` properties in `locationOffset` are 1-indexed.\n */ class Source {\n    constructor(body, name = \"GraphQL request\", locationOffset = {\n        line: 1,\n        column: 1\n    }){\n        typeof body === \"string\" || (0,_jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_0__.devAssert)(false, `Body must be a string. Received: ${(0,_jsutils_inspect_mjs__WEBPACK_IMPORTED_MODULE_1__.inspect)(body)}.`);\n        this.body = body;\n        this.name = name;\n        this.locationOffset = locationOffset;\n        this.locationOffset.line > 0 || (0,_jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_0__.devAssert)(false, \"line in locationOffset is 1-indexed and must be positive.\");\n        this.locationOffset.column > 0 || (0,_jsutils_devAssert_mjs__WEBPACK_IMPORTED_MODULE_0__.devAssert)(false, \"column in locationOffset is 1-indexed and must be positive.\");\n    }\n    get [Symbol.toStringTag]() {\n        return \"Source\";\n    }\n}\n/**\n * Test if the given value is a Source object.\n *\n * @internal\n */ function isSource(source) {\n    return (0,_jsutils_instanceOf_mjs__WEBPACK_IMPORTED_MODULE_2__.instanceOf)(source, Source);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9zb3VyY2UubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O0FBQXFEO0FBQ0o7QUFDTTtBQUV2RDs7Ozs7O0NBTUMsR0FDTSxNQUFNRztJQUNYQyxZQUNFQyxJQUFJLEVBQ0pDLE9BQU8saUJBQWlCLEVBQ3hCQyxpQkFBaUI7UUFDZkMsTUFBTTtRQUNOQyxRQUFRO0lBQ1YsQ0FBQyxDQUNEO1FBQ0EsT0FBT0osU0FBUyxZQUNkTCxpRUFBU0EsQ0FBQyxPQUFPLENBQUMsaUNBQWlDLEVBQUVDLDZEQUFPQSxDQUFDSSxNQUFNLENBQUMsQ0FBQztRQUN2RSxJQUFJLENBQUNBLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLElBQUksR0FBR0E7UUFDWixJQUFJLENBQUNDLGNBQWMsR0FBR0E7UUFDdEIsSUFBSSxDQUFDQSxjQUFjLENBQUNDLElBQUksR0FBRyxLQUN6QlIsaUVBQVNBLENBQ1AsT0FDQTtRQUVKLElBQUksQ0FBQ08sY0FBYyxDQUFDRSxNQUFNLEdBQUcsS0FDM0JULGlFQUFTQSxDQUNQLE9BQ0E7SUFFTjtJQUVBLElBQUksQ0FBQ1UsT0FBT0MsV0FBVyxDQUFDLEdBQUc7UUFDekIsT0FBTztJQUNUO0FBQ0Y7QUFDQTs7OztDQUlDLEdBRU0sU0FBU0MsU0FBU0MsTUFBTTtJQUM3QixPQUFPWCxtRUFBVUEsQ0FBQ1csUUFBUVY7QUFDNUIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9Aa2V5c3RhdGljL3RlbXBsYXRlcy1uZXh0anMvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS9zb3VyY2UubWpzPzg5YTAiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZGV2QXNzZXJ0IH0gZnJvbSAnLi4vanN1dGlscy9kZXZBc3NlcnQubWpzJztcbmltcG9ydCB7IGluc3BlY3QgfSBmcm9tICcuLi9qc3V0aWxzL2luc3BlY3QubWpzJztcbmltcG9ydCB7IGluc3RhbmNlT2YgfSBmcm9tICcuLi9qc3V0aWxzL2luc3RhbmNlT2YubWpzJztcblxuLyoqXG4gKiBBIHJlcHJlc2VudGF0aW9uIG9mIHNvdXJjZSBpbnB1dCB0byBHcmFwaFFMLiBUaGUgYG5hbWVgIGFuZCBgbG9jYXRpb25PZmZzZXRgIHBhcmFtZXRlcnMgYXJlXG4gKiBvcHRpb25hbCwgYnV0IHRoZXkgYXJlIHVzZWZ1bCBmb3IgY2xpZW50cyB3aG8gc3RvcmUgR3JhcGhRTCBkb2N1bWVudHMgaW4gc291cmNlIGZpbGVzLlxuICogRm9yIGV4YW1wbGUsIGlmIHRoZSBHcmFwaFFMIGlucHV0IHN0YXJ0cyBhdCBsaW5lIDQwIGluIGEgZmlsZSBuYW1lZCBgRm9vLmdyYXBocWxgLCBpdCBtaWdodFxuICogYmUgdXNlZnVsIGZvciBgbmFtZWAgdG8gYmUgYFwiRm9vLmdyYXBocWxcImAgYW5kIGxvY2F0aW9uIHRvIGJlIGB7IGxpbmU6IDQwLCBjb2x1bW46IDEgfWAuXG4gKiBUaGUgYGxpbmVgIGFuZCBgY29sdW1uYCBwcm9wZXJ0aWVzIGluIGBsb2NhdGlvbk9mZnNldGAgYXJlIDEtaW5kZXhlZC5cbiAqL1xuZXhwb3J0IGNsYXNzIFNvdXJjZSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIGJvZHksXG4gICAgbmFtZSA9ICdHcmFwaFFMIHJlcXVlc3QnLFxuICAgIGxvY2F0aW9uT2Zmc2V0ID0ge1xuICAgICAgbGluZTogMSxcbiAgICAgIGNvbHVtbjogMSxcbiAgICB9LFxuICApIHtcbiAgICB0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycgfHxcbiAgICAgIGRldkFzc2VydChmYWxzZSwgYEJvZHkgbXVzdCBiZSBhIHN0cmluZy4gUmVjZWl2ZWQ6ICR7aW5zcGVjdChib2R5KX0uYCk7XG4gICAgdGhpcy5ib2R5ID0gYm9keTtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMubG9jYXRpb25PZmZzZXQgPSBsb2NhdGlvbk9mZnNldDtcbiAgICB0aGlzLmxvY2F0aW9uT2Zmc2V0LmxpbmUgPiAwIHx8XG4gICAgICBkZXZBc3NlcnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnbGluZSBpbiBsb2NhdGlvbk9mZnNldCBpcyAxLWluZGV4ZWQgYW5kIG11c3QgYmUgcG9zaXRpdmUuJyxcbiAgICAgICk7XG4gICAgdGhpcy5sb2NhdGlvbk9mZnNldC5jb2x1bW4gPiAwIHx8XG4gICAgICBkZXZBc3NlcnQoXG4gICAgICAgIGZhbHNlLFxuICAgICAgICAnY29sdW1uIGluIGxvY2F0aW9uT2Zmc2V0IGlzIDEtaW5kZXhlZCBhbmQgbXVzdCBiZSBwb3NpdGl2ZS4nLFxuICAgICAgKTtcbiAgfVxuXG4gIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICByZXR1cm4gJ1NvdXJjZSc7XG4gIH1cbn1cbi8qKlxuICogVGVzdCBpZiB0aGUgZ2l2ZW4gdmFsdWUgaXMgYSBTb3VyY2Ugb2JqZWN0LlxuICpcbiAqIEBpbnRlcm5hbFxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBpc1NvdXJjZShzb3VyY2UpIHtcbiAgcmV0dXJuIGluc3RhbmNlT2Yoc291cmNlLCBTb3VyY2UpO1xufVxuIl0sIm5hbWVzIjpbImRldkFzc2VydCIsImluc3BlY3QiLCJpbnN0YW5jZU9mIiwiU291cmNlIiwiY29uc3RydWN0b3IiLCJib2R5IiwibmFtZSIsImxvY2F0aW9uT2Zmc2V0IiwibGluZSIsImNvbHVtbiIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwiaXNTb3VyY2UiLCJzb3VyY2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/source.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/graphql/language/tokenKind.mjs":
/*!*****************************************************!*\
  !*** ./node_modules/graphql/language/tokenKind.mjs ***!
  \*****************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TokenKind: () => (/* binding */ TokenKind)\n/* harmony export */ });\n/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */ var TokenKind;\n(function(TokenKind) {\n    TokenKind[\"SOF\"] = \"<SOF>\";\n    TokenKind[\"EOF\"] = \"<EOF>\";\n    TokenKind[\"BANG\"] = \"!\";\n    TokenKind[\"DOLLAR\"] = \"$\";\n    TokenKind[\"AMP\"] = \"&\";\n    TokenKind[\"PAREN_L\"] = \"(\";\n    TokenKind[\"PAREN_R\"] = \")\";\n    TokenKind[\"SPREAD\"] = \"...\";\n    TokenKind[\"COLON\"] = \":\";\n    TokenKind[\"EQUALS\"] = \"=\";\n    TokenKind[\"AT\"] = \"@\";\n    TokenKind[\"BRACKET_L\"] = \"[\";\n    TokenKind[\"BRACKET_R\"] = \"]\";\n    TokenKind[\"BRACE_L\"] = \"{\";\n    TokenKind[\"PIPE\"] = \"|\";\n    TokenKind[\"BRACE_R\"] = \"}\";\n    TokenKind[\"NAME\"] = \"Name\";\n    TokenKind[\"INT\"] = \"Int\";\n    TokenKind[\"FLOAT\"] = \"Float\";\n    TokenKind[\"STRING\"] = \"String\";\n    TokenKind[\"BLOCK_STRING\"] = \"BlockString\";\n    TokenKind[\"COMMENT\"] = \"Comment\";\n})(TokenKind || (TokenKind = {}));\n /**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */ \n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZ3JhcGhxbC9sYW5ndWFnZS90b2tlbktpbmQubWpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7O0NBR0MsR0FDRCxJQUFJQTtBQUVILFVBQVVBLFNBQVM7SUFDbEJBLFNBQVMsQ0FBQyxNQUFNLEdBQUc7SUFDbkJBLFNBQVMsQ0FBQyxNQUFNLEdBQUc7SUFDbkJBLFNBQVMsQ0FBQyxPQUFPLEdBQUc7SUFDcEJBLFNBQVMsQ0FBQyxTQUFTLEdBQUc7SUFDdEJBLFNBQVMsQ0FBQyxNQUFNLEdBQUc7SUFDbkJBLFNBQVMsQ0FBQyxVQUFVLEdBQUc7SUFDdkJBLFNBQVMsQ0FBQyxVQUFVLEdBQUc7SUFDdkJBLFNBQVMsQ0FBQyxTQUFTLEdBQUc7SUFDdEJBLFNBQVMsQ0FBQyxRQUFRLEdBQUc7SUFDckJBLFNBQVMsQ0FBQyxTQUFTLEdBQUc7SUFDdEJBLFNBQVMsQ0FBQyxLQUFLLEdBQUc7SUFDbEJBLFNBQVMsQ0FBQyxZQUFZLEdBQUc7SUFDekJBLFNBQVMsQ0FBQyxZQUFZLEdBQUc7SUFDekJBLFNBQVMsQ0FBQyxVQUFVLEdBQUc7SUFDdkJBLFNBQVMsQ0FBQyxPQUFPLEdBQUc7SUFDcEJBLFNBQVMsQ0FBQyxVQUFVLEdBQUc7SUFDdkJBLFNBQVMsQ0FBQyxPQUFPLEdBQUc7SUFDcEJBLFNBQVMsQ0FBQyxNQUFNLEdBQUc7SUFDbkJBLFNBQVMsQ0FBQyxRQUFRLEdBQUc7SUFDckJBLFNBQVMsQ0FBQyxTQUFTLEdBQUc7SUFDdEJBLFNBQVMsQ0FBQyxlQUFlLEdBQUc7SUFDNUJBLFNBQVMsQ0FBQyxVQUFVLEdBQUc7QUFDekIsR0FBR0EsYUFBY0EsQ0FBQUEsWUFBWSxDQUFDO0FBRVQsQ0FDckI7Ozs7Q0FJQyIsInNvdXJjZXMiOlsid2VicGFjazovL0BrZXlzdGF0aWMvdGVtcGxhdGVzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9ncmFwaHFsL2xhbmd1YWdlL3Rva2VuS2luZC5tanM/MjNlYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEFuIGV4cG9ydGVkIGVudW0gZGVzY3JpYmluZyB0aGUgZGlmZmVyZW50IGtpbmRzIG9mIHRva2VucyB0aGF0IHRoZVxuICogbGV4ZXIgZW1pdHMuXG4gKi9cbnZhciBUb2tlbktpbmQ7XG5cbihmdW5jdGlvbiAoVG9rZW5LaW5kKSB7XG4gIFRva2VuS2luZFsnU09GJ10gPSAnPFNPRj4nO1xuICBUb2tlbktpbmRbJ0VPRiddID0gJzxFT0Y+JztcbiAgVG9rZW5LaW5kWydCQU5HJ10gPSAnISc7XG4gIFRva2VuS2luZFsnRE9MTEFSJ10gPSAnJCc7XG4gIFRva2VuS2luZFsnQU1QJ10gPSAnJic7XG4gIFRva2VuS2luZFsnUEFSRU5fTCddID0gJygnO1xuICBUb2tlbktpbmRbJ1BBUkVOX1InXSA9ICcpJztcbiAgVG9rZW5LaW5kWydTUFJFQUQnXSA9ICcuLi4nO1xuICBUb2tlbktpbmRbJ0NPTE9OJ10gPSAnOic7XG4gIFRva2VuS2luZFsnRVFVQUxTJ10gPSAnPSc7XG4gIFRva2VuS2luZFsnQVQnXSA9ICdAJztcbiAgVG9rZW5LaW5kWydCUkFDS0VUX0wnXSA9ICdbJztcbiAgVG9rZW5LaW5kWydCUkFDS0VUX1InXSA9ICddJztcbiAgVG9rZW5LaW5kWydCUkFDRV9MJ10gPSAneyc7XG4gIFRva2VuS2luZFsnUElQRSddID0gJ3wnO1xuICBUb2tlbktpbmRbJ0JSQUNFX1InXSA9ICd9JztcbiAgVG9rZW5LaW5kWydOQU1FJ10gPSAnTmFtZSc7XG4gIFRva2VuS2luZFsnSU5UJ10gPSAnSW50JztcbiAgVG9rZW5LaW5kWydGTE9BVCddID0gJ0Zsb2F0JztcbiAgVG9rZW5LaW5kWydTVFJJTkcnXSA9ICdTdHJpbmcnO1xuICBUb2tlbktpbmRbJ0JMT0NLX1NUUklORyddID0gJ0Jsb2NrU3RyaW5nJztcbiAgVG9rZW5LaW5kWydDT01NRU5UJ10gPSAnQ29tbWVudCc7XG59KShUb2tlbktpbmQgfHwgKFRva2VuS2luZCA9IHt9KSk7XG5cbmV4cG9ydCB7IFRva2VuS2luZCB9O1xuLyoqXG4gKiBUaGUgZW51bSB0eXBlIHJlcHJlc2VudGluZyB0aGUgdG9rZW4ga2luZHMgdmFsdWVzLlxuICpcbiAqIEBkZXByZWNhdGVkIFBsZWFzZSB1c2UgYFRva2VuS2luZGAuIFdpbGwgYmUgcmVtb3ZlIGluIHYxNy5cbiAqL1xuIl0sIm5hbWVzIjpbIlRva2VuS2luZCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/graphql/language/tokenKind.mjs\n");

/***/ })

};
;