"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-find-and-replace";
exports.ids = ["vendor-chunks/mdast-util-find-and-replace"];
exports.modules = {

/***/ "(ssr)/./node_modules/mdast-util-find-and-replace/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/mdast-util-find-and-replace/index.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = findAndReplace;\nvar visit = __webpack_require__(/*! unist-util-visit-parents */ \"(ssr)/./node_modules/unist-util-visit-parents/index.js\");\nvar convert = __webpack_require__(/*! unist-util-is/convert */ \"(ssr)/./node_modules/unist-util-is/convert.js\");\nvar escape = __webpack_require__(/*! escape-string-regexp */ \"(ssr)/./node_modules/escape-string-regexp/index.js\");\nvar splice = [].splice;\nfunction findAndReplace(tree, find, replace, options) {\n    var settings;\n    var schema;\n    if (typeof find === \"string\" || find && typeof find.exec === \"function\") {\n        schema = [\n            [\n                find,\n                replace\n            ]\n        ];\n    } else {\n        schema = find;\n        options = replace;\n    }\n    settings = options || {};\n    search(tree, settings, handlerFactory(toPairs(schema)));\n    return tree;\n    function handlerFactory(pairs) {\n        var pair = pairs[0];\n        return handler;\n        function handler(node, parent) {\n            var find = pair[0];\n            var replace = pair[1];\n            var nodes = [];\n            var start = 0;\n            var index = parent.children.indexOf(node);\n            var position;\n            var match;\n            var subhandler;\n            var value;\n            find.lastIndex = 0;\n            match = find.exec(node.value);\n            while(match){\n                position = match.index;\n                value = replace.apply(null, [].concat(match, {\n                    index: match.index,\n                    input: match.input\n                }));\n                if (value !== false) {\n                    if (start !== position) {\n                        nodes.push({\n                            type: \"text\",\n                            value: node.value.slice(start, position)\n                        });\n                    }\n                    if (typeof value === \"string\" && value.length > 0) {\n                        value = {\n                            type: \"text\",\n                            value: value\n                        };\n                    }\n                    if (value) {\n                        nodes = [].concat(nodes, value);\n                    }\n                    start = position + match[0].length;\n                }\n                if (!find.global) {\n                    break;\n                }\n                match = find.exec(node.value);\n            }\n            if (position === undefined) {\n                nodes = [\n                    node\n                ];\n                index--;\n            } else {\n                if (start < node.value.length) {\n                    nodes.push({\n                        type: \"text\",\n                        value: node.value.slice(start)\n                    });\n                }\n                nodes.unshift(index, 1);\n                splice.apply(parent.children, nodes);\n            }\n            if (pairs.length > 1) {\n                subhandler = handlerFactory(pairs.slice(1));\n                position = -1;\n                while(++position < nodes.length){\n                    node = nodes[position];\n                    if (node.type === \"text\") {\n                        subhandler(node, parent);\n                    } else {\n                        search(node, settings, subhandler);\n                    }\n                }\n            }\n            return index + nodes.length + 1;\n        }\n    }\n}\nfunction search(tree, settings, handler) {\n    var ignored = convert(settings.ignore || []);\n    var result = [];\n    visit(tree, \"text\", visitor);\n    return result;\n    function visitor(node, parents) {\n        var index = -1;\n        var parent;\n        var grandparent;\n        while(++index < parents.length){\n            parent = parents[index];\n            if (ignored(parent, grandparent ? grandparent.children.indexOf(parent) : undefined, grandparent)) {\n                return;\n            }\n            grandparent = parent;\n        }\n        return handler(node, grandparent);\n    }\n}\nfunction toPairs(schema) {\n    var result = [];\n    var key;\n    var index;\n    if (typeof schema !== \"object\") {\n        throw new Error(\"Expected array or object as schema\");\n    }\n    if (\"length\" in schema) {\n        index = -1;\n        while(++index < schema.length){\n            result.push([\n                toExpression(schema[index][0]),\n                toFunction(schema[index][1])\n            ]);\n        }\n    } else {\n        for(key in schema){\n            result.push([\n                toExpression(key),\n                toFunction(schema[key])\n            ]);\n        }\n    }\n    return result;\n}\nfunction toExpression(find) {\n    return typeof find === \"string\" ? new RegExp(escape(find), \"g\") : find;\n}\nfunction toFunction(replace) {\n    return typeof replace === \"function\" ? replace : returner;\n    function returner() {\n        return replace;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mdast-util-find-and-replace/index.js\n");

/***/ })

};
;