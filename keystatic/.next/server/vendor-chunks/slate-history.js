"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/slate-history";
exports.ids = ["vendor-chunks/slate-history"];
exports.modules = {

/***/ "(ssr)/./node_modules/slate-history/dist/index.es.js":
/*!*****************************************************!*\
  !*** ./node_modules/slate-history/dist/index.es.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HISTORY: () => (/* binding */ HISTORY),\n/* harmony export */   History: () => (/* binding */ History),\n/* harmony export */   HistoryEditor: () => (/* binding */ HistoryEditor),\n/* harmony export */   MERGING: () => (/* binding */ MERGING),\n/* harmony export */   SAVING: () => (/* binding */ SAVING),\n/* harmony export */   withHistory: () => (/* binding */ withHistory)\n/* harmony export */ });\n/* harmony import */ var is_plain_object__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! is-plain-object */ \"(ssr)/./node_modules/is-plain-object/dist/is-plain-object.mjs\");\n/* harmony import */ var slate__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! slate */ \"(ssr)/./node_modules/slate/dist/index.es.js\");\n\n\nvar History = {\n    /**\r\n   * Check if a value is a `History` object.\r\n   */ isHistory (value) {\n        return (0,is_plain_object__WEBPACK_IMPORTED_MODULE_0__.isPlainObject)(value) && Array.isArray(value.redos) && Array.isArray(value.undos) && (value.redos.length === 0 || slate__WEBPACK_IMPORTED_MODULE_1__.Operation.isOperationList(value.redos[0].operations)) && (value.undos.length === 0 || slate__WEBPACK_IMPORTED_MODULE_1__.Operation.isOperationList(value.undos[0].operations));\n    }\n};\n/**\r\n * Weakmaps for attaching state to the editor.\r\n */ var HISTORY = new WeakMap();\nvar SAVING = new WeakMap();\nvar MERGING = new WeakMap(); // eslint-disable-next-line no-redeclare\nvar HistoryEditor = {\n    /**\r\n   * Check if a value is a `HistoryEditor` object.\r\n   */ isHistoryEditor (value) {\n        return History.isHistory(value.history) && slate__WEBPACK_IMPORTED_MODULE_1__.Editor.isEditor(value);\n    },\n    /**\r\n   * Get the merge flag's current value.\r\n   */ isMerging (editor) {\n        return MERGING.get(editor);\n    },\n    /**\r\n   * Get the saving flag's current value.\r\n   */ isSaving (editor) {\n        return SAVING.get(editor);\n    },\n    /**\r\n   * Redo to the previous saved state.\r\n   */ redo (editor) {\n        editor.redo();\n    },\n    /**\r\n   * Undo to the previous saved state.\r\n   */ undo (editor) {\n        editor.undo();\n    },\n    /**\r\n   * Apply a series of changes inside a synchronous `fn`, without merging any of\r\n   * the new operations into previous save point in the history.\r\n   */ withoutMerging (editor, fn) {\n        var prev = HistoryEditor.isMerging(editor);\n        MERGING.set(editor, false);\n        fn();\n        MERGING.set(editor, prev);\n    },\n    /**\r\n   * Apply a series of changes inside a synchronous `fn`, without saving any of\r\n   * their operations into the history.\r\n   */ withoutSaving (editor, fn) {\n        var prev = HistoryEditor.isSaving(editor);\n        SAVING.set(editor, false);\n        fn();\n        SAVING.set(editor, prev);\n    }\n};\n/**\r\n * The `withHistory` plugin keeps track of the operation history of a Slate\r\n * editor as operations are applied to it, using undo and redo stacks.\r\n *\r\n * If you are using TypeScript, you must extend Slate's CustomTypes to use\r\n * this plugin.\r\n *\r\n * See https://docs.slatejs.org/concepts/11-typescript to learn how.\r\n */ var withHistory = (editor)=>{\n    var e = editor;\n    var { apply } = e;\n    e.history = {\n        undos: [],\n        redos: []\n    };\n    e.redo = ()=>{\n        var { history } = e;\n        var { redos } = history;\n        if (redos.length > 0) {\n            var batch = redos[redos.length - 1];\n            if (batch.selectionBefore) {\n                slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.setSelection(e, batch.selectionBefore);\n            }\n            HistoryEditor.withoutSaving(e, ()=>{\n                slate__WEBPACK_IMPORTED_MODULE_1__.Editor.withoutNormalizing(e, ()=>{\n                    for (var op of batch.operations){\n                        e.apply(op);\n                    }\n                });\n            });\n            history.redos.pop();\n            history.undos.push(batch);\n        }\n    };\n    e.undo = ()=>{\n        var { history } = e;\n        var { undos } = history;\n        if (undos.length > 0) {\n            var batch = undos[undos.length - 1];\n            HistoryEditor.withoutSaving(e, ()=>{\n                slate__WEBPACK_IMPORTED_MODULE_1__.Editor.withoutNormalizing(e, ()=>{\n                    var inverseOps = batch.operations.map(slate__WEBPACK_IMPORTED_MODULE_1__.Operation.inverse).reverse();\n                    for (var op of inverseOps){\n                        e.apply(op);\n                    }\n                    if (batch.selectionBefore) {\n                        slate__WEBPACK_IMPORTED_MODULE_1__.Transforms.setSelection(e, batch.selectionBefore);\n                    }\n                });\n            });\n            history.redos.push(batch);\n            history.undos.pop();\n        }\n    };\n    e.apply = (op)=>{\n        var { operations, history } = e;\n        var { undos } = history;\n        var lastBatch = undos[undos.length - 1];\n        var lastOp = lastBatch && lastBatch.operations[lastBatch.operations.length - 1];\n        var save = HistoryEditor.isSaving(e);\n        var merge = HistoryEditor.isMerging(e);\n        if (save == null) {\n            save = shouldSave(op);\n        }\n        if (save) {\n            if (merge == null) {\n                if (lastBatch == null) {\n                    merge = false;\n                } else if (operations.length !== 0) {\n                    merge = true;\n                } else {\n                    merge = shouldMerge(op, lastOp);\n                }\n            }\n            if (lastBatch && merge) {\n                lastBatch.operations.push(op);\n            } else {\n                var batch = {\n                    operations: [\n                        op\n                    ],\n                    selectionBefore: e.selection\n                };\n                undos.push(batch);\n            }\n            while(undos.length > 100){\n                undos.shift();\n            }\n            history.redos = [];\n        }\n        apply(op);\n    };\n    return e;\n};\n/**\r\n * Check whether to merge an operation into the previous operation.\r\n */ var shouldMerge = (op, prev)=>{\n    if (prev && op.type === \"insert_text\" && prev.type === \"insert_text\" && op.offset === prev.offset + prev.text.length && slate__WEBPACK_IMPORTED_MODULE_1__.Path.equals(op.path, prev.path)) {\n        return true;\n    }\n    if (prev && op.type === \"remove_text\" && prev.type === \"remove_text\" && op.offset + op.text.length === prev.offset && slate__WEBPACK_IMPORTED_MODULE_1__.Path.equals(op.path, prev.path)) {\n        return true;\n    }\n    return false;\n};\n/**\r\n * Check whether an operation needs to be saved to the history.\r\n */ var shouldSave = (op, prev)=>{\n    if (op.type === \"set_selection\") {\n        return false;\n    }\n    return true;\n};\n //# sourceMappingURL=index.es.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/slate-history/dist/index.es.js\n");

/***/ })

};
;