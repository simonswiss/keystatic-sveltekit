"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@0no-co";
exports.ids = ["vendor-chunks/@0no-co"];
exports.modules = {

/***/ "(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs":
/*!***************************************************************!*\
  !*** ./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BREAK: () => (/* binding */ h),\n/* harmony export */   GraphQLError: () => (/* binding */ GraphQLError),\n/* harmony export */   Kind: () => (/* binding */ e),\n/* harmony export */   OperationTypeNode: () => (/* binding */ r),\n/* harmony export */   parse: () => (/* binding */ parse),\n/* harmony export */   parseType: () => (/* binding */ parseType),\n/* harmony export */   parseValue: () => (/* binding */ parseValue),\n/* harmony export */   print: () => (/* binding */ print),\n/* harmony export */   printBlockString: () => (/* binding */ printBlockString),\n/* harmony export */   printString: () => (/* binding */ printString),\n/* harmony export */   valueFromASTUntyped: () => (/* binding */ valueFromASTUntyped),\n/* harmony export */   valueFromTypeNode: () => (/* binding */ valueFromTypeNode),\n/* harmony export */   visit: () => (/* binding */ visit)\n/* harmony export */ });\nvar e = {\n    NAME: \"Name\",\n    DOCUMENT: \"Document\",\n    OPERATION_DEFINITION: \"OperationDefinition\",\n    VARIABLE_DEFINITION: \"VariableDefinition\",\n    SELECTION_SET: \"SelectionSet\",\n    FIELD: \"Field\",\n    ARGUMENT: \"Argument\",\n    FRAGMENT_SPREAD: \"FragmentSpread\",\n    INLINE_FRAGMENT: \"InlineFragment\",\n    FRAGMENT_DEFINITION: \"FragmentDefinition\",\n    VARIABLE: \"Variable\",\n    INT: \"IntValue\",\n    FLOAT: \"FloatValue\",\n    STRING: \"StringValue\",\n    BOOLEAN: \"BooleanValue\",\n    NULL: \"NullValue\",\n    ENUM: \"EnumValue\",\n    LIST: \"ListValue\",\n    OBJECT: \"ObjectValue\",\n    OBJECT_FIELD: \"ObjectField\",\n    DIRECTIVE: \"Directive\",\n    NAMED_TYPE: \"NamedType\",\n    LIST_TYPE: \"ListType\",\n    NON_NULL_TYPE: \"NonNullType\"\n};\nvar r = {\n    QUERY: \"query\",\n    MUTATION: \"mutation\",\n    SUBSCRIPTION: \"subscription\"\n};\nclass GraphQLError extends Error {\n    constructor(e, r, i, n, a, t, o){\n        super(e);\n        this.name = \"GraphQLError\";\n        this.message = e;\n        if (a) {\n            this.path = a;\n        }\n        if (r) {\n            this.nodes = Array.isArray(r) ? r : [\n                r\n            ];\n        }\n        if (i) {\n            this.source = i;\n        }\n        if (n) {\n            this.positions = n;\n        }\n        if (t) {\n            this.originalError = t;\n        }\n        var l = o;\n        if (!l && t) {\n            var u = t.extensions;\n            if (u && \"object\" == typeof u) {\n                l = u;\n            }\n        }\n        this.extensions = l || {};\n    }\n    toJSON() {\n        return {\n            ...this,\n            message: this.message\n        };\n    }\n    toString() {\n        return this.message;\n    }\n    get [Symbol.toStringTag]() {\n        return \"GraphQLError\";\n    }\n}\nvar i;\nvar n;\nfunction error(e) {\n    return new GraphQLError(`Syntax Error: Unexpected token at ${n} in ${e}`);\n}\nfunction advance(e) {\n    e.lastIndex = n;\n    if (e.test(i)) {\n        return i.slice(n, n = e.lastIndex);\n    }\n}\nvar a = / +(?=[^\\s])/y;\nfunction blockString(e) {\n    var r = e.split(\"\\n\");\n    var i = \"\";\n    var n = 0;\n    var t = 0;\n    var o = r.length - 1;\n    for(var l = 0; l < r.length; l++){\n        a.lastIndex = 0;\n        if (a.test(r[l])) {\n            if (l && (!n || a.lastIndex < n)) {\n                n = a.lastIndex;\n            }\n            t = t || l;\n            o = l;\n        }\n    }\n    for(var u = t; u <= o; u++){\n        if (u !== t) {\n            i += \"\\n\";\n        }\n        i += r[u].slice(n).replace(/\\\\\"\"\"/g, '\"\"\"');\n    }\n    return i;\n}\nfunction ignored() {\n    for(var e = 0 | i.charCodeAt(n++); 9 === e || 10 === e || 13 === e || 32 === e || 35 === e || 44 === e || 65279 === e; e = 0 | i.charCodeAt(n++)){\n        if (35 === e) {\n            while(10 !== (e = i.charCodeAt(n++)) && 13 !== e){}\n        }\n    }\n    n--;\n}\nvar t = /[_A-Za-z]\\w*/y;\nfunction name() {\n    var e;\n    if (e = advance(t)) {\n        return {\n            kind: \"Name\",\n            value: e\n        };\n    }\n}\nvar o = /(?:null|true|false)/y;\nvar l = /\\$[_A-Za-z]\\w*/y;\nvar u = /-?\\d+/y;\nvar v = /(?:\\.\\d+)?[eE][+-]?\\d+|\\.\\d+/y;\nvar d = /\\\\/g;\nvar s = /\"\"\"(?:\"\"\"|(?:[\\s\\S]*?[^\\\\])\"\"\")/y;\nvar c = /\"(?:\"|[^\\r\\n]*?[^\\\\]\")/y;\nfunction value(e) {\n    var r;\n    var a;\n    if (a = advance(o)) {\n        r = \"null\" === a ? {\n            kind: \"NullValue\"\n        } : {\n            kind: \"BooleanValue\",\n            value: \"true\" === a\n        };\n    } else if (!e && (a = advance(l))) {\n        r = {\n            kind: \"Variable\",\n            name: {\n                kind: \"Name\",\n                value: a.slice(1)\n            }\n        };\n    } else if (a = advance(u)) {\n        var f = a;\n        if (a = advance(v)) {\n            r = {\n                kind: \"FloatValue\",\n                value: f + a\n            };\n        } else {\n            r = {\n                kind: \"IntValue\",\n                value: f\n            };\n        }\n    } else if (a = advance(t)) {\n        r = {\n            kind: \"EnumValue\",\n            value: a\n        };\n    } else if (a = advance(s)) {\n        r = {\n            kind: \"StringValue\",\n            value: blockString(a.slice(3, -3)),\n            block: !0\n        };\n    } else if (a = advance(c)) {\n        r = {\n            kind: \"StringValue\",\n            value: d.test(a) ? JSON.parse(a) : a.slice(1, -1),\n            block: !1\n        };\n    } else if (r = function list(e) {\n        var r;\n        if (91 === i.charCodeAt(n)) {\n            n++;\n            ignored();\n            var a = [];\n            while(r = value(e)){\n                a.push(r);\n            }\n            if (93 !== i.charCodeAt(n++)) {\n                throw error(\"ListValue\");\n            }\n            ignored();\n            return {\n                kind: \"ListValue\",\n                values: a\n            };\n        }\n    }(e) || function object(e) {\n        if (123 === i.charCodeAt(n)) {\n            n++;\n            ignored();\n            var r = [];\n            var a;\n            while(a = name()){\n                ignored();\n                if (58 !== i.charCodeAt(n++)) {\n                    throw error(\"ObjectField\");\n                }\n                ignored();\n                var t = value(e);\n                if (!t) {\n                    throw error(\"ObjectField\");\n                }\n                r.push({\n                    kind: \"ObjectField\",\n                    name: a,\n                    value: t\n                });\n            }\n            if (125 !== i.charCodeAt(n++)) {\n                throw error(\"ObjectValue\");\n            }\n            ignored();\n            return {\n                kind: \"ObjectValue\",\n                fields: r\n            };\n        }\n    }(e)) {\n        return r;\n    }\n    ignored();\n    return r;\n}\nfunction arguments_(e) {\n    var r = [];\n    ignored();\n    if (40 === i.charCodeAt(n)) {\n        n++;\n        ignored();\n        var a;\n        while(a = name()){\n            ignored();\n            if (58 !== i.charCodeAt(n++)) {\n                throw error(\"Argument\");\n            }\n            ignored();\n            var t = value(e);\n            if (!t) {\n                throw error(\"Argument\");\n            }\n            r.push({\n                kind: \"Argument\",\n                name: a,\n                value: t\n            });\n        }\n        if (!r.length || 41 !== i.charCodeAt(n++)) {\n            throw error(\"Argument\");\n        }\n        ignored();\n    }\n    return r;\n}\nfunction directives(e) {\n    var r = [];\n    ignored();\n    while(64 === i.charCodeAt(n)){\n        n++;\n        var a = name();\n        if (!a) {\n            throw error(\"Directive\");\n        }\n        ignored();\n        r.push({\n            kind: \"Directive\",\n            name: a,\n            arguments: arguments_(e)\n        });\n    }\n    return r;\n}\nfunction field() {\n    var e = name();\n    if (e) {\n        ignored();\n        var r;\n        if (58 === i.charCodeAt(n)) {\n            n++;\n            ignored();\n            r = e;\n            if (!(e = name())) {\n                throw error(\"Field\");\n            }\n            ignored();\n        }\n        return {\n            kind: \"Field\",\n            alias: r,\n            name: e,\n            arguments: arguments_(!1),\n            directives: directives(!1),\n            selectionSet: selectionSet()\n        };\n    }\n}\nfunction type() {\n    var e;\n    ignored();\n    if (91 === i.charCodeAt(n)) {\n        n++;\n        ignored();\n        var r = type();\n        if (!r || 93 !== i.charCodeAt(n++)) {\n            throw error(\"ListType\");\n        }\n        e = {\n            kind: \"ListType\",\n            type: r\n        };\n    } else if (e = name()) {\n        e = {\n            kind: \"NamedType\",\n            name: e\n        };\n    } else {\n        throw error(\"NamedType\");\n    }\n    ignored();\n    if (33 === i.charCodeAt(n)) {\n        n++;\n        ignored();\n        return {\n            kind: \"NonNullType\",\n            type: e\n        };\n    } else {\n        return e;\n    }\n}\nvar f = /on/y;\nfunction typeCondition() {\n    if (advance(f)) {\n        ignored();\n        var e = name();\n        if (!e) {\n            throw error(\"NamedType\");\n        }\n        ignored();\n        return {\n            kind: \"NamedType\",\n            name: e\n        };\n    }\n}\nvar p = /\\.\\.\\./y;\nfunction fragmentSpread() {\n    if (advance(p)) {\n        ignored();\n        var e = n;\n        var r;\n        if ((r = name()) && \"on\" !== r.value) {\n            return {\n                kind: \"FragmentSpread\",\n                name: r,\n                directives: directives(!1)\n            };\n        } else {\n            n = e;\n            var i = typeCondition();\n            var a = directives(!1);\n            var t = selectionSet();\n            if (!t) {\n                throw error(\"InlineFragment\");\n            }\n            return {\n                kind: \"InlineFragment\",\n                typeCondition: i,\n                directives: a,\n                selectionSet: t\n            };\n        }\n    }\n}\nfunction selectionSet() {\n    var e;\n    ignored();\n    if (123 === i.charCodeAt(n)) {\n        n++;\n        ignored();\n        var r = [];\n        while(e = fragmentSpread() || field()){\n            r.push(e);\n        }\n        if (!r.length || 125 !== i.charCodeAt(n++)) {\n            throw error(\"SelectionSet\");\n        }\n        ignored();\n        return {\n            kind: \"SelectionSet\",\n            selections: r\n        };\n    }\n}\nvar m = /fragment/y;\nfunction fragmentDefinition() {\n    if (advance(m)) {\n        ignored();\n        var e = name();\n        if (!e) {\n            throw error(\"FragmentDefinition\");\n        }\n        ignored();\n        var r = typeCondition();\n        if (!r) {\n            throw error(\"FragmentDefinition\");\n        }\n        var i = directives(!1);\n        var n = selectionSet();\n        if (!n) {\n            throw error(\"FragmentDefinition\");\n        }\n        return {\n            kind: \"FragmentDefinition\",\n            name: e,\n            typeCondition: r,\n            directives: i,\n            selectionSet: n\n        };\n    }\n}\nvar g = /(?:query|mutation|subscription)/y;\nfunction operationDefinition() {\n    var e;\n    var r;\n    var a = [];\n    var t = [];\n    if (e = advance(g)) {\n        ignored();\n        r = name();\n        a = function variableDefinitions() {\n            var e;\n            var r = [];\n            ignored();\n            if (40 === i.charCodeAt(n)) {\n                n++;\n                ignored();\n                while(e = advance(l)){\n                    ignored();\n                    if (58 !== i.charCodeAt(n++)) {\n                        throw error(\"VariableDefinition\");\n                    }\n                    var a = type();\n                    var t = void 0;\n                    if (61 === i.charCodeAt(n)) {\n                        n++;\n                        ignored();\n                        if (!(t = value(!0))) {\n                            throw error(\"VariableDefinition\");\n                        }\n                    }\n                    ignored();\n                    r.push({\n                        kind: \"VariableDefinition\",\n                        variable: {\n                            kind: \"Variable\",\n                            name: {\n                                kind: \"Name\",\n                                value: e.slice(1)\n                            }\n                        },\n                        type: a,\n                        defaultValue: t,\n                        directives: directives(!0)\n                    });\n                }\n                if (41 !== i.charCodeAt(n++)) {\n                    throw error(\"VariableDefinition\");\n                }\n                ignored();\n            }\n            return r;\n        }();\n        t = directives(!1);\n    }\n    var o = selectionSet();\n    if (o) {\n        return {\n            kind: \"OperationDefinition\",\n            operation: e || \"query\",\n            name: r,\n            variableDefinitions: a,\n            directives: t,\n            selectionSet: o\n        };\n    }\n}\nfunction parse(e, r) {\n    i = \"string\" == typeof e.body ? e.body : e;\n    n = 0;\n    return function document() {\n        var e;\n        ignored();\n        var r = [];\n        while(e = fragmentDefinition() || operationDefinition()){\n            r.push(e);\n        }\n        return {\n            kind: \"Document\",\n            definitions: r\n        };\n    }();\n}\nfunction parseValue(e, r) {\n    i = \"string\" == typeof e.body ? e.body : e;\n    n = 0;\n    ignored();\n    var a = value(!1);\n    if (!a) {\n        throw error(\"ValueNode\");\n    }\n    return a;\n}\nfunction parseType(e, r) {\n    i = \"string\" == typeof e.body ? e.body : e;\n    n = 0;\n    return type();\n}\nvar h = {};\nfunction visit(e, r) {\n    var i = [];\n    var n = [];\n    try {\n        var a = function traverse(e, a, t) {\n            var o = !1;\n            var l = r[e.kind] && r[e.kind].enter || r[e.kind] || r.enter;\n            var u = l && l.call(r, e, a, t, n, i);\n            if (!1 === u) {\n                return e;\n            } else if (null === u) {\n                return null;\n            } else if (u === h) {\n                throw h;\n            } else if (u && \"string\" == typeof u.kind) {\n                o = u !== e;\n                e = u;\n            }\n            if (t) {\n                i.push(t);\n            }\n            var v;\n            var d = {\n                ...e\n            };\n            for(var s in e){\n                n.push(s);\n                var c = e[s];\n                if (Array.isArray(c)) {\n                    var f = [];\n                    for(var p = 0; p < c.length; p++){\n                        if (null != c[p] && \"string\" == typeof c[p].kind) {\n                            i.push(e);\n                            n.push(p);\n                            v = traverse(c[p], p, c);\n                            n.pop();\n                            i.pop();\n                            if (null == v) {\n                                o = !0;\n                            } else {\n                                o = o || v !== c[p];\n                                f.push(v);\n                            }\n                        }\n                    }\n                    c = f;\n                } else if (null != c && \"string\" == typeof c.kind) {\n                    if (void 0 !== (v = traverse(c, s, e))) {\n                        o = o || c !== v;\n                        c = v;\n                    }\n                }\n                n.pop();\n                if (o) {\n                    d[s] = c;\n                }\n            }\n            if (t) {\n                i.pop();\n            }\n            var m = r[e.kind] && r[e.kind].leave || r.leave;\n            var g = m && m.call(r, e, a, t, n, i);\n            if (g === h) {\n                throw h;\n            } else if (void 0 !== g) {\n                return g;\n            } else if (void 0 !== u) {\n                return o ? d : u;\n            } else {\n                return o ? d : e;\n            }\n        }(e);\n        return void 0 !== a && !1 !== a ? a : e;\n    } catch (r) {\n        if (r !== h) {\n            throw r;\n        }\n        return e;\n    }\n}\nfunction printString(e) {\n    return JSON.stringify(e);\n}\nfunction printBlockString(e) {\n    return '\"\"\"\\n' + e.replace(/\"\"\"/g, '\\\\\"\"\"') + '\\n\"\"\"';\n}\nvar hasItems = (e)=>!(!e || !e.length);\nvar y = {\n    OperationDefinition (e) {\n        if (\"query\" === e.operation && !e.name && !hasItems(e.variableDefinitions) && !hasItems(e.directives)) {\n            return y.SelectionSet(e.selectionSet);\n        }\n        var r = e.operation;\n        if (e.name) {\n            r += \" \" + e.name.value;\n        }\n        if (hasItems(e.variableDefinitions)) {\n            if (!e.name) {\n                r += \" \";\n            }\n            r += \"(\" + e.variableDefinitions.map(y.VariableDefinition).join(\", \") + \")\";\n        }\n        if (hasItems(e.directives)) {\n            r += \" \" + e.directives.map(y.Directive).join(\" \");\n        }\n        return r + \" \" + y.SelectionSet(e.selectionSet);\n    },\n    VariableDefinition (e) {\n        var r = y.Variable(e.variable) + \": \" + print(e.type);\n        if (e.defaultValue) {\n            r += \" = \" + print(e.defaultValue);\n        }\n        if (hasItems(e.directives)) {\n            r += \" \" + e.directives.map(y.Directive).join(\" \");\n        }\n        return r;\n    },\n    Field (e) {\n        var r = (e.alias ? e.alias.value + \": \" : \"\") + e.name.value;\n        if (hasItems(e.arguments)) {\n            var i = e.arguments.map(y.Argument);\n            var n = r + \"(\" + i.join(\", \") + \")\";\n            r = n.length > 80 ? r + \"(\\n  \" + i.join(\"\\n\").replace(/\\n/g, \"\\n  \") + \"\\n)\" : n;\n        }\n        if (hasItems(e.directives)) {\n            r += \" \" + e.directives.map(y.Directive).join(\" \");\n        }\n        return e.selectionSet ? r + \" \" + y.SelectionSet(e.selectionSet) : r;\n    },\n    StringValue: (e)=>e.block ? printBlockString(e.value) : printString(e.value),\n    BooleanValue: (e)=>\"\" + e.value,\n    NullValue: (e)=>\"null\",\n    IntValue: (e)=>e.value,\n    FloatValue: (e)=>e.value,\n    EnumValue: (e)=>e.value,\n    Name: (e)=>e.value,\n    Variable: (e)=>\"$\" + e.name.value,\n    ListValue: (e)=>\"[\" + e.values.map(print).join(\", \") + \"]\",\n    ObjectValue: (e)=>\"{\" + e.fields.map(y.ObjectField).join(\", \") + \"}\",\n    ObjectField: (e)=>e.name.value + \": \" + print(e.value),\n    Document: (e)=>hasItems(e.definitions) ? e.definitions.map(print).join(\"\\n\\n\") : \"\",\n    SelectionSet: (e)=>\"{\\n  \" + e.selections.map(print).join(\"\\n\").replace(/\\n/g, \"\\n  \") + \"\\n}\",\n    Argument: (e)=>e.name.value + \": \" + print(e.value),\n    FragmentSpread (e) {\n        var r = \"...\" + e.name.value;\n        if (hasItems(e.directives)) {\n            r += \" \" + e.directives.map(y.Directive).join(\" \");\n        }\n        return r;\n    },\n    InlineFragment (e) {\n        var r = \"...\";\n        if (e.typeCondition) {\n            r += \" on \" + e.typeCondition.name.value;\n        }\n        if (hasItems(e.directives)) {\n            r += \" \" + e.directives.map(y.Directive).join(\" \");\n        }\n        return r + \" \" + print(e.selectionSet);\n    },\n    FragmentDefinition (e) {\n        var r = \"fragment \" + e.name.value;\n        r += \" on \" + e.typeCondition.name.value;\n        if (hasItems(e.directives)) {\n            r += \" \" + e.directives.map(y.Directive).join(\" \");\n        }\n        return r + \" \" + print(e.selectionSet);\n    },\n    Directive (e) {\n        var r = \"@\" + e.name.value;\n        if (hasItems(e.arguments)) {\n            r += \"(\" + e.arguments.map(y.Argument).join(\", \") + \")\";\n        }\n        return r;\n    },\n    NamedType: (e)=>e.name.value,\n    ListType: (e)=>\"[\" + print(e.type) + \"]\",\n    NonNullType: (e)=>print(e.type) + \"!\"\n};\nfunction print(e) {\n    return y[e.kind] ? y[e.kind](e) : \"\";\n}\nfunction valueFromASTUntyped(e, r) {\n    switch(e.kind){\n        case \"NullValue\":\n            return null;\n        case \"IntValue\":\n            return parseInt(e.value, 10);\n        case \"FloatValue\":\n            return parseFloat(e.value);\n        case \"StringValue\":\n        case \"EnumValue\":\n        case \"BooleanValue\":\n            return e.value;\n        case \"ListValue\":\n            var i = [];\n            for(var n = 0, a = e.values; n < a.length; n += 1){\n                i.push(valueFromASTUntyped(a[n], r));\n            }\n            return i;\n        case \"ObjectValue\":\n            var t = Object.create(null);\n            for(var o = 0, l = e.fields; o < l.length; o += 1){\n                var u = l[o];\n                t[u.name.value] = valueFromASTUntyped(u.value, r);\n            }\n            return t;\n        case \"Variable\":\n            return r && r[e.name.value];\n    }\n}\nfunction valueFromTypeNode(e, r, i) {\n    if (\"Variable\" === e.kind) {\n        return i ? valueFromTypeNode(i[e.name.value], r, i) : void 0;\n    } else if (\"NonNullType\" === r.kind) {\n        return \"NullValue\" !== e.kind ? valueFromTypeNode(e, r, i) : void 0;\n    } else if (\"NullValue\" === e.kind) {\n        return null;\n    } else if (\"ListType\" === r.kind) {\n        if (\"ListValue\" === e.kind) {\n            var n = [];\n            for(var a = 0, t = e.values; a < t.length; a += 1){\n                var o = valueFromTypeNode(t[a], r.type, i);\n                if (void 0 === o) {\n                    return;\n                } else {\n                    n.push(o);\n                }\n            }\n            return n;\n        }\n    } else if (\"NamedType\" === r.kind) {\n        switch(r.name.value){\n            case \"Int\":\n            case \"Float\":\n            case \"String\":\n            case \"Bool\":\n                return r.name.value + \"Value\" === e.kind ? valueFromASTUntyped(e, i) : void 0;\n            default:\n                return valueFromASTUntyped(e, i);\n        }\n    }\n}\n //# sourceMappingURL=graphql.web.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@0no-co/graphql.web/dist/graphql.web.mjs\n");

/***/ })

};
;