"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-from-markdown";
exports.ids = ["vendor-chunks/mdast-util-from-markdown"];
exports.modules = {

/***/ "(ssr)/./node_modules/mdast-util-from-markdown/dist/index.js":
/*!*************************************************************!*\
  !*** ./node_modules/mdast-util-from-markdown/dist/index.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = fromMarkdown;\n// These three are compiled away in the `dist/`\nvar toString = __webpack_require__(/*! mdast-util-to-string */ \"(ssr)/./node_modules/mdast-util-to-string/index.js\");\nvar assign = __webpack_require__(/*! micromark/dist/constant/assign */ \"(ssr)/./node_modules/micromark/dist/constant/assign.js\");\nvar own = __webpack_require__(/*! micromark/dist/constant/has-own-property */ \"(ssr)/./node_modules/micromark/dist/constant/has-own-property.js\");\nvar normalizeIdentifier = __webpack_require__(/*! micromark/dist/util/normalize-identifier */ \"(ssr)/./node_modules/micromark/dist/util/normalize-identifier.js\");\nvar safeFromInt = __webpack_require__(/*! micromark/dist/util/safe-from-int */ \"(ssr)/./node_modules/micromark/dist/util/safe-from-int.js\");\nvar parser = __webpack_require__(/*! micromark/dist/parse */ \"(ssr)/./node_modules/micromark/dist/parse.js\");\nvar preprocessor = __webpack_require__(/*! micromark/dist/preprocess */ \"(ssr)/./node_modules/micromark/dist/preprocess.js\");\nvar postprocess = __webpack_require__(/*! micromark/dist/postprocess */ \"(ssr)/./node_modules/micromark/dist/postprocess.js\");\nvar decode = __webpack_require__(/*! parse-entities/decode-entity */ \"(ssr)/./node_modules/parse-entities/decode-entity.js\");\nvar stringifyPosition = __webpack_require__(/*! unist-util-stringify-position */ \"(ssr)/./node_modules/unist-util-stringify-position/index.js\");\nfunction fromMarkdown(value, encoding, options) {\n    if (typeof encoding !== \"string\") {\n        options = encoding;\n        encoding = undefined;\n    }\n    return compiler(options)(postprocess(parser(options).document().write(preprocessor()(value, encoding, true))));\n}\n// Note this compiler only understand complete buffering, not streaming.\nfunction compiler(options) {\n    var settings = options || {};\n    var config = configure({\n        transforms: [],\n        canContainEols: [\n            \"emphasis\",\n            \"fragment\",\n            \"heading\",\n            \"paragraph\",\n            \"strong\"\n        ],\n        enter: {\n            autolink: opener(link),\n            autolinkProtocol: onenterdata,\n            autolinkEmail: onenterdata,\n            atxHeading: opener(heading),\n            blockQuote: opener(blockQuote),\n            characterEscape: onenterdata,\n            characterReference: onenterdata,\n            codeFenced: opener(codeFlow),\n            codeFencedFenceInfo: buffer,\n            codeFencedFenceMeta: buffer,\n            codeIndented: opener(codeFlow, buffer),\n            codeText: opener(codeText, buffer),\n            codeTextData: onenterdata,\n            data: onenterdata,\n            codeFlowValue: onenterdata,\n            definition: opener(definition),\n            definitionDestinationString: buffer,\n            definitionLabelString: buffer,\n            definitionTitleString: buffer,\n            emphasis: opener(emphasis),\n            hardBreakEscape: opener(hardBreak),\n            hardBreakTrailing: opener(hardBreak),\n            htmlFlow: opener(html, buffer),\n            htmlFlowData: onenterdata,\n            htmlText: opener(html, buffer),\n            htmlTextData: onenterdata,\n            image: opener(image),\n            label: buffer,\n            link: opener(link),\n            listItem: opener(listItem),\n            listItemValue: onenterlistitemvalue,\n            listOrdered: opener(list, onenterlistordered),\n            listUnordered: opener(list),\n            paragraph: opener(paragraph),\n            reference: onenterreference,\n            referenceString: buffer,\n            resourceDestinationString: buffer,\n            resourceTitleString: buffer,\n            setextHeading: opener(heading),\n            strong: opener(strong),\n            thematicBreak: opener(thematicBreak)\n        },\n        exit: {\n            atxHeading: closer(),\n            atxHeadingSequence: onexitatxheadingsequence,\n            autolink: closer(),\n            autolinkEmail: onexitautolinkemail,\n            autolinkProtocol: onexitautolinkprotocol,\n            blockQuote: closer(),\n            characterEscapeValue: onexitdata,\n            characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n            characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n            characterReferenceValue: onexitcharacterreferencevalue,\n            codeFenced: closer(onexitcodefenced),\n            codeFencedFence: onexitcodefencedfence,\n            codeFencedFenceInfo: onexitcodefencedfenceinfo,\n            codeFencedFenceMeta: onexitcodefencedfencemeta,\n            codeFlowValue: onexitdata,\n            codeIndented: closer(onexitcodeindented),\n            codeText: closer(onexitcodetext),\n            codeTextData: onexitdata,\n            data: onexitdata,\n            definition: closer(),\n            definitionDestinationString: onexitdefinitiondestinationstring,\n            definitionLabelString: onexitdefinitionlabelstring,\n            definitionTitleString: onexitdefinitiontitlestring,\n            emphasis: closer(),\n            hardBreakEscape: closer(onexithardbreak),\n            hardBreakTrailing: closer(onexithardbreak),\n            htmlFlow: closer(onexithtmlflow),\n            htmlFlowData: onexitdata,\n            htmlText: closer(onexithtmltext),\n            htmlTextData: onexitdata,\n            image: closer(onexitimage),\n            label: onexitlabel,\n            labelText: onexitlabeltext,\n            lineEnding: onexitlineending,\n            link: closer(onexitlink),\n            listItem: closer(),\n            listOrdered: closer(),\n            listUnordered: closer(),\n            paragraph: closer(),\n            referenceString: onexitreferencestring,\n            resourceDestinationString: onexitresourcedestinationstring,\n            resourceTitleString: onexitresourcetitlestring,\n            resource: onexitresource,\n            setextHeading: closer(onexitsetextheading),\n            setextHeadingLineSequence: onexitsetextheadinglinesequence,\n            setextHeadingText: onexitsetextheadingtext,\n            strong: closer(),\n            thematicBreak: closer()\n        }\n    }, settings.mdastExtensions || []);\n    var data = {};\n    return compile;\n    function compile(events) {\n        var tree = {\n            type: \"root\",\n            children: []\n        };\n        var stack = [\n            tree\n        ];\n        var tokenStack = [];\n        var listStack = [];\n        var index = -1;\n        var handler;\n        var listStart;\n        var context = {\n            stack: stack,\n            tokenStack: tokenStack,\n            config: config,\n            enter: enter,\n            exit: exit,\n            buffer: buffer,\n            resume: resume,\n            setData: setData,\n            getData: getData\n        };\n        while(++index < events.length){\n            // We preprocess lists to add `listItem` tokens, and to infer whether\n            // items the list itself are spread out.\n            if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n                if (events[index][0] === \"enter\") {\n                    listStack.push(index);\n                } else {\n                    listStart = listStack.pop(index);\n                    index = prepareList(events, listStart, index);\n                }\n            }\n        }\n        index = -1;\n        while(++index < events.length){\n            handler = config[events[index][0]];\n            if (own.call(handler, events[index][1].type)) {\n                handler[events[index][1].type].call(assign({\n                    sliceSerialize: events[index][2].sliceSerialize\n                }, context), events[index][1]);\n            }\n        }\n        if (tokenStack.length) {\n            throw new Error(\"Cannot close document, a token (`\" + tokenStack[tokenStack.length - 1].type + \"`, \" + stringifyPosition({\n                start: tokenStack[tokenStack.length - 1].start,\n                end: tokenStack[tokenStack.length - 1].end\n            }) + \") is still open\");\n        }\n        // Figure out `root` position.\n        tree.position = {\n            start: point(events.length ? events[0][1].start : {\n                line: 1,\n                column: 1,\n                offset: 0\n            }),\n            end: point(events.length ? events[events.length - 2][1].end : {\n                line: 1,\n                column: 1,\n                offset: 0\n            })\n        };\n        index = -1;\n        while(++index < config.transforms.length){\n            tree = config.transforms[index](tree) || tree;\n        }\n        return tree;\n    }\n    function prepareList(events, start, length) {\n        var index = start - 1;\n        var containerBalance = -1;\n        var listSpread = false;\n        var listItem;\n        var tailIndex;\n        var lineIndex;\n        var tailEvent;\n        var event;\n        var firstBlankLineIndex;\n        var atMarker;\n        while(++index <= length){\n            event = events[index];\n            if (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\" || event[1].type === \"blockQuote\") {\n                if (event[0] === \"enter\") {\n                    containerBalance++;\n                } else {\n                    containerBalance--;\n                }\n                atMarker = undefined;\n            } else if (event[1].type === \"lineEndingBlank\") {\n                if (event[0] === \"enter\") {\n                    if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                        firstBlankLineIndex = index;\n                    }\n                    atMarker = undefined;\n                }\n            } else if (event[1].type === \"linePrefix\" || event[1].type === \"listItemValue\" || event[1].type === \"listItemMarker\" || event[1].type === \"listItemPrefix\" || event[1].type === \"listItemPrefixWhitespace\") {\n            // Empty.\n            } else {\n                atMarker = undefined;\n            }\n            if (!containerBalance && event[0] === \"enter\" && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === \"exit\" && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n                if (listItem) {\n                    tailIndex = index;\n                    lineIndex = undefined;\n                    while(tailIndex--){\n                        tailEvent = events[tailIndex];\n                        if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n                            if (tailEvent[0] === \"exit\") continue;\n                            if (lineIndex) {\n                                events[lineIndex][1].type = \"lineEndingBlank\";\n                                listSpread = true;\n                            }\n                            tailEvent[1].type = \"lineEnding\";\n                            lineIndex = tailIndex;\n                        } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n                        // Empty\n                        } else {\n                            break;\n                        }\n                    }\n                    if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n                        listItem._spread = true;\n                    }\n                    // Fix position.\n                    listItem.end = point(lineIndex ? events[lineIndex][1].start : event[1].end);\n                    events.splice(lineIndex || index, 0, [\n                        \"exit\",\n                        listItem,\n                        event[2]\n                    ]);\n                    index++;\n                    length++;\n                }\n                // Create a new list item.\n                if (event[1].type === \"listItemPrefix\") {\n                    listItem = {\n                        type: \"listItem\",\n                        _spread: false,\n                        start: point(event[1].start)\n                    };\n                    events.splice(index, 0, [\n                        \"enter\",\n                        listItem,\n                        event[2]\n                    ]);\n                    index++;\n                    length++;\n                    firstBlankLineIndex = undefined;\n                    atMarker = true;\n                }\n            }\n        }\n        events[start][1]._spread = listSpread;\n        return length;\n    }\n    function setData(key, value) {\n        data[key] = value;\n    }\n    function getData(key) {\n        return data[key];\n    }\n    function point(d) {\n        return {\n            line: d.line,\n            column: d.column,\n            offset: d.offset\n        };\n    }\n    function opener(create, and) {\n        return open;\n        function open(token) {\n            enter.call(this, create(token), token);\n            if (and) and.call(this, token);\n        }\n    }\n    function buffer() {\n        this.stack.push({\n            type: \"fragment\",\n            children: []\n        });\n    }\n    function enter(node, token) {\n        this.stack[this.stack.length - 1].children.push(node);\n        this.stack.push(node);\n        this.tokenStack.push(token);\n        node.position = {\n            start: point(token.start)\n        };\n        return node;\n    }\n    function closer(and) {\n        return close;\n        function close(token) {\n            if (and) and.call(this, token);\n            exit.call(this, token);\n        }\n    }\n    function exit(token) {\n        var node = this.stack.pop();\n        var open = this.tokenStack.pop();\n        if (!open) {\n            throw new Error(\"Cannot close `\" + token.type + \"` (\" + stringifyPosition({\n                start: token.start,\n                end: token.end\n            }) + \"): it’s not open\");\n        } else if (open.type !== token.type) {\n            throw new Error(\"Cannot close `\" + token.type + \"` (\" + stringifyPosition({\n                start: token.start,\n                end: token.end\n            }) + \"): a different token (`\" + open.type + \"`, \" + stringifyPosition({\n                start: open.start,\n                end: open.end\n            }) + \") is open\");\n        }\n        node.position.end = point(token.end);\n        return node;\n    }\n    function resume() {\n        return toString(this.stack.pop());\n    }\n    //\n    // Handlers.\n    //\n    function onenterlistordered() {\n        setData(\"expectingFirstListItemValue\", true);\n    }\n    function onenterlistitemvalue(token) {\n        if (getData(\"expectingFirstListItemValue\")) {\n            this.stack[this.stack.length - 2].start = parseInt(this.sliceSerialize(token), 10);\n            setData(\"expectingFirstListItemValue\");\n        }\n    }\n    function onexitcodefencedfenceinfo() {\n        var data = this.resume();\n        this.stack[this.stack.length - 1].lang = data;\n    }\n    function onexitcodefencedfencemeta() {\n        var data = this.resume();\n        this.stack[this.stack.length - 1].meta = data;\n    }\n    function onexitcodefencedfence() {\n        // Exit if this is the closing fence.\n        if (getData(\"flowCodeInside\")) return;\n        this.buffer();\n        setData(\"flowCodeInside\", true);\n    }\n    function onexitcodefenced() {\n        var data = this.resume();\n        this.stack[this.stack.length - 1].value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, \"\");\n        setData(\"flowCodeInside\");\n    }\n    function onexitcodeindented() {\n        var data = this.resume();\n        this.stack[this.stack.length - 1].value = data;\n    }\n    function onexitdefinitionlabelstring(token) {\n        // Discard label, use the source content instead.\n        var label = this.resume();\n        this.stack[this.stack.length - 1].label = label;\n        this.stack[this.stack.length - 1].identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    }\n    function onexitdefinitiontitlestring() {\n        var data = this.resume();\n        this.stack[this.stack.length - 1].title = data;\n    }\n    function onexitdefinitiondestinationstring() {\n        var data = this.resume();\n        this.stack[this.stack.length - 1].url = data;\n    }\n    function onexitatxheadingsequence(token) {\n        if (!this.stack[this.stack.length - 1].depth) {\n            this.stack[this.stack.length - 1].depth = this.sliceSerialize(token).length;\n        }\n    }\n    function onexitsetextheadingtext() {\n        setData(\"setextHeadingSlurpLineEnding\", true);\n    }\n    function onexitsetextheadinglinesequence(token) {\n        this.stack[this.stack.length - 1].depth = this.sliceSerialize(token).charCodeAt(0) === 61 ? 1 : 2;\n    }\n    function onexitsetextheading() {\n        setData(\"setextHeadingSlurpLineEnding\");\n    }\n    function onenterdata(token) {\n        var siblings = this.stack[this.stack.length - 1].children;\n        var tail = siblings[siblings.length - 1];\n        if (!tail || tail.type !== \"text\") {\n            // Add a new text node.\n            tail = text();\n            tail.position = {\n                start: point(token.start)\n            };\n            this.stack[this.stack.length - 1].children.push(tail);\n        }\n        this.stack.push(tail);\n    }\n    function onexitdata(token) {\n        var tail = this.stack.pop();\n        tail.value += this.sliceSerialize(token);\n        tail.position.end = point(token.end);\n    }\n    function onexitlineending(token) {\n        var context = this.stack[this.stack.length - 1];\n        // If we’re at a hard break, include the line ending in there.\n        if (getData(\"atHardBreak\")) {\n            context.children[context.children.length - 1].position.end = point(token.end);\n            setData(\"atHardBreak\");\n            return;\n        }\n        if (!getData(\"setextHeadingSlurpLineEnding\") && config.canContainEols.indexOf(context.type) > -1) {\n            onenterdata.call(this, token);\n            onexitdata.call(this, token);\n        }\n    }\n    function onexithardbreak() {\n        setData(\"atHardBreak\", true);\n    }\n    function onexithtmlflow() {\n        var data = this.resume();\n        this.stack[this.stack.length - 1].value = data;\n    }\n    function onexithtmltext() {\n        var data = this.resume();\n        this.stack[this.stack.length - 1].value = data;\n    }\n    function onexitcodetext() {\n        var data = this.resume();\n        this.stack[this.stack.length - 1].value = data;\n    }\n    function onexitlink() {\n        var context = this.stack[this.stack.length - 1];\n        // To do: clean.\n        if (getData(\"inReference\")) {\n            context.type += \"Reference\";\n            context.referenceType = getData(\"referenceType\") || \"shortcut\";\n            delete context.url;\n            delete context.title;\n        } else {\n            delete context.identifier;\n            delete context.label;\n            delete context.referenceType;\n        }\n        setData(\"referenceType\");\n    }\n    function onexitimage() {\n        var context = this.stack[this.stack.length - 1];\n        // To do: clean.\n        if (getData(\"inReference\")) {\n            context.type += \"Reference\";\n            context.referenceType = getData(\"referenceType\") || \"shortcut\";\n            delete context.url;\n            delete context.title;\n        } else {\n            delete context.identifier;\n            delete context.label;\n            delete context.referenceType;\n        }\n        setData(\"referenceType\");\n    }\n    function onexitlabeltext(token) {\n        this.stack[this.stack.length - 2].identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    }\n    function onexitlabel() {\n        var fragment = this.stack[this.stack.length - 1];\n        var value = this.resume();\n        this.stack[this.stack.length - 1].label = value;\n        // Assume a reference.\n        setData(\"inReference\", true);\n        if (this.stack[this.stack.length - 1].type === \"link\") {\n            this.stack[this.stack.length - 1].children = fragment.children;\n        } else {\n            this.stack[this.stack.length - 1].alt = value;\n        }\n    }\n    function onexitresourcedestinationstring() {\n        var data = this.resume();\n        this.stack[this.stack.length - 1].url = data;\n    }\n    function onexitresourcetitlestring() {\n        var data = this.resume();\n        this.stack[this.stack.length - 1].title = data;\n    }\n    function onexitresource() {\n        setData(\"inReference\");\n    }\n    function onenterreference() {\n        setData(\"referenceType\", \"collapsed\");\n    }\n    function onexitreferencestring(token) {\n        var label = this.resume();\n        this.stack[this.stack.length - 1].label = label;\n        this.stack[this.stack.length - 1].identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n        setData(\"referenceType\", \"full\");\n    }\n    function onexitcharacterreferencemarker(token) {\n        setData(\"characterReferenceType\", token.type);\n    }\n    function onexitcharacterreferencevalue(token) {\n        var data = this.sliceSerialize(token);\n        var type = getData(\"characterReferenceType\");\n        var value;\n        var tail;\n        if (type) {\n            value = safeFromInt(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n            setData(\"characterReferenceType\");\n        } else {\n            value = decode(data);\n        }\n        tail = this.stack.pop();\n        tail.value += value;\n        tail.position.end = point(token.end);\n    }\n    function onexitautolinkprotocol(token) {\n        onexitdata.call(this, token);\n        this.stack[this.stack.length - 1].url = this.sliceSerialize(token);\n    }\n    function onexitautolinkemail(token) {\n        onexitdata.call(this, token);\n        this.stack[this.stack.length - 1].url = \"mailto:\" + this.sliceSerialize(token);\n    }\n    //\n    // Creaters.\n    //\n    function blockQuote() {\n        return {\n            type: \"blockquote\",\n            children: []\n        };\n    }\n    function codeFlow() {\n        return {\n            type: \"code\",\n            lang: null,\n            meta: null,\n            value: \"\"\n        };\n    }\n    function codeText() {\n        return {\n            type: \"inlineCode\",\n            value: \"\"\n        };\n    }\n    function definition() {\n        return {\n            type: \"definition\",\n            identifier: \"\",\n            label: null,\n            title: null,\n            url: \"\"\n        };\n    }\n    function emphasis() {\n        return {\n            type: \"emphasis\",\n            children: []\n        };\n    }\n    function heading() {\n        return {\n            type: \"heading\",\n            depth: undefined,\n            children: []\n        };\n    }\n    function hardBreak() {\n        return {\n            type: \"break\"\n        };\n    }\n    function html() {\n        return {\n            type: \"html\",\n            value: \"\"\n        };\n    }\n    function image() {\n        return {\n            type: \"image\",\n            title: null,\n            url: \"\",\n            alt: null\n        };\n    }\n    function link() {\n        return {\n            type: \"link\",\n            title: null,\n            url: \"\",\n            children: []\n        };\n    }\n    function list(token) {\n        return {\n            type: \"list\",\n            ordered: token.type === \"listOrdered\",\n            start: null,\n            spread: token._spread,\n            children: []\n        };\n    }\n    function listItem(token) {\n        return {\n            type: \"listItem\",\n            spread: token._spread,\n            checked: null,\n            children: []\n        };\n    }\n    function paragraph() {\n        return {\n            type: \"paragraph\",\n            children: []\n        };\n    }\n    function strong() {\n        return {\n            type: \"strong\",\n            children: []\n        };\n    }\n    function text() {\n        return {\n            type: \"text\",\n            value: \"\"\n        };\n    }\n    function thematicBreak() {\n        return {\n            type: \"thematicBreak\"\n        };\n    }\n}\nfunction configure(config, extensions) {\n    var index = -1;\n    while(++index < extensions.length){\n        extension(config, extensions[index]);\n    }\n    return config;\n}\nfunction extension(config, extension) {\n    var key;\n    var left;\n    for(key in extension){\n        left = own.call(config, key) ? config[key] : config[key] = {};\n        if (key === \"canContainEols\" || key === \"transforms\") {\n            config[key] = [].concat(left, extension[key]);\n        } else {\n            Object.assign(left, extension[key]);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mdast-util-from-markdown/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/mdast-util-from-markdown/index.js":
/*!********************************************************!*\
  !*** ./node_modules/mdast-util-from-markdown/index.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./dist */ \"(ssr)/./node_modules/mdast-util-from-markdown/dist/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvbWRhc3QtdXRpbC1mcm9tLW1hcmtkb3duL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLGlIQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL0BrZXlzdGF0aWMvdGVtcGxhdGVzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9tZGFzdC11dGlsLWZyb20tbWFya2Rvd24vaW5kZXguanM/OTVjYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Rpc3QnKVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mdast-util-from-markdown/index.js\n");

/***/ })

};
;