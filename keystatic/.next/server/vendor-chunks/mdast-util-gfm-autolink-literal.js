/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/mdast-util-gfm-autolink-literal";
exports.ids = ["vendor-chunks/mdast-util-gfm-autolink-literal"];
exports.modules = {

/***/ "(ssr)/./node_modules/mdast-util-gfm-autolink-literal/from-markdown.js":
/*!***********************************************************************!*\
  !*** ./node_modules/mdast-util-gfm-autolink-literal/from-markdown.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("var ccount = __webpack_require__(/*! ccount */ \"(ssr)/./node_modules/ccount/index.js\");\nvar findAndReplace = __webpack_require__(/*! mdast-util-find-and-replace */ \"(ssr)/./node_modules/mdast-util-find-and-replace/index.js\");\nvar unicodePunctuation = __webpack_require__(/*! micromark/dist/character/unicode-punctuation */ \"(ssr)/./node_modules/micromark/dist/character/unicode-punctuation.js\");\nvar unicodeWhitespace = __webpack_require__(/*! micromark/dist/character/unicode-whitespace */ \"(ssr)/./node_modules/micromark/dist/character/unicode-whitespace.js\");\nexports.transforms = [\n    transformGfmAutolinkLiterals\n];\nexports.enter = {\n    literalAutolink: enterLiteralAutolink,\n    literalAutolinkEmail: enterLiteralAutolinkValue,\n    literalAutolinkHttp: enterLiteralAutolinkValue,\n    literalAutolinkWww: enterLiteralAutolinkValue\n};\nexports.exit = {\n    literalAutolink: exitLiteralAutolink,\n    literalAutolinkEmail: exitLiteralAutolinkEmail,\n    literalAutolinkHttp: exitLiteralAutolinkHttp,\n    literalAutolinkWww: exitLiteralAutolinkWww\n};\nfunction enterLiteralAutolink(token) {\n    this.enter({\n        type: \"link\",\n        title: null,\n        url: \"\",\n        children: []\n    }, token);\n}\nfunction enterLiteralAutolinkValue(token) {\n    this.config.enter.autolinkProtocol.call(this, token);\n}\nfunction exitLiteralAutolinkHttp(token) {\n    this.config.exit.autolinkProtocol.call(this, token);\n}\nfunction exitLiteralAutolinkWww(token) {\n    this.config.exit.data.call(this, token);\n    this.stack[this.stack.length - 1].url = \"http://\" + this.sliceSerialize(token);\n}\nfunction exitLiteralAutolinkEmail(token) {\n    this.config.exit.autolinkEmail.call(this, token);\n}\nfunction exitLiteralAutolink(token) {\n    this.exit(token);\n}\nfunction transformGfmAutolinkLiterals(tree) {\n    findAndReplace(tree, [\n        [\n            /(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/i,\n            findUrl\n        ],\n        [\n            /([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/,\n            findEmail\n        ]\n    ], {\n        ignore: [\n            \"link\",\n            \"linkReference\"\n        ]\n    });\n}\nfunction findUrl($0, protocol, domain, path, match) {\n    var prefix = \"\";\n    var parts;\n    var result;\n    // Not an expected previous character.\n    if (!previous(match)) {\n        return false;\n    }\n    // Treat `www` as part of the domain.\n    if (/^w/i.test(protocol)) {\n        domain = protocol + domain;\n        protocol = \"\";\n        prefix = \"http://\";\n    }\n    if (!isCorrectDomain(domain)) {\n        return false;\n    }\n    parts = splitUrl(domain + path);\n    if (!parts[0]) return false;\n    result = {\n        type: \"link\",\n        title: null,\n        url: prefix + protocol + parts[0],\n        children: [\n            {\n                type: \"text\",\n                value: protocol + parts[0]\n            }\n        ]\n    };\n    if (parts[1]) {\n        result = [\n            result,\n            {\n                type: \"text\",\n                value: parts[1]\n            }\n        ];\n    }\n    return result;\n}\nfunction findEmail($0, atext, label, match) {\n    // Not an expected previous character.\n    if (!previous(match, true) || /[_-]$/.test(label)) {\n        return false;\n    }\n    return {\n        type: \"link\",\n        title: null,\n        url: \"mailto:\" + atext + \"@\" + label,\n        children: [\n            {\n                type: \"text\",\n                value: atext + \"@\" + label\n            }\n        ]\n    };\n}\nfunction isCorrectDomain(domain) {\n    var parts = domain.split(\".\");\n    if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 2]))) {\n        return false;\n    }\n    return true;\n}\nfunction splitUrl(url) {\n    var trail = /[!\"&'),.:;<>?\\]}]+$/.exec(url);\n    var closingParenIndex;\n    var openingParens;\n    var closingParens;\n    if (trail) {\n        url = url.slice(0, trail.index);\n        trail = trail[0];\n        closingParenIndex = trail.indexOf(\")\");\n        openingParens = ccount(url, \"(\");\n        closingParens = ccount(url, \")\");\n        while(closingParenIndex !== -1 && openingParens > closingParens){\n            url += trail.slice(0, closingParenIndex + 1);\n            trail = trail.slice(closingParenIndex + 1);\n            closingParenIndex = trail.indexOf(\")\");\n            closingParens++;\n        }\n    }\n    return [\n        url,\n        trail\n    ];\n}\nfunction previous(match, email) {\n    var code = match.input.charCodeAt(match.index - 1);\n    return (code !== code || unicodeWhitespace(code) || unicodePunctuation(code)) && (!email || code !== 47);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/mdast-util-gfm-autolink-literal/from-markdown.js\n");

/***/ })

};
;