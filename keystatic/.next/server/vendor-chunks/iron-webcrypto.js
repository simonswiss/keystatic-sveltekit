"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/iron-webcrypto";
exports.ids = ["vendor-chunks/iron-webcrypto"];
exports.modules = {

/***/ "(rsc)/./node_modules/iron-webcrypto/dist/index.js":
/*!***************************************************!*\
  !*** ./node_modules/iron-webcrypto/dist/index.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   algorithms: () => (/* binding */ algorithms),\n/* harmony export */   base64urlDecode: () => (/* binding */ base64urlDecode),\n/* harmony export */   base64urlEncode: () => (/* binding */ base64urlEncode),\n/* harmony export */   bufferToString: () => (/* binding */ bufferToString),\n/* harmony export */   clone: () => (/* binding */ clone),\n/* harmony export */   decrypt: () => (/* binding */ decrypt),\n/* harmony export */   defaults: () => (/* binding */ defaults),\n/* harmony export */   encrypt: () => (/* binding */ encrypt),\n/* harmony export */   generateKey: () => (/* binding */ generateKey),\n/* harmony export */   hmacWithPassword: () => (/* binding */ hmacWithPassword),\n/* harmony export */   macFormatVersion: () => (/* binding */ macFormatVersion),\n/* harmony export */   macPrefix: () => (/* binding */ macPrefix),\n/* harmony export */   randomBits: () => (/* binding */ randomBits),\n/* harmony export */   seal: () => (/* binding */ seal),\n/* harmony export */   stringToBuffer: () => (/* binding */ stringToBuffer),\n/* harmony export */   unseal: () => (/* binding */ unseal)\n/* harmony export */ });\n// node_modules/.pnpm/@smithy+util-base64@2.0.0/node_modules/@smithy/util-base64/dist-es/constants.browser.js\nvar alphabetByEncoding = {};\nvar alphabetByValue = new Array(64);\nfor(let i = 0, start = \"A\".charCodeAt(0), limit = \"Z\".charCodeAt(0); i + start <= limit; i++){\n    const char = String.fromCharCode(i + start);\n    alphabetByEncoding[char] = i;\n    alphabetByValue[i] = char;\n}\nfor(let i = 0, start = \"a\".charCodeAt(0), limit = \"z\".charCodeAt(0); i + start <= limit; i++){\n    const char = String.fromCharCode(i + start);\n    const index = i + 26;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nfor(let i = 0; i < 10; i++){\n    alphabetByEncoding[i.toString(10)] = i + 52;\n    const char = i.toString(10);\n    const index = i + 52;\n    alphabetByEncoding[char] = index;\n    alphabetByValue[index] = char;\n}\nalphabetByEncoding[\"+\"] = 62;\nalphabetByValue[62] = \"+\";\nalphabetByEncoding[\"/\"] = 63;\nalphabetByValue[63] = \"/\";\nvar bitsPerLetter = 6;\nvar bitsPerByte = 8;\nvar maxLetterValue = 63;\n// node_modules/.pnpm/@smithy+util-base64@2.0.0/node_modules/@smithy/util-base64/dist-es/fromBase64.browser.js\nvar fromBase64 = (input)=>{\n    let totalByteLength = input.length / 4 * 3;\n    if (input.slice(-2) === \"==\") {\n        totalByteLength -= 2;\n    } else if (input.slice(-1) === \"=\") {\n        totalByteLength--;\n    }\n    const out = new ArrayBuffer(totalByteLength);\n    const dataView = new DataView(out);\n    for(let i = 0; i < input.length; i += 4){\n        let bits = 0;\n        let bitLength = 0;\n        for(let j = i, limit = i + 3; j <= limit; j++){\n            if (input[j] !== \"=\") {\n                if (!(input[j] in alphabetByEncoding)) {\n                    throw new TypeError(`Invalid character ${input[j]} in base64 string.`);\n                }\n                bits |= alphabetByEncoding[input[j]] << (limit - j) * bitsPerLetter;\n                bitLength += bitsPerLetter;\n            } else {\n                bits >>= bitsPerLetter;\n            }\n        }\n        const chunkOffset = i / 4 * 3;\n        bits >>= bitLength % bitsPerByte;\n        const byteLength = Math.floor(bitLength / bitsPerByte);\n        for(let k = 0; k < byteLength; k++){\n            const offset = (byteLength - k - 1) * bitsPerByte;\n            dataView.setUint8(chunkOffset + k, (bits & 255 << offset) >> offset);\n        }\n    }\n    return new Uint8Array(out);\n};\n// node_modules/.pnpm/@smithy+util-base64@2.0.0/node_modules/@smithy/util-base64/dist-es/toBase64.browser.js\nfunction toBase64(input) {\n    let str = \"\";\n    for(let i = 0; i < input.length; i += 3){\n        let bits = 0;\n        let bitLength = 0;\n        for(let j = i, limit = Math.min(i + 3, input.length); j < limit; j++){\n            bits |= input[j] << (limit - j - 1) * bitsPerByte;\n            bitLength += bitsPerByte;\n        }\n        const bitClusterCount = Math.ceil(bitLength / bitsPerLetter);\n        bits <<= bitClusterCount * bitsPerLetter - bitLength;\n        for(let k = 1; k <= bitClusterCount; k++){\n            const offset = (bitClusterCount - k) * bitsPerLetter;\n            str += alphabetByValue[(bits & maxLetterValue << offset) >> offset];\n        }\n        str += \"==\".slice(0, 4 - bitClusterCount);\n    }\n    return str;\n}\n// src/index.ts\nvar stringToBuffer = (value)=>{\n    return new TextEncoder().encode(value);\n};\nvar bufferToString = (value)=>{\n    return new TextDecoder().decode(value);\n};\nvar base64urlEncode = (value)=>toBase64(typeof value === \"string\" ? stringToBuffer(value) : value).replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\nvar base64urlDecode = (value)=>fromBase64(value.replace(/-/g, \"+\").replace(/_/g, \"/\") + Array((4 - value.length % 4) % 4 + 1).join(\"=\"));\nvar defaults = {\n    encryption: {\n        saltBits: 256,\n        algorithm: \"aes-256-cbc\",\n        iterations: 1,\n        minPasswordlength: 32\n    },\n    integrity: {\n        saltBits: 256,\n        algorithm: \"sha256\",\n        iterations: 1,\n        minPasswordlength: 32\n    },\n    ttl: 0,\n    timestampSkewSec: 60,\n    localtimeOffsetMsec: 0\n};\nvar clone = (options)=>({\n        ...options,\n        encryption: {\n            ...options.encryption\n        },\n        integrity: {\n            ...options.integrity\n        }\n    });\nvar algorithms = {\n    \"aes-128-ctr\": {\n        keyBits: 128,\n        ivBits: 128,\n        name: \"AES-CTR\"\n    },\n    \"aes-256-cbc\": {\n        keyBits: 256,\n        ivBits: 128,\n        name: \"AES-CBC\"\n    },\n    sha256: {\n        keyBits: 256,\n        name: \"SHA-256\"\n    }\n};\nvar macFormatVersion = \"2\";\nvar macPrefix = `Fe26.${macFormatVersion}`;\nvar randomBytes = (_crypto, size)=>{\n    const bytes = new Uint8Array(size);\n    _crypto.getRandomValues(bytes);\n    return bytes;\n};\nvar randomBits = (_crypto, bits)=>{\n    if (bits < 1) throw Error(\"Invalid random bits count\");\n    const bytes = Math.ceil(bits / 8);\n    return randomBytes(_crypto, bytes);\n};\nvar pbkdf2 = async (_crypto, password, salt, iterations, keyLength, hash)=>{\n    const passwordBuffer = stringToBuffer(password);\n    const importedKey = await _crypto.subtle.importKey(\"raw\", passwordBuffer, \"PBKDF2\", false, [\n        \"deriveBits\"\n    ]);\n    const saltBuffer = stringToBuffer(salt);\n    const params = {\n        name: \"PBKDF2\",\n        hash,\n        salt: saltBuffer,\n        iterations\n    };\n    const derivation = await _crypto.subtle.deriveBits(params, importedKey, keyLength * 8);\n    return derivation;\n};\nvar generateKey = async (_crypto, password, options)=>{\n    if (!password?.length) throw new Error(\"Empty password\");\n    if (options == null || typeof options !== \"object\") throw new Error(\"Bad options\");\n    if (!(options.algorithm in algorithms)) throw new Error(`Unknown algorithm: ${options.algorithm}`);\n    const algorithm = algorithms[options.algorithm];\n    const result = {};\n    const hmac = options.hmac ?? false;\n    const id = hmac ? {\n        name: \"HMAC\",\n        hash: algorithm.name\n    } : {\n        name: algorithm.name\n    };\n    const usage = hmac ? [\n        \"sign\",\n        \"verify\"\n    ] : [\n        \"encrypt\",\n        \"decrypt\"\n    ];\n    if (typeof password === \"string\") {\n        if (password.length < options.minPasswordlength) throw new Error(`Password string too short (min ${options.minPasswordlength} characters required)`);\n        let { salt = \"\" } = options;\n        if (!salt) {\n            const { saltBits = 0 } = options;\n            if (!saltBits) throw new Error(\"Missing salt and saltBits options\");\n            const randomSalt = randomBits(_crypto, saltBits);\n            salt = [\n                ...new Uint8Array(randomSalt)\n            ].map((x)=>x.toString(16).padStart(2, \"0\")).join(\"\");\n        }\n        const derivedKey = await pbkdf2(_crypto, password, salt, options.iterations, algorithm.keyBits / 8, \"SHA-1\");\n        const importedEncryptionKey = await _crypto.subtle.importKey(\"raw\", derivedKey, id, false, usage);\n        result.key = importedEncryptionKey;\n        result.salt = salt;\n    } else {\n        if (password.length < algorithm.keyBits / 8) throw new Error(\"Key buffer (password) too small\");\n        result.key = await _crypto.subtle.importKey(\"raw\", password, id, false, usage);\n        result.salt = \"\";\n    }\n    if (options.iv) result.iv = options.iv;\n    else if (\"ivBits\" in algorithm) result.iv = randomBits(_crypto, algorithm.ivBits);\n    return result;\n};\nvar encrypt = async (_crypto, password, options, data)=>{\n    const key = await generateKey(_crypto, password, options);\n    const textBuffer = stringToBuffer(data);\n    const encrypted = await _crypto.subtle.encrypt({\n        name: algorithms[options.algorithm].name,\n        iv: key.iv\n    }, key.key, textBuffer);\n    return {\n        encrypted: new Uint8Array(encrypted),\n        key\n    };\n};\nvar decrypt = async (_crypto, password, options, data)=>{\n    const key = await generateKey(_crypto, password, options);\n    const decrypted = await _crypto.subtle.decrypt({\n        name: algorithms[options.algorithm].name,\n        iv: key.iv\n    }, key.key, typeof data === \"string\" ? stringToBuffer(data) : data);\n    return bufferToString(new Uint8Array(decrypted));\n};\nvar hmacWithPassword = async (_crypto, password, options, data)=>{\n    const key = await generateKey(_crypto, password, {\n        ...options,\n        hmac: true\n    });\n    const textBuffer = stringToBuffer(data);\n    const signed = await _crypto.subtle.sign({\n        name: \"HMAC\"\n    }, key.key, textBuffer);\n    const digest = base64urlEncode(new Uint8Array(signed));\n    return {\n        digest,\n        salt: key.salt\n    };\n};\nvar normalizePassword = (password)=>{\n    if (typeof password === \"string\" || password instanceof Uint8Array) return {\n        encryption: password,\n        integrity: password\n    };\n    if (\"secret\" in password) return {\n        id: password.id,\n        encryption: password.secret,\n        integrity: password.secret\n    };\n    return {\n        id: password.id,\n        encryption: password.encryption,\n        integrity: password.integrity\n    };\n};\nvar seal = async (_crypto, object, password, options)=>{\n    if (!password) throw Error(\"Empty password\");\n    const opts = clone(options);\n    const now = Date.now() + (opts.localtimeOffsetMsec || 0);\n    const objectString = JSON.stringify(object);\n    const pass = normalizePassword(password);\n    const { id = \"\" } = pass;\n    if (id && !/^\\w+$/.test(id)) throw new Error(\"Invalid password id\");\n    const { encrypted, key } = await encrypt(_crypto, pass.encryption, opts.encryption, objectString);\n    const encryptedB64 = base64urlEncode(new Uint8Array(encrypted));\n    const iv = base64urlEncode(key.iv);\n    const expiration = opts.ttl ? now + opts.ttl : \"\";\n    const macBaseString = `${macPrefix}*${id}*${key.salt}*${iv}*${encryptedB64}*${expiration}`;\n    const mac = await hmacWithPassword(_crypto, pass.integrity, opts.integrity, macBaseString);\n    const sealed = `${macBaseString}*${mac.salt}*${mac.digest}`;\n    return sealed;\n};\nvar fixedTimeComparison = (a, b)=>{\n    let mismatch = a.length === b.length ? 0 : 1;\n    if (mismatch) b = a;\n    for(let i = 0; i < a.length; i += 1)mismatch |= a.charCodeAt(i) ^ b.charCodeAt(i);\n    return mismatch === 0;\n};\nvar unseal = async (_crypto, sealed, password, options)=>{\n    if (!password) throw Error(\"Empty password\");\n    const opts = clone(options);\n    const now = Date.now() + (opts.localtimeOffsetMsec || 0);\n    const parts = sealed.split(\"*\");\n    if (parts.length !== 8) throw new Error(\"Incorrect number of sealed components\");\n    const prefix = parts[0];\n    let passwordId = parts[1];\n    const encryptionSalt = parts[2];\n    const encryptionIv = parts[3];\n    const encryptedB64 = parts[4];\n    const expiration = parts[5];\n    const hmacSalt = parts[6];\n    const hmac = parts[7];\n    const macBaseString = `${prefix}*${passwordId}*${encryptionSalt}*${encryptionIv}*${encryptedB64}*${expiration}`;\n    if (macPrefix !== prefix) throw new Error(\"Wrong mac prefix\");\n    if (expiration) {\n        if (!/^\\d+$/.exec(expiration)) throw new Error(\"Invalid expiration\");\n        const exp = parseInt(expiration, 10);\n        if (exp <= now - opts.timestampSkewSec * 1e3) throw new Error(\"Expired seal\");\n    }\n    if (typeof password === \"undefined\" || typeof password === \"string\" && password.length === 0) throw new Error(\"Empty password\");\n    let pass = \"\";\n    passwordId = passwordId || \"default\";\n    if (typeof password === \"string\" || password instanceof Uint8Array) pass = password;\n    else if (!(passwordId in password)) throw new Error(`Cannot find password: ${passwordId}`);\n    else pass = password[passwordId];\n    pass = normalizePassword(pass);\n    const macOptions = opts.integrity;\n    macOptions.salt = hmacSalt;\n    const mac = await hmacWithPassword(_crypto, pass.integrity, macOptions, macBaseString);\n    if (!fixedTimeComparison(mac.digest, hmac)) throw new Error(\"Bad hmac value\");\n    const encrypted = base64urlDecode(encryptedB64);\n    const decryptOptions = opts.encryption;\n    decryptOptions.salt = encryptionSalt;\n    decryptOptions.iv = base64urlDecode(encryptionIv);\n    const decrypted = await decrypt(_crypto, pass.encryption, decryptOptions, encrypted);\n    if (decrypted) return JSON.parse(decrypted);\n    return null;\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaXJvbi13ZWJjcnlwdG8vZGlzdC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQUEsNkdBQTZHO0FBQzdHLElBQUlBLHFCQUFxQixDQUFDO0FBQzFCLElBQUlDLGtCQUFrQixJQUFJQyxNQUFNO0FBQ2hDLElBQUssSUFBSUMsSUFBSSxHQUFHQyxRQUFRLElBQUlDLFVBQVUsQ0FBQyxJQUFJQyxRQUFRLElBQUlELFVBQVUsQ0FBQyxJQUFJRixJQUFJQyxTQUFTRSxPQUFPSCxJQUFLO0lBQzdGLE1BQU1JLE9BQU9DLE9BQU9DLFlBQVksQ0FBQ04sSUFBSUM7SUFDckNKLGtCQUFrQixDQUFDTyxLQUFLLEdBQUdKO0lBQzNCRixlQUFlLENBQUNFLEVBQUUsR0FBR0k7QUFDdkI7QUFDQSxJQUFLLElBQUlKLElBQUksR0FBR0MsUUFBUSxJQUFJQyxVQUFVLENBQUMsSUFBSUMsUUFBUSxJQUFJRCxVQUFVLENBQUMsSUFBSUYsSUFBSUMsU0FBU0UsT0FBT0gsSUFBSztJQUM3RixNQUFNSSxPQUFPQyxPQUFPQyxZQUFZLENBQUNOLElBQUlDO0lBQ3JDLE1BQU1NLFFBQVFQLElBQUk7SUFDbEJILGtCQUFrQixDQUFDTyxLQUFLLEdBQUdHO0lBQzNCVCxlQUFlLENBQUNTLE1BQU0sR0FBR0g7QUFDM0I7QUFDQSxJQUFLLElBQUlKLElBQUksR0FBR0EsSUFBSSxJQUFJQSxJQUFLO0lBQzNCSCxrQkFBa0IsQ0FBQ0csRUFBRVEsUUFBUSxDQUFDLElBQUksR0FBR1IsSUFBSTtJQUN6QyxNQUFNSSxPQUFPSixFQUFFUSxRQUFRLENBQUM7SUFDeEIsTUFBTUQsUUFBUVAsSUFBSTtJQUNsQkgsa0JBQWtCLENBQUNPLEtBQUssR0FBR0c7SUFDM0JULGVBQWUsQ0FBQ1MsTUFBTSxHQUFHSDtBQUMzQjtBQUNBUCxrQkFBa0IsQ0FBQyxJQUFJLEdBQUc7QUFDMUJDLGVBQWUsQ0FBQyxHQUFHLEdBQUc7QUFDdEJELGtCQUFr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QUFNLElBQUkyRCxNQUFNO0lBQ2xCLElBQUkrQyxPQUFPO0lBQ1hlLGFBQWFBLGNBQWM7SUFDM0IsSUFBSSxPQUFPNUQsYUFBYSxZQUFZQSxvQkFBb0I1QyxZQUN0RHlGLE9BQU83QztTQUNKLElBQUksQ0FBRTRELENBQUFBLGNBQWM1RCxRQUFPLEdBQzlCLE1BQU0sSUFBSUYsTUFBTSxDQUFDLHNCQUFzQixFQUFFOEQsV0FBVyxDQUFDO1NBRXJEZixPQUFPN0MsUUFBUSxDQUFDNEQsV0FBVztJQUM3QmYsT0FBT1Ysa0JBQWtCVTtJQUN6QixNQUFNc0IsYUFBYTVCLEtBQUs1RCxTQUFTO0lBQ2pDd0YsV0FBV2xFLElBQUksR0FBRzhEO0lBQ2xCLE1BQU1iLE1BQU0sTUFBTW5CLGlCQUFpQnRDLFNBQVNvRCxLQUFLbEUsU0FBUyxFQUFFd0YsWUFBWWxCO0lBQ3hFLElBQUksQ0FBQ0csb0JBQW9CRixJQUFJaEIsTUFBTSxFQUFFcEIsT0FDbkMsTUFBTSxJQUFJaEIsTUFBTTtJQUNsQixNQUFNOEIsWUFBWXpELGdCQUFnQjRFO0lBQ2xDLE1BQU1xQixpQkFBaUI3QixLQUFLakUsVUFBVTtJQUN0QzhGLGVBQWVuRSxJQUFJLEdBQUc0RDtJQUN0Qk8sZUFBZTVDLEVBQUUsR0FBR3JELGdCQUFnQjJGO0lBQ3BDLE1BQU1oQyxZQUFZLE1BQU1ELFFBQVFwQyxTQUFTb0QsS0FBS3ZFLFVBQVUsRUFBRThGLGdCQUFnQnhDO0lBQzFFLElBQUlFLFdBQ0YsT0FBT2EsS0FBSzBCLEtBQUssQ0FBQ3ZDO0lBQ3BCLE9BQU87QUFDVDtBQUVpTiIsInNvdXJjZXMiOlsid2VicGFjazovL0BrZXlzdGF0aWMvdGVtcGxhdGVzLW5leHRqcy8uL25vZGVfbW9kdWxlcy9pcm9uLXdlYmNyeXB0by9kaXN0L2luZGV4LmpzPzY1MDMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gbm9kZV9tb2R1bGVzLy5wbnBtL0BzbWl0aHkrdXRpbC1iYXNlNjRAMi4wLjAvbm9kZV9tb2R1bGVzL0BzbWl0aHkvdXRpbC1iYXNlNjQvZGlzdC1lcy9jb25zdGFudHMuYnJvd3Nlci5qc1xudmFyIGFscGhhYmV0QnlFbmNvZGluZyA9IHt9O1xudmFyIGFscGhhYmV0QnlWYWx1ZSA9IG5ldyBBcnJheSg2NCk7XG5mb3IgKGxldCBpID0gMCwgc3RhcnQgPSBcIkFcIi5jaGFyQ29kZUF0KDApLCBsaW1pdCA9IFwiWlwiLmNoYXJDb2RlQXQoMCk7IGkgKyBzdGFydCA8PSBsaW1pdDsgaSsrKSB7XG4gIGNvbnN0IGNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkgKyBzdGFydCk7XG4gIGFscGhhYmV0QnlFbmNvZGluZ1tjaGFyXSA9IGk7XG4gIGFscGhhYmV0QnlWYWx1ZVtpXSA9IGNoYXI7XG59XG5mb3IgKGxldCBpID0gMCwgc3RhcnQgPSBcImFcIi5jaGFyQ29kZUF0KDApLCBsaW1pdCA9IFwielwiLmNoYXJDb2RlQXQoMCk7IGkgKyBzdGFydCA8PSBsaW1pdDsgaSsrKSB7XG4gIGNvbnN0IGNoYXIgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGkgKyBzdGFydCk7XG4gIGNvbnN0IGluZGV4ID0gaSArIDI2O1xuICBhbHBoYWJldEJ5RW5jb2RpbmdbY2hhcl0gPSBpbmRleDtcbiAgYWxwaGFiZXRCeVZhbHVlW2luZGV4XSA9IGNoYXI7XG59XG5mb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcbiAgYWxwaGFiZXRCeUVuY29kaW5nW2kudG9TdHJpbmcoMTApXSA9IGkgKyA1MjtcbiAgY29uc3QgY2hhciA9IGkudG9TdHJpbmcoMTApO1xuICBjb25zdCBpbmRleCA9IGkgKyA1MjtcbiAgYWxwaGFiZXRCeUVuY29kaW5nW2NoYXJdID0gaW5kZXg7XG4gIGFscGhhYmV0QnlWYWx1ZVtpbmRleF0gPSBjaGFyO1xufVxuYWxwaGFiZXRCeUVuY29kaW5nW1wiK1wiXSA9IDYyO1xuYWxwaGFiZXRCeVZhbHVlWzYyXSA9IFwiK1wiO1xuYWxwaGFiZXRCeUVuY29kaW5nW1wiL1wiXSA9IDYzO1xuYWxwaGFiZXRCeVZhbHVlWzYzXSA9IFwiL1wiO1xudmFyIGJpdHNQZXJMZXR0ZXIgPSA2O1xudmFyIGJpdHNQZXJCeXRlID0gODtcbnZhciBtYXhMZXR0ZXJWYWx1ZSA9IDYzO1xuXG4vLyBub2RlX21vZHVsZXMvLnBucG0vQHNtaXRoeSt1dGlsLWJhc2U2NEAyLjAuMC9ub2RlX21vZHVsZXMvQHNtaXRoeS91dGlsLWJhc2U2NC9kaXN0LWVzL2Zyb21CYXNlNjQuYnJvd3Nlci5qc1xudmFyIGZyb21CYXNlNjQgPSAoaW5wdXQpID0+IHtcbiAgbGV0IHRvdGFsQnl0ZUxlbmd0aCA9IGlucHV0Lmxlbmd0aCAvIDQgKiAzO1xuICBpZiAoaW5wdXQuc2xpY2UoLTIpID09PSBcIj09XCIpIHtcbiAgICB0b3RhbEJ5dGVMZW5ndGggLT0gMjtcbiAgfSBlbHNlIGlmIChpbnB1dC5zbGljZSgtMSkgPT09IFwiPVwiKSB7XG4gICAgdG90YWxCeXRlTGVuZ3RoLS07XG4gIH1cbiAgY29uc3Qgb3V0ID0gbmV3IEFycmF5QnVmZmVyKHRvdGFsQnl0ZUxlbmd0aCk7XG4gIGNvbnN0IGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KG91dCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpICs9IDQpIHtcbiAgICBsZXQgYml0cyA9IDA7XG4gICAgbGV0IGJpdExlbmd0aCA9IDA7XG4gICAgZm9yIChsZXQgaiA9IGksIGxpbWl0ID0gaSArIDM7IGogPD0gbGltaXQ7IGorKykge1xuICAgICAgaWYgKGlucHV0W2pdICE9PSBcIj1cIikge1xuICAgICAgICBpZiAoIShpbnB1dFtqXSBpbiBhbHBoYWJldEJ5RW5jb2RpbmcpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgSW52YWxpZCBjaGFyYWN0ZXIgJHtpbnB1dFtqXX0gaW4gYmFzZTY0IHN0cmluZy5gKTtcbiAgICAgICAgfVxuICAgICAgICBiaXRzIHw9IGFscGhhYmV0QnlFbmNvZGluZ1tpbnB1dFtqXV0gPDwgKGxpbWl0IC0gaikgKiBiaXRzUGVyTGV0dGVyO1xuICAgICAgICBiaXRMZW5ndGggKz0gYml0c1BlckxldHRlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJpdHMgPj49IGJpdHNQZXJMZXR0ZXI7XG4gICAgICB9XG4gICAgfVxuICAgIGNvbnN0IGNodW5rT2Zmc2V0ID0gaSAvIDQgKiAzO1xuICAgIGJpdHMgPj49IGJpdExlbmd0aCAlIGJpdHNQZXJCeXRlO1xuICAgIGNvbnN0IGJ5dGVMZW5ndGggPSBNYXRoLmZsb29yKGJpdExlbmd0aCAvIGJpdHNQZXJCeXRlKTtcbiAgICBmb3IgKGxldCBrID0gMDsgayA8IGJ5dGVMZW5ndGg7IGsrKykge1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gKGJ5dGVMZW5ndGggLSBrIC0gMSkgKiBiaXRzUGVyQnl0ZTtcbiAgICAgIGRhdGFWaWV3LnNldFVpbnQ4KGNodW5rT2Zmc2V0ICsgaywgKGJpdHMgJiAyNTUgPDwgb2Zmc2V0KSA+PiBvZmZzZXQpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkob3V0KTtcbn07XG5cbi8vIG5vZGVfbW9kdWxlcy8ucG5wbS9Ac21pdGh5K3V0aWwtYmFzZTY0QDIuMC4wL25vZGVfbW9kdWxlcy9Ac21pdGh5L3V0aWwtYmFzZTY0L2Rpc3QtZXMvdG9CYXNlNjQuYnJvd3Nlci5qc1xuZnVuY3Rpb24gdG9CYXNlNjQoaW5wdXQpIHtcbiAgbGV0IHN0ciA9IFwiXCI7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW5wdXQubGVuZ3RoOyBpICs9IDMpIHtcbiAgICBsZXQgYml0cyA9IDA7XG4gICAgbGV0IGJpdExlbmd0aCA9IDA7XG4gICAgZm9yIChsZXQgaiA9IGksIGxpbWl0ID0gTWF0aC5taW4oaSArIDMsIGlucHV0Lmxlbmd0aCk7IGogPCBsaW1pdDsgaisrKSB7XG4gICAgICBiaXRzIHw9IGlucHV0W2pdIDw8IChsaW1pdCAtIGogLSAxKSAqIGJpdHNQZXJCeXRlO1xuICAgICAgYml0TGVuZ3RoICs9IGJpdHNQZXJCeXRlO1xuICAgIH1cbiAgICBjb25zdCBiaXRDbHVzdGVyQ291bnQgPSBNYXRoLmNlaWwoYml0TGVuZ3RoIC8gYml0c1BlckxldHRlcik7XG4gICAgYml0cyA8PD0gYml0Q2x1c3RlckNvdW50ICogYml0c1BlckxldHRlciAtIGJpdExlbmd0aDtcbiAgICBmb3IgKGxldCBrID0gMTsgayA8PSBiaXRDbHVzdGVyQ291bnQ7IGsrKykge1xuICAgICAgY29uc3Qgb2Zmc2V0ID0gKGJpdENsdXN0ZXJDb3VudCAtIGspICogYml0c1BlckxldHRlcjtcbiAgICAgIHN0ciArPSBhbHBoYWJldEJ5VmFsdWVbKGJpdHMgJiBtYXhMZXR0ZXJWYWx1ZSA8PCBvZmZzZXQpID4+IG9mZnNldF07XG4gICAgfVxuICAgIHN0ciArPSBcIj09XCIuc2xpY2UoMCwgNCAtIGJpdENsdXN0ZXJDb3VudCk7XG4gIH1cbiAgcmV0dXJuIHN0cjtcbn1cblxuLy8gc3JjL2luZGV4LnRzXG52YXIgc3RyaW5nVG9CdWZmZXIgPSAodmFsdWUpID0+IHtcbiAgcmV0dXJuIG5ldyBUZXh0RW5jb2RlcigpLmVuY29kZSh2YWx1ZSk7XG59O1xudmFyIGJ1ZmZlclRvU3RyaW5nID0gKHZhbHVlKSA9PiB7XG4gIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUodmFsdWUpO1xufTtcbnZhciBiYXNlNjR1cmxFbmNvZGUgPSAodmFsdWUpID0+IHRvQmFzZTY0KHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHN0cmluZ1RvQnVmZmVyKHZhbHVlKSA6IHZhbHVlKS5yZXBsYWNlKC9cXCsvZywgXCItXCIpLnJlcGxhY2UoL1xcLy9nLCBcIl9cIikucmVwbGFjZSgvPS9nLCBcIlwiKTtcbnZhciBiYXNlNjR1cmxEZWNvZGUgPSAodmFsdWUpID0+IGZyb21CYXNlNjQoXG4gIHZhbHVlLnJlcGxhY2UoLy0vZywgXCIrXCIpLnJlcGxhY2UoL18vZywgXCIvXCIpICsgQXJyYXkoKDQgLSB2YWx1ZS5sZW5ndGggJSA0KSAlIDQgKyAxKS5qb2luKFwiPVwiKVxuKTtcbnZhciBkZWZhdWx0cyA9IHtcbiAgZW5jcnlwdGlvbjogeyBzYWx0Qml0czogMjU2LCBhbGdvcml0aG06IFwiYWVzLTI1Ni1jYmNcIiwgaXRlcmF0aW9uczogMSwgbWluUGFzc3dvcmRsZW5ndGg6IDMyIH0sXG4gIGludGVncml0eTogeyBzYWx0Qml0czogMjU2LCBhbGdvcml0aG06IFwic2hhMjU2XCIsIGl0ZXJhdGlvbnM6IDEsIG1pblBhc3N3b3JkbGVuZ3RoOiAzMiB9LFxuICB0dGw6IDAsXG4gIHRpbWVzdGFtcFNrZXdTZWM6IDYwLFxuICBsb2NhbHRpbWVPZmZzZXRNc2VjOiAwXG59O1xudmFyIGNsb25lID0gKG9wdGlvbnMpID0+ICh7XG4gIC4uLm9wdGlvbnMsXG4gIGVuY3J5cHRpb246IHsgLi4ub3B0aW9ucy5lbmNyeXB0aW9uIH0sXG4gIGludGVncml0eTogeyAuLi5vcHRpb25zLmludGVncml0eSB9XG59KTtcbnZhciBhbGdvcml0aG1zID0ge1xuICBcImFlcy0xMjgtY3RyXCI6IHsga2V5Qml0czogMTI4LCBpdkJpdHM6IDEyOCwgbmFtZTogXCJBRVMtQ1RSXCIgfSxcbiAgXCJhZXMtMjU2LWNiY1wiOiB7IGtleUJpdHM6IDI1NiwgaXZCaXRzOiAxMjgsIG5hbWU6IFwiQUVTLUNCQ1wiIH0sXG4gIHNoYTI1NjogeyBrZXlCaXRzOiAyNTYsIG5hbWU6IFwiU0hBLTI1NlwiIH1cbn07XG52YXIgbWFjRm9ybWF0VmVyc2lvbiA9IFwiMlwiO1xudmFyIG1hY1ByZWZpeCA9IGBGZTI2LiR7bWFjRm9ybWF0VmVyc2lvbn1gO1xudmFyIHJhbmRvbUJ5dGVzID0gKF9jcnlwdG8sIHNpemUpID0+IHtcbiAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShzaXplKTtcbiAgX2NyeXB0by5nZXRSYW5kb21WYWx1ZXMoYnl0ZXMpO1xuICByZXR1cm4gYnl0ZXM7XG59O1xudmFyIHJhbmRvbUJpdHMgPSAoX2NyeXB0bywgYml0cykgPT4ge1xuICBpZiAoYml0cyA8IDEpXG4gICAgdGhyb3cgRXJyb3IoXCJJbnZhbGlkIHJhbmRvbSBiaXRzIGNvdW50XCIpO1xuICBjb25zdCBieXRlcyA9IE1hdGguY2VpbChiaXRzIC8gOCk7XG4gIHJldHVybiByYW5kb21CeXRlcyhfY3J5cHRvLCBieXRlcyk7XG59O1xudmFyIHBia2RmMiA9IGFzeW5jIChfY3J5cHRvLCBwYXNzd29yZCwgc2FsdCwgaXRlcmF0aW9ucywga2V5TGVuZ3RoLCBoYXNoKSA9PiB7XG4gIGNvbnN0IHBhc3N3b3JkQnVmZmVyID0gc3RyaW5nVG9CdWZmZXIocGFzc3dvcmQpO1xuICBjb25zdCBpbXBvcnRlZEtleSA9IGF3YWl0IF9jcnlwdG8uc3VidGxlLmltcG9ydEtleShcInJhd1wiLCBwYXNzd29yZEJ1ZmZlciwgXCJQQktERjJcIiwgZmFsc2UsIFtcbiAgICBcImRlcml2ZUJpdHNcIlxuICBdKTtcbiAgY29uc3Qgc2FsdEJ1ZmZlciA9IHN0cmluZ1RvQnVmZmVyKHNhbHQpO1xuICBjb25zdCBwYXJhbXMgPSB7IG5hbWU6IFwiUEJLREYyXCIsIGhhc2gsIHNhbHQ6IHNhbHRCdWZmZXIsIGl0ZXJhdGlvbnMgfTtcbiAgY29uc3QgZGVyaXZhdGlvbiA9IGF3YWl0IF9jcnlwdG8uc3VidGxlLmRlcml2ZUJpdHMocGFyYW1zLCBpbXBvcnRlZEtleSwga2V5TGVuZ3RoICogOCk7XG4gIHJldHVybiBkZXJpdmF0aW9uO1xufTtcbnZhciBnZW5lcmF0ZUtleSA9IGFzeW5jIChfY3J5cHRvLCBwYXNzd29yZCwgb3B0aW9ucykgPT4ge1xuICBpZiAoIXBhc3N3b3JkPy5sZW5ndGgpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiRW1wdHkgcGFzc3dvcmRcIik7XG4gIGlmIChvcHRpb25zID09IG51bGwgfHwgdHlwZW9mIG9wdGlvbnMgIT09IFwib2JqZWN0XCIpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIG9wdGlvbnNcIik7XG4gIGlmICghKG9wdGlvbnMuYWxnb3JpdGhtIGluIGFsZ29yaXRobXMpKVxuICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBhbGdvcml0aG06ICR7b3B0aW9ucy5hbGdvcml0aG19YCk7XG4gIGNvbnN0IGFsZ29yaXRobSA9IGFsZ29yaXRobXNbb3B0aW9ucy5hbGdvcml0aG1dO1xuICBjb25zdCByZXN1bHQgPSB7fTtcbiAgY29uc3QgaG1hYyA9IG9wdGlvbnMuaG1hYyA/PyBmYWxzZTtcbiAgY29uc3QgaWQgPSBobWFjID8geyBuYW1lOiBcIkhNQUNcIiwgaGFzaDogYWxnb3JpdGhtLm5hbWUgfSA6IHsgbmFtZTogYWxnb3JpdGhtLm5hbWUgfTtcbiAgY29uc3QgdXNhZ2UgPSBobWFjID8gW1wic2lnblwiLCBcInZlcmlmeVwiXSA6IFtcImVuY3J5cHRcIiwgXCJkZWNyeXB0XCJdO1xuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSBcInN0cmluZ1wiKSB7XG4gICAgaWYgKHBhc3N3b3JkLmxlbmd0aCA8IG9wdGlvbnMubWluUGFzc3dvcmRsZW5ndGgpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBQYXNzd29yZCBzdHJpbmcgdG9vIHNob3J0IChtaW4gJHtvcHRpb25zLm1pblBhc3N3b3JkbGVuZ3RofSBjaGFyYWN0ZXJzIHJlcXVpcmVkKWBcbiAgICAgICk7XG4gICAgbGV0IHsgc2FsdCA9IFwiXCIgfSA9IG9wdGlvbnM7XG4gICAgaWYgKCFzYWx0KSB7XG4gICAgICBjb25zdCB7IHNhbHRCaXRzID0gMCB9ID0gb3B0aW9ucztcbiAgICAgIGlmICghc2FsdEJpdHMpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1pc3Npbmcgc2FsdCBhbmQgc2FsdEJpdHMgb3B0aW9uc1wiKTtcbiAgICAgIGNvbnN0IHJhbmRvbVNhbHQgPSByYW5kb21CaXRzKF9jcnlwdG8sIHNhbHRCaXRzKTtcbiAgICAgIHNhbHQgPSBbLi4ubmV3IFVpbnQ4QXJyYXkocmFuZG9tU2FsdCldLm1hcCgoeCkgPT4geC50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpKS5qb2luKFwiXCIpO1xuICAgIH1cbiAgICBjb25zdCBkZXJpdmVkS2V5ID0gYXdhaXQgcGJrZGYyKFxuICAgICAgX2NyeXB0byxcbiAgICAgIHBhc3N3b3JkLFxuICAgICAgc2FsdCxcbiAgICAgIG9wdGlvbnMuaXRlcmF0aW9ucyxcbiAgICAgIGFsZ29yaXRobS5rZXlCaXRzIC8gOCxcbiAgICAgIFwiU0hBLTFcIlxuICAgICk7XG4gICAgY29uc3QgaW1wb3J0ZWRFbmNyeXB0aW9uS2V5ID0gYXdhaXQgX2NyeXB0by5zdWJ0bGUuaW1wb3J0S2V5KFxuICAgICAgXCJyYXdcIixcbiAgICAgIGRlcml2ZWRLZXksXG4gICAgICBpZCxcbiAgICAgIGZhbHNlLFxuICAgICAgdXNhZ2VcbiAgICApO1xuICAgIHJlc3VsdC5rZXkgPSBpbXBvcnRlZEVuY3J5cHRpb25LZXk7XG4gICAgcmVzdWx0LnNhbHQgPSBzYWx0O1xuICB9IGVsc2Uge1xuICAgIGlmIChwYXNzd29yZC5sZW5ndGggPCBhbGdvcml0aG0ua2V5Qml0cyAvIDgpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJLZXkgYnVmZmVyIChwYXNzd29yZCkgdG9vIHNtYWxsXCIpO1xuICAgIHJlc3VsdC5rZXkgPSBhd2FpdCBfY3J5cHRvLnN1YnRsZS5pbXBvcnRLZXkoXCJyYXdcIiwgcGFzc3dvcmQsIGlkLCBmYWxzZSwgdXNhZ2UpO1xuICAgIHJlc3VsdC5zYWx0ID0gXCJcIjtcbiAgfVxuICBpZiAob3B0aW9ucy5pdilcbiAgICByZXN1bHQuaXYgPSBvcHRpb25zLml2O1xuICBlbHNlIGlmIChcIml2Qml0c1wiIGluIGFsZ29yaXRobSlcbiAgICByZXN1bHQuaXYgPSByYW5kb21CaXRzKF9jcnlwdG8sIGFsZ29yaXRobS5pdkJpdHMpO1xuICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBlbmNyeXB0ID0gYXN5bmMgKF9jcnlwdG8sIHBhc3N3b3JkLCBvcHRpb25zLCBkYXRhKSA9PiB7XG4gIGNvbnN0IGtleSA9IGF3YWl0IGdlbmVyYXRlS2V5KF9jcnlwdG8sIHBhc3N3b3JkLCBvcHRpb25zKTtcbiAgY29uc3QgdGV4dEJ1ZmZlciA9IHN0cmluZ1RvQnVmZmVyKGRhdGEpO1xuICBjb25zdCBlbmNyeXB0ZWQgPSBhd2FpdCBfY3J5cHRvLnN1YnRsZS5lbmNyeXB0KFxuICAgIHsgbmFtZTogYWxnb3JpdGhtc1tvcHRpb25zLmFsZ29yaXRobV0ubmFtZSwgaXY6IGtleS5pdiB9LFxuICAgIGtleS5rZXksXG4gICAgdGV4dEJ1ZmZlclxuICApO1xuICByZXR1cm4geyBlbmNyeXB0ZWQ6IG5ldyBVaW50OEFycmF5KGVuY3J5cHRlZCksIGtleSB9O1xufTtcbnZhciBkZWNyeXB0ID0gYXN5bmMgKF9jcnlwdG8sIHBhc3N3b3JkLCBvcHRpb25zLCBkYXRhKSA9PiB7XG4gIGNvbnN0IGtleSA9IGF3YWl0IGdlbmVyYXRlS2V5KF9jcnlwdG8sIHBhc3N3b3JkLCBvcHRpb25zKTtcbiAgY29uc3QgZGVjcnlwdGVkID0gYXdhaXQgX2NyeXB0by5zdWJ0bGUuZGVjcnlwdChcbiAgICB7IG5hbWU6IGFsZ29yaXRobXNbb3B0aW9ucy5hbGdvcml0aG1dLm5hbWUsIGl2OiBrZXkuaXYgfSxcbiAgICBrZXkua2V5LFxuICAgIHR5cGVvZiBkYXRhID09PSBcInN0cmluZ1wiID8gc3RyaW5nVG9CdWZmZXIoZGF0YSkgOiBkYXRhXG4gICk7XG4gIHJldHVybiBidWZmZXJUb1N0cmluZyhuZXcgVWludDhBcnJheShkZWNyeXB0ZWQpKTtcbn07XG52YXIgaG1hY1dpdGhQYXNzd29yZCA9IGFzeW5jIChfY3J5cHRvLCBwYXNzd29yZCwgb3B0aW9ucywgZGF0YSkgPT4ge1xuICBjb25zdCBrZXkgPSBhd2FpdCBnZW5lcmF0ZUtleShfY3J5cHRvLCBwYXNzd29yZCwgeyAuLi5vcHRpb25zLCBobWFjOiB0cnVlIH0pO1xuICBjb25zdCB0ZXh0QnVmZmVyID0gc3RyaW5nVG9CdWZmZXIoZGF0YSk7XG4gIGNvbnN0IHNpZ25lZCA9IGF3YWl0IF9jcnlwdG8uc3VidGxlLnNpZ24oeyBuYW1lOiBcIkhNQUNcIiB9LCBrZXkua2V5LCB0ZXh0QnVmZmVyKTtcbiAgY29uc3QgZGlnZXN0ID0gYmFzZTY0dXJsRW5jb2RlKG5ldyBVaW50OEFycmF5KHNpZ25lZCkpO1xuICByZXR1cm4geyBkaWdlc3QsIHNhbHQ6IGtleS5zYWx0IH07XG59O1xudmFyIG5vcm1hbGl6ZVBhc3N3b3JkID0gKHBhc3N3b3JkKSA9PiB7XG4gIGlmICh0eXBlb2YgcGFzc3dvcmQgPT09IFwic3RyaW5nXCIgfHwgcGFzc3dvcmQgaW5zdGFuY2VvZiBVaW50OEFycmF5KVxuICAgIHJldHVybiB7IGVuY3J5cHRpb246IHBhc3N3b3JkLCBpbnRlZ3JpdHk6IHBhc3N3b3JkIH07XG4gIGlmIChcInNlY3JldFwiIGluIHBhc3N3b3JkKVxuICAgIHJldHVybiB7IGlkOiBwYXNzd29yZC5pZCwgZW5jcnlwdGlvbjogcGFzc3dvcmQuc2VjcmV0LCBpbnRlZ3JpdHk6IHBhc3N3b3JkLnNlY3JldCB9O1xuICByZXR1cm4geyBpZDogcGFzc3dvcmQuaWQsIGVuY3J5cHRpb246IHBhc3N3b3JkLmVuY3J5cHRpb24sIGludGVncml0eTogcGFzc3dvcmQuaW50ZWdyaXR5IH07XG59O1xudmFyIHNlYWwgPSBhc3luYyAoX2NyeXB0bywgb2JqZWN0LCBwYXNzd29yZCwgb3B0aW9ucykgPT4ge1xuICBpZiAoIXBhc3N3b3JkKVxuICAgIHRocm93IEVycm9yKFwiRW1wdHkgcGFzc3dvcmRcIik7XG4gIGNvbnN0IG9wdHMgPSBjbG9uZShvcHRpb25zKTtcbiAgY29uc3Qgbm93ID0gRGF0ZS5ub3coKSArIChvcHRzLmxvY2FsdGltZU9mZnNldE1zZWMgfHwgMCk7XG4gIGNvbnN0IG9iamVjdFN0cmluZyA9IEpTT04uc3RyaW5naWZ5KG9iamVjdCk7XG4gIGNvbnN0IHBhc3MgPSBub3JtYWxpemVQYXNzd29yZChwYXNzd29yZCk7XG4gIGNvbnN0IHsgaWQgPSBcIlwiIH0gPSBwYXNzO1xuICBpZiAoaWQgJiYgIS9eXFx3KyQvLnRlc3QoaWQpKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgcGFzc3dvcmQgaWRcIik7XG4gIGNvbnN0IHsgZW5jcnlwdGVkLCBrZXkgfSA9IGF3YWl0IGVuY3J5cHQoX2NyeXB0bywgcGFzcy5lbmNyeXB0aW9uLCBvcHRzLmVuY3J5cHRpb24sIG9iamVjdFN0cmluZyk7XG4gIGNvbnN0IGVuY3J5cHRlZEI2NCA9IGJhc2U2NHVybEVuY29kZShuZXcgVWludDhBcnJheShlbmNyeXB0ZWQpKTtcbiAgY29uc3QgaXYgPSBiYXNlNjR1cmxFbmNvZGUoa2V5Lml2KTtcbiAgY29uc3QgZXhwaXJhdGlvbiA9IG9wdHMudHRsID8gbm93ICsgb3B0cy50dGwgOiBcIlwiO1xuICBjb25zdCBtYWNCYXNlU3RyaW5nID0gYCR7bWFjUHJlZml4fSoke2lkfSoke2tleS5zYWx0fSoke2l2fSoke2VuY3J5cHRlZEI2NH0qJHtleHBpcmF0aW9ufWA7XG4gIGNvbnN0IG1hYyA9IGF3YWl0IGhtYWNXaXRoUGFzc3dvcmQoX2NyeXB0bywgcGFzcy5pbnRlZ3JpdHksIG9wdHMuaW50ZWdyaXR5LCBtYWNCYXNlU3RyaW5nKTtcbiAgY29uc3Qgc2VhbGVkID0gYCR7bWFjQmFzZVN0cmluZ30qJHttYWMuc2FsdH0qJHttYWMuZGlnZXN0fWA7XG4gIHJldHVybiBzZWFsZWQ7XG59O1xudmFyIGZpeGVkVGltZUNvbXBhcmlzb24gPSAoYSwgYikgPT4ge1xuICBsZXQgbWlzbWF0Y2ggPSBhLmxlbmd0aCA9PT0gYi5sZW5ndGggPyAwIDogMTtcbiAgaWYgKG1pc21hdGNoKVxuICAgIGIgPSBhO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpICs9IDEpXG4gICAgbWlzbWF0Y2ggfD0gYS5jaGFyQ29kZUF0KGkpIF4gYi5jaGFyQ29kZUF0KGkpO1xuICByZXR1cm4gbWlzbWF0Y2ggPT09IDA7XG59O1xudmFyIHVuc2VhbCA9IGFzeW5jIChfY3J5cHRvLCBzZWFsZWQsIHBhc3N3b3JkLCBvcHRpb25zKSA9PiB7XG4gIGlmICghcGFzc3dvcmQpXG4gICAgdGhyb3cgRXJyb3IoXCJFbXB0eSBwYXNzd29yZFwiKTtcbiAgY29uc3Qgb3B0cyA9IGNsb25lKG9wdGlvbnMpO1xuICBjb25zdCBub3cgPSBEYXRlLm5vdygpICsgKG9wdHMubG9jYWx0aW1lT2Zmc2V0TXNlYyB8fCAwKTtcbiAgY29uc3QgcGFydHMgPSBzZWFsZWQuc3BsaXQoXCIqXCIpO1xuICBpZiAocGFydHMubGVuZ3RoICE9PSA4KVxuICAgIHRocm93IG5ldyBFcnJvcihcIkluY29ycmVjdCBudW1iZXIgb2Ygc2VhbGVkIGNvbXBvbmVudHNcIik7XG4gIGNvbnN0IHByZWZpeCA9IHBhcnRzWzBdO1xuICBsZXQgcGFzc3dvcmRJZCA9IHBhcnRzWzFdO1xuICBjb25zdCBlbmNyeXB0aW9uU2FsdCA9IHBhcnRzWzJdO1xuICBjb25zdCBlbmNyeXB0aW9uSXYgPSBwYXJ0c1szXTtcbiAgY29uc3QgZW5jcnlwdGVkQjY0ID0gcGFydHNbNF07XG4gIGNvbnN0IGV4cGlyYXRpb24gPSBwYXJ0c1s1XTtcbiAgY29uc3QgaG1hY1NhbHQgPSBwYXJ0c1s2XTtcbiAgY29uc3QgaG1hYyA9IHBhcnRzWzddO1xuICBjb25zdCBtYWNCYXNlU3RyaW5nID0gYCR7cHJlZml4fSoke3Bhc3N3b3JkSWR9KiR7ZW5jcnlwdGlvblNhbHR9KiR7ZW5jcnlwdGlvbkl2fSoke2VuY3J5cHRlZEI2NH0qJHtleHBpcmF0aW9ufWA7XG4gIGlmIChtYWNQcmVmaXggIT09IHByZWZpeClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJXcm9uZyBtYWMgcHJlZml4XCIpO1xuICBpZiAoZXhwaXJhdGlvbikge1xuICAgIGlmICghL15cXGQrJC8uZXhlYyhleHBpcmF0aW9uKSlcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgZXhwaXJhdGlvblwiKTtcbiAgICBjb25zdCBleHAgPSBwYXJzZUludChleHBpcmF0aW9uLCAxMCk7XG4gICAgaWYgKGV4cCA8PSBub3cgLSBvcHRzLnRpbWVzdGFtcFNrZXdTZWMgKiAxZTMpXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJFeHBpcmVkIHNlYWxcIik7XG4gIH1cbiAgaWYgKHR5cGVvZiBwYXNzd29yZCA9PT0gXCJ1bmRlZmluZWRcIiB8fCB0eXBlb2YgcGFzc3dvcmQgPT09IFwic3RyaW5nXCIgJiYgcGFzc3dvcmQubGVuZ3RoID09PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcihcIkVtcHR5IHBhc3N3b3JkXCIpO1xuICBsZXQgcGFzcyA9IFwiXCI7XG4gIHBhc3N3b3JkSWQgPSBwYXNzd29yZElkIHx8IFwiZGVmYXVsdFwiO1xuICBpZiAodHlwZW9mIHBhc3N3b3JkID09PSBcInN0cmluZ1wiIHx8IHBhc3N3b3JkIGluc3RhbmNlb2YgVWludDhBcnJheSlcbiAgICBwYXNzID0gcGFzc3dvcmQ7XG4gIGVsc2UgaWYgKCEocGFzc3dvcmRJZCBpbiBwYXNzd29yZCkpXG4gICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgZmluZCBwYXNzd29yZDogJHtwYXNzd29yZElkfWApO1xuICBlbHNlXG4gICAgcGFzcyA9IHBhc3N3b3JkW3Bhc3N3b3JkSWRdO1xuICBwYXNzID0gbm9ybWFsaXplUGFzc3dvcmQocGFzcyk7XG4gIGNvbnN0IG1hY09wdGlvbnMgPSBvcHRzLmludGVncml0eTtcbiAgbWFjT3B0aW9ucy5zYWx0ID0gaG1hY1NhbHQ7XG4gIGNvbnN0IG1hYyA9IGF3YWl0IGhtYWNXaXRoUGFzc3dvcmQoX2NyeXB0bywgcGFzcy5pbnRlZ3JpdHksIG1hY09wdGlvbnMsIG1hY0Jhc2VTdHJpbmcpO1xuICBpZiAoIWZpeGVkVGltZUNvbXBhcmlzb24obWFjLmRpZ2VzdCwgaG1hYykpXG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQmFkIGhtYWMgdmFsdWVcIik7XG4gIGNvbnN0IGVuY3J5cHRlZCA9IGJhc2U2NHVybERlY29kZShlbmNyeXB0ZWRCNjQpO1xuICBjb25zdCBkZWNyeXB0T3B0aW9ucyA9IG9wdHMuZW5jcnlwdGlvbjtcbiAgZGVjcnlwdE9wdGlvbnMuc2FsdCA9IGVuY3J5cHRpb25TYWx0O1xuICBkZWNyeXB0T3B0aW9ucy5pdiA9IGJhc2U2NHVybERlY29kZShlbmNyeXB0aW9uSXYpO1xuICBjb25zdCBkZWNyeXB0ZWQgPSBhd2FpdCBkZWNyeXB0KF9jcnlwdG8sIHBhc3MuZW5jcnlwdGlvbiwgZGVjcnlwdE9wdGlvbnMsIGVuY3J5cHRlZCk7XG4gIGlmIChkZWNyeXB0ZWQpXG4gICAgcmV0dXJuIEpTT04ucGFyc2UoZGVjcnlwdGVkKTtcbiAgcmV0dXJuIG51bGw7XG59O1xuXG5leHBvcnQgeyBhbGdvcml0aG1zLCBiYXNlNjR1cmxEZWNvZGUsIGJhc2U2NHVybEVuY29kZSwgYnVmZmVyVG9TdHJpbmcsIGNsb25lLCBkZWNyeXB0LCBkZWZhdWx0cywgZW5jcnlwdCwgZ2VuZXJhdGVLZXksIGhtYWNXaXRoUGFzc3dvcmQsIG1hY0Zvcm1hdFZlcnNpb24sIG1hY1ByZWZpeCwgcmFuZG9tQml0cywgc2VhbCwgc3RyaW5nVG9CdWZmZXIsIHVuc2VhbCB9O1xuIl0sIm5hbWVzIjpbImFscGhhYmV0QnlFbmNvZGluZyIsImFscGhhYmV0QnlWYWx1ZSIsIkFycmF5IiwiaSIsInN0YXJ0IiwiY2hhckNvZGVBdCIsImxpbWl0IiwiY2hhciIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsImluZGV4IiwidG9TdHJpbmciLCJiaXRzUGVyTGV0dGVyIiwiYml0c1BlckJ5dGUiLCJtYXhMZXR0ZXJWYWx1ZSIsImZyb21CYXNlNjQiLCJpbnB1dCIsInRvdGFsQnl0ZUxlbmd0aCIsImxlbmd0aCIsInNsaWNlIiwib3V0IiwiQXJyYXlCdWZmZXIiLCJkYXRhVmlldyIsIkRhdGFWaWV3IiwiYml0cyIsImJpdExlbmd0aCIsImoiLCJUeXBlRXJyb3IiLCJjaHVua09mZnNldCIsImJ5dGVMZW5ndGgiLCJNYXRoIiwiZmxvb3IiLCJrIiwib2Zmc2V0Iiwic2V0VWludDgiLCJVaW50OEFycmF5IiwidG9CYXNlNjQiLCJzdHIiLCJtaW4iLCJiaXRDbHVzdGVyQ291bnQiLCJjZWlsIiwic3RyaW5nVG9CdWZmZXIiLCJ2YWx1ZSIsIlRleHRFbmNvZGVyIiwiZW5jb2RlIiwiYnVmZmVyVG9TdHJpbmciLCJUZXh0RGVjb2RlciIsImRlY29kZSIsImJhc2U2NHVybEVuY29kZSIsInJlcGxhY2UiLCJiYXNlNjR1cmxEZWNvZGUiLCJqb2luIiwiZGVmYXVsdHMiLCJlbmNyeXB0aW9uIiwic2FsdEJpdHMiLCJhbGdvcml0aG0iLCJpdGVyYXRpb25zIiwibWluUGFzc3dvcmRsZW5ndGgiLCJpbnRlZ3JpdHkiLCJ0dGwiLCJ0aW1lc3RhbXBTa2V3U2VjIiwibG9jYWx0aW1lT2Zmc2V0TXNlYyIsImNsb25lIiwib3B0aW9ucyIsImFsZ29yaXRobXMiLCJrZXlCaXRzIiwiaXZCaXRzIiwibmFtZSIsInNoYTI1NiIsIm1hY0Zvcm1hdFZlcnNpb24iLCJtYWNQcmVmaXgiLCJyYW5kb21CeXRlcyIsIl9jcnlwdG8iLCJzaXplIiwiYnl0ZXMiLCJnZXRSYW5kb21WYWx1ZXMiLCJyYW5kb21CaXRzIiwiRXJyb3IiLCJwYmtkZjIiLCJwYXNzd29yZCIsInNhbHQiLCJrZXlMZW5ndGgiLCJoYXNoIiwicGFzc3dvcmRCdWZmZXIiLCJpbXBvcnRlZEtleSIsInN1YnRsZSIsImltcG9ydEtleSIsInNhbHRCdWZmZXIiLCJwYXJhbXMiLCJkZXJpdmF0aW9uIiwiZGVyaXZlQml0cyIsImdlbmVyYXRlS2V5IiwicmVzdWx0IiwiaG1hYyIsImlkIiwidXNhZ2UiLCJyYW5kb21TYWx0IiwibWFwIiwieCIsInBhZFN0YXJ0IiwiZGVyaXZlZEtleSIsImltcG9ydGVkRW5jcnlwdGlvbktleSIsImtleSIsIml2IiwiZW5jcnlwdCIsImRhdGEiLCJ0ZXh0QnVmZmVyIiwiZW5jcnlwdGVkIiwiZGVjcnlwdCIsImRlY3J5cHRlZCIsImhtYWNXaXRoUGFzc3dvcmQiLCJzaWduZWQiLCJzaWduIiwiZGlnZXN0Iiwibm9ybWFsaXplUGFzc3dvcmQiLCJzZWNyZXQiLCJzZWFsIiwib2JqZWN0Iiwib3B0cyIsIm5vdyIsIkRhdGUiLCJvYmplY3RTdHJpbmciLCJKU09OIiwic3RyaW5naWZ5IiwicGFzcyIsInRlc3QiLCJlbmNyeXB0ZWRCNjQiLCJleHBpcmF0aW9uIiwibWFjQmFzZVN0cmluZyIsIm1hYyIsInNlYWxlZCIsImZpeGVkVGltZUNvbXBhcmlzb24iLCJhIiwiYiIsIm1pc21hdGNoIiwidW5zZWFsIiwicGFydHMiLCJzcGxpdCIsInByZWZpeCIsInBhc3N3b3JkSWQiLCJlbmNyeXB0aW9uU2FsdCIsImVuY3J5cHRpb25JdiIsImhtYWNTYWx0IiwiZXhlYyIsImV4cCIsInBhcnNlSW50IiwibWFjT3B0aW9ucyIsImRlY3J5cHRPcHRpb25zIiwicGFyc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/iron-webcrypto/dist/index.js\n");

/***/ })

};
;